# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API PolygonMesh object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_PolygonMesh contains unit tests for the PolygonMesh class.
#
# API Object::       PolygonMesh
# C++ File::         rpolygonmesh.cpp
# Parent Class::     Object
# Version::          SketchUp 6.0
#
# The PolygonMesh class contains methods to create polygon mesh structures.
# This is useful if you need to write a custom importer/exporter in Ruby that
# works at the level of triangulated polygons. For example, you can determine
# the triangles that make up a 15-sided SketchUp face by using this class.
#
class TC_PolygonMesh < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    Sketchup.active_model.entities.clear!
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PolygonMesh.add_polygon
  # @file                rpolygonmesh.cpp
  #
  # The add_polygon method is used to add a add_polygon to the mesh.
  #
  #
  # Args:
  # - point: A Point3D object.
  #
  # Returns:
  # - index: the index in the mesh for the point
  #

  # Test the example code that we have in the API documentation.
  def test_add_polygon_api_example
    assert_nothing_raised do
     mesh = Geom::PolygonMesh.new
     point = Geom::Point3d.new 0,1,2
     point1 = Geom::Point3d.new 1,0,2
     point2 = Geom::Point3d.new 2,0,1
     status = mesh.add_polygon point, point1, point2
    end
  end

  # Test basic usage
  def test_add_polygon_basic
    mesh = Geom::PolygonMesh.new
    point = Geom::Point3d.new 0,1,2
    point1 = Geom::Point3d.new 1,0,2
    point2 = Geom::Point3d.new 2,0,1
    status = mesh.add_polygon point, point1, point2
    assert_equal(1, status, 'Fail in test_add_polygon_basic')
    assert_equal(mesh.count_points, 3, 'Fail in test_add_polygon_basic')
  end

  # Test negative points
  def test_add_polygon_negative_points
    mesh = Geom::PolygonMesh.new
    point = Geom::Point3d.new -0,-1,-2
    point1 = Geom::Point3d.new -1,-0,-2
    point2 = Geom::Point3d.new -2,-0,-1
    status = mesh.add_polygon point, point1, point2
    assert_equal(1, status, 'Fail in test_add_polygon_negative_points')
    assert_equal(mesh.count_points, 3, 'Fail in test_add_polygon_negative_points')
  end

  # Test index increments
  def test_add_polygon_multi
    mesh = Geom::PolygonMesh.new
    point = Geom::Point3d.new 0,1,2
    point1 = Geom::Point3d.new 1,0,2
    point2 = Geom::Point3d.new 2,0,1
    point3 = Geom::Point3d.new 3,3,3
    index = mesh.add_polygon point, point1, point2
    assert_equal(1, index, 'Fail in test_add_polygon_multi')
    index = mesh.add_polygon point, point1, point3
    assert_equal(2, index, 'Fail in test_add_polygon_multi')
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PolygonMesh.uv_at
  # @file                rpolygonmesh.cpp
  #
  # The uv_at method is used to access a uv (texture coordinates) at a
  # specific index.
  #
  # "UVs" is a way of referring to the u,v texture coordinates (as
  # opposed to the X, Y, and Z axis that you construct your meshes on),
  # which are points defining 1-by-1 positions within an image. These
  # coordinates connect to points in your 3D model, to position an image
  # texture onto it's surface (similar to virtual "thumb tacks")
  #
  # These coordinates pin an exact spot on an image that you wish to use
  # to texture your model to a specific point on an object's surface.
  # Between these points, your software will stretch the image smoothly.
  # This is what is referred to as UV mapping.
  #
  #
  # Args:
  # - index: The index for the texture coordinate.
  #
  # Returns:
  # - point: a Point3d object where the x equals the u value
  # and the y equals the v value.
  #

  # Test the example code that we have in the API documentation.
  def test_uv_at_api_example
    mesh = Geom::PolygonMesh.new
    assert_nothing_raised do
     point = mesh.uv_at(1,1)
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PolygonMesh.polygon_points_at
  # @file                rpolygonmesh.cpp
  #
  # The polygon_points_at method is used to retrieve the points for a
  # polygon that is at a specific index in the mesh.
  #
  #
  #
  # Args:
  # - index: An index for a polygon in the mesh.
  #
  # Returns:
  # - points: an array of points that make up the polygon if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_polygon_points_at_api_example
    assert_nothing_raised do
     mesh = Geom::PolygonMesh.new
     point = Geom::Point3d.new 0,1,2
     point1 = Geom::Point3d.new 1,0,2
     point2 = Geom::Point3d.new 2,0,1
     status = mesh.add_polygon point, point1, point2
     points = mesh.polygon_points_at 1
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PolygonMesh.points
  # @file                rpolygonmesh.cpp
  #
  # The points method is used to retrieve an array of points (vertices) in
  # the mesh
  #
  #
  # Args:
  #
  # Returns:
  # - points: an array of points (vertices) if successful
  #

  # Test the example code that we have in the API documentation.
  def test_points_api_example
    assert_nothing_raised do
     mesh = Geom::PolygonMesh.new
     point1 = Geom::Point3d.new 0,1,2
     point2 = Geom::Point3d.new 10,20,30
     index = mesh.add_point point1
     index = mesh.add_point point2
     # returns array of points in the mesh
     num = mesh.points
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PolygonMesh.add_point
  # @file                rpolygonmesh.cpp
  #
  # The add_point method is used to add a point to the mesh.
  #
  # The index can be used for creating polygons.
  #
  #
  # Args:
  # - point: A Point3D object.
  #
  # Returns:
  # - index: the index in the mesh for the point
  #

  # Test the example code that we have in the API documentation.
  def test_add_point_api_example
    assert_nothing_raised do
     mesh = Geom::PolygonMesh.new
     point = Geom::Point3d.new 0,1,2
     index = mesh.add_point point
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PolygonMesh.uvs
  # @file                rpolygonmesh.cpp
  #
  # The uvs method is used to retrieve an array of uv coordinates in the
  # mesh.
  #
  #
  # Args:
  #
  # Returns:
  # - points: an array of uv coordinates if successful
  #

  # Test the example code that we have in the API documentation.
  def test_uvs_api_example
    assert_nothing_raised do
     mesh = Geom::PolygonMesh.new
     point1 = Geom::Point3d.new 0,1,2
     point2 = Geom::Point3d.new 10,20,30
     index = mesh.add_point point1
     index = mesh.add_point point2
     # returns array of points in the mesh
     uvs = mesh.uvs 0
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PolygonMesh.polygons
  # @file                rpolygonmesh.cpp
  #
  # The polygons method is used to retrieve an array of all polygons in
  # the mesh.
  #
  # The returned array can contain negative values with the sign
  # indicating a hidden edge. For example, a return value of [-1, 2, 3]
  # indicates that the edge from 1 to 2 is hidden.
  #
  #
  # Args:
  #
  # Returns:
  # - polygons: an array of polygons if successful
  #

  # Test the example code that we have in the API documentation.
  def test_polygons_api_example
    polygonmesh = Geom::PolygonMesh.new
    assert_nothing_raised do
     polygons = polygonmesh.polygons
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PolygonMesh.normal_at
  # @file                rpolygonmesh.cpp
  #
  # The normal_at method is used to determine the normal at a particular
  # index in the mesh.
  #
  # Index is 1 based (starts at 1).
  #
  #
  # Args:
  # - index: The index in the mesh where the normal is that you want to
  # retrieve.
  #
  # Returns:
  # - normal: a normal
  #

  # Test the example code that we have in the API documentation.
  def test_normal_at_api_example
    mesh = Geom::PolygonMesh.new
    assert_nothing_raised do
     normal = mesh.normal_at 1
    end
  end



  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PolygonMesh.set_point
  # @file                rpolygonmesh.cpp
  #
  # The set_point method is used to set the point at a specific index in
  # the mesh.
  #
  #
  # Args:
  # - index: The index where the point will be set.
  # - point: A Point3d object to set at the index.
  #
  # Returns:
  # - polygonmesh: a PolygonMesh object
  #

  # Test the example code that we have in the API documentation.
  def test_set_point_api_example
    assert_nothing_raised do
     mesh = Geom::PolygonMesh.new
     point1 = Geom::Point3d.new 0,1,2
     point2 = Geom::Point3d.new 10,20,30
     index = mesh.add_point point1
     status = mesh.set_point 1, point2
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PolygonMesh.point_index
  # @file                rpolygonmesh.cpp
  #
  # The point_index method is used to retrieve the index of a point in the
  # mesh.
  #
  # Returns 0 if point is not found.
  #
  #
  # Args:
  # - point: A Point3d object.
  #
  # Returns:
  # - index: the index in the mesh for the Point3d object
  #

  # Test the example code that we have in the API documentation.
  def test_point_index_api_example
    assert_nothing_raised do
     mesh = Geom::PolygonMesh.new
     point1 = Geom::Point3d.new 0,1,2
     point2 = Geom::Point3d.new 10,20,30
     index = mesh.add_point point1
     index = mesh.add_point point2
     index = mesh.point_index point1
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PolygonMesh.count_points
  # @file                rpolygonmesh.cpp
  #
  # The count_points method is used to count the number of points in a
  # mesh.
  #
  #
  # Args:
  #
  # Returns:
  # - points: the number of points in a mesh, if successful.
  #

  # Test the example code that we have in the API documentation.
  def test_count_points_api_example
    assert_nothing_raised do
     mesh = Geom::PolygonMesh.new
     point = Geom::Point3d.new 0,1,2
     index = mesh.add_point point
     num = mesh.count_points
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PolygonMesh.polygon_at
  # @file                rpolygonmesh.cpp
  #
  # The polygon_at method is used to retrieve an array of vertex index
  # values for a polygon at a specific index.
  #
  # Index is 1 based (starts at 1). The returned array can contain
  # negative values with the sign indicating a hidden edge. For example, a
  # return value of [-1, 2, 3] indicates that the edge from 1 to 2 is
  # hidden. The negative values should not be used as an index for
  # point_at, take the positive value of the index value in the polygon
  # array. So if you get [-1, 2,3] use 1 as the arg to point_at.
  #
  #
  # Args:
  # - index: The index of the desired polygon.
  #
  # Returns:
  # - vertices: an array of vertex index values
  #

  # Test the example code that we have in the API documentation.
  def test_polygon_at_api_example
    assert_nothing_raised do
     mesh = Geom::PolygonMesh.new
     point = Geom::Point3d.new 0,1,2
     point1 = Geom::Point3d.new 1,0,2
     point2 = Geom::Point3d.new 2,0,1
     status = mesh.add_polygon point, point1, point2
     polygon = mesh.polygon_at 1
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PolygonMesh.point_at
  # @file                rpolygonmesh.cpp
  #
  # The point_at method is used to retrieve the point at a specific index
  # in the mesh.
  #
  # Index is 1 based (starts at 1).
  #
  #
  # Args:
  # - index: The index in the mesh where the point is that you want to
  # retrieve.
  #
  # Returns:
  # - point: a Point3D object
  #

  # Test the example code that we have in the API documentation.
  def test_point_at_api_example
    assert_nothing_raised do
     mesh = Geom::PolygonMesh.new
     point1 = Geom::Point3d.new 0,1,2
     point2 = Geom::Point3d.new 10,20,30
     index = mesh.add_point point1
     index = mesh.add_point point2
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PolygonMesh.count_polygons
  # @file                rpolygonmesh.cpp
  #
  # The count_polygons count the number of polygons in the mesh.
  #
  #
  # Args:
  #
  # Returns:
  # - polygons: the number of polygons in the mesh, if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_count_polygons_api_example
    assert_nothing_raised do
     mesh = Geom::PolygonMesh.new
     point = Geom::Point3d.new 0,1,2
     point1 = Geom::Point3d.new 1,0,2
     point2 = Geom::Point3d.new 2,0,1
     index = mesh.add_polygon point, point1, point2
     nump = mesh.count_polygons
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PolygonMesh.transform!
  # @file                rpolygonmesh.cpp
  #
  # The transform! method is used to apply a transformation to a mesh.
  #
  #
  # Args:
  # - transform: A Transformation object.
  #
  # Returns:
  # - polygonmesh: the PolygonMesh object
  #

  # Test the example code that we have in the API documentation.
  def test_transform_inplace_api_example
    
    assert_nothing_raised do
     point = Geom::Point3d.new 100,200,300
     t = Geom::Transformation.new point
     mesh = Geom::PolygonMesh.new
     point1 = Geom::Point3d.new 0,1,2
     index = mesh.add_point point1
     pmesh = mesh.transform! t
    end

  end


end
