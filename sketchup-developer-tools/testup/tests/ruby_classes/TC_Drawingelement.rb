# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Drawingelement object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Drawingelement contains unit tests for the Drawingelement class.
#
# API Object::       Drawingelement
# C++ File::         rdrawingelement.cpp
# Parent Class::     Entity
# Version::          SketchUp 6.0
#
# Drawingelement is a base class for an item in the model that can be
# displayed. These items include edges, contruction points, construction
# lines, and images. Arc curves and arcs are not included because they are not
# drawing elements by themselves, but are a composition of edges.
#
#
class TC_Drawingelement < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end

    entities_to_erase = []
    for entity in Sketchup.active_model.entities
      entities_to_erase.push entity
    end

    for entity in entities_to_erase
      if entity.valid?
        entity.erase!
      end
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Drawingelement.receives_shadows?
  # @file                rdrawingelement.cpp
  #
  # The receive_shadows? method is used to determine if the Drawingelement
  # is receiving shadows.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if the Drawingelement is receiving
  # shadows, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_receives_shadows_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     status = face.receives_shadows?
     UI.messagebox status.to_s
    end
  end

  # Test edgecases for values passed to this method.
  #def test_receives_shadows_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_receives_shadows_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_receives_shadows_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Drawingelement.visible?
  # @file                rdrawingelement.cpp
  #
  # The visible? method is used to get the visible status for an element.
  #
  #
  # Args:
  #
  # Returns:
  # - : true if visible, false if not
  #

  # Test the example code that we have in the API documentation.
  def test_visible_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     UI.messagebox "Click OK to Hide the Box"
     face.visible = false
     UI.messagebox "Is the face visible? " + face.visible?.to_s
    end
  end

  # Test edgecases for values passed to this method.
  #def test_visible_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_visible_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_visible_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Drawingelement.material
  # @file                rdrawingelement.cpp
  #
  # The material method is used to retrieve the material for the drawing
  # element.
  #
  #
  # Args:
  #
  # Returns:
  # - material: the Material object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_material_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     material = face.material
    end
  end

  # Test edgecases for values passed to this method.
  #def test_material_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_material_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_material_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Drawingelement.layer
  # @file                rdrawingelement.cpp
  #
  # The layer method is used to retrieve the Layer object of the drawing
  # element.
  #
  #
  # Args:
  #
  # Returns:
  # - layer: a layer object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_layer_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     layer = face.layer
    end
  end

  # Test edgecases for values passed to this method.
  #def test_layer_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_layer_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_layer_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Drawingelement.hidden=
  # @file                rdrawingelement.cpp
  #
  # The hidden= method is used to set the hidden status for an element.
  #
  #
  # Args:
  # - hidden: true if you want to hide the element, false if you do not
  # want to hide the element.
  #
  # Returns:
  # - status: true if the element has been hidden, false if
  # the element has not been hidden.
  #

  # Test the example code that we have in the API documentation.
  def test_set_hidden_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     UI.messagebox "Click OK to Hide the Box"
     status = face.hidden = true
    end
  end

  # Test edgecases for values passed to this method.
  #def test_set_hidden_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_set_hidden_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_set_hidden_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Drawingelement.erase!
  # @file                rdrawingelement.cpp
  #
  # The erase! method is used to erase an element from the model.
  #
  # Erasing an Edge also erases all of the Face objects that use the
  # Edge.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if successful, false if unsuccessful
  #

  # Test the example code that we have in the API documentation.
  def test_erase_inplace_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     status = face.erase!
    end
  end

  # Test edgecases for values passed to this method.
  #def test_erase_inplace_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_erase_inplace_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_erase_inplace_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Drawingelement.bounds
  # @file                rdrawingelement.cpp
  #
  # The bounds method is used to retrieve the BoundingBox for an drawing
  # element.
  #
  #
  # Args:
  #
  # Returns:
  # - boundingbox: A BoundingBox object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_bounds_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     # Remember, anything that can be displayed, such as a face, is also
     # a Drawingelement. So I can call bounds on a face because Face
     # is a sub-class of Drawingelement.
     boundingbox = face.bounds
    end
  end

  # Test edgecases for values passed to this method.
  #def test_bounds_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_bounds_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_bounds_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Drawingelement.casts_shadows=
  # @file                rdrawingelement.cpp
  #
  # The casts_shadows= method is used to set the Drawingelement to cast
  # shadows.
  #
  #
  # Args:
  # - casts: true if you want the Drawingelement object to cast shadows,
  # false if you do not want the Drawingelement object to cast shadows.
  #
  # Returns:
  # - status: true if successful, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_set_casts_shadows_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 100]
     pts[1] = [width, 0, 100]
     pts[2] = [width, depth, 100]
     pts[3] = [0, depth, 100]
     # Add the face to the entities in the model.
     face = entities.add_face pts

     # Make the face not cast shadows.
     status = face.casts_shadows = false
     UI.messagebox status.to_s
    end
  end

  # Test edgecases for values passed to this method.
  #def test_set_casts_shadows_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_set_casts_shadows_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_set_casts_shadows_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Drawingelement.hidden?
  # @file                rdrawingelement.cpp
  #
  # The hidden? method is used to determine if the element is hidden.
  #
  # Hidden elements are still in the model, but they are not displayed.
  #
  #
  # Args:
  #
  # Returns:
  # - status:
  #

  # Test the example code that we have in the API documentation.
  def test_hidden_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     status = face.hidden?
     UI.messagebox "hidden? " + status.to_s
    end
  end

  # Test edgecases for values passed to this method.
  #def test_hidden_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_hidden_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_hidden_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Drawingelement.material=
  # @file                rdrawingelement.cpp
  #
  # The material= method is used to set the material for the drawing
  # element.
  #
  # Syntax: material = drawingelement.material = material |
  # "materialname" | color | "colorname"
  #
  #
  # Args:
  # - material: A Material, name of a material, Color, or name of a color.
  #
  # Returns:
  # - material: the new Material object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_set_material_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     m = model.materials.add "Joe"
     begin
       # Returns nil if not successful, path if successful.
       # Should return a texture object.
       m.texture = "c:\\My Textures\\Carpet.jpg"
     rescue
       UI.messagebox $!.message
     end
     # You will see the material applied when you reverse the box's faces
     material = face.material = m
    end
  end

  # Test edgecases for values passed to this method.
  #def test_set_material_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_set_material_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_set_material_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Drawingelement.layer=
  # @file                rdrawingelement.cpp
  #
  # The layer= method is used to set the layer for the drawing element.
  #
  # An exception is raised if you give a string that doesn't match any
  # layer name.
  #
  #
  # Args:
  # - layer: A layer number.
  # - layername: A layer name.
  #
  # Returns:
  # - layer: the new Layer object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_set_layer_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     # Add a layer
     layer = Sketchup.active_model.layers.add "joe"
     # Put the face on the joe layer (instead of layer 0)
     newlayer = face.layer = layer
    end
  end

  # Test edgecases for values passed to this method.
  #def test_set_layer_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_set_layer_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_set_layer_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Drawingelement.casts_shadows?
  # @file                rdrawingelement.cpp
  #
  # The casts_shadows? method is used to determine if the Drawingelement
  # is casting shadows.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if the Drawingelement is casting shadows,
  # false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_casts_shadows_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     status = face.casts_shadows?
     UI.messagebox status.to_s
    end
  end

  # Test edgecases for values passed to this method.
  #def test_casts_shadows_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_casts_shadows_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_casts_shadows_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Drawingelement.receives_shadows=
  # @file                rdrawingelement.cpp
  #
  # The receive_shadows= method is used to set the Drawingelement to
  # receive shadows.
  #
  #
  #
  # Args:
  # - receive: true if you want the Drawingelement object to receive
  # shadows, false if not.
  #
  # Returns:
  # - status: true if successful, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_set_receives_shadows_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 100]
     pts[1] = [width, 0, 100]
     pts[2] = [width, depth, 100]
     pts[3] = [0, depth, 100]
     # Add the face to the entities in the model.
     face = entities.add_face pts

     # Make the face not receive shadows.
     status = face.receives_shadows = false
     UI.messagebox status.to_s
    end
  end

  # Test edgecases for values passed to this method.
  #def test_set_receives_shadows_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_set_receives_shadows_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_set_receives_shadows_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Drawingelement.visible=
  # @file                rdrawingelement.cpp
  #
  # The visible= method is used to set the visible status for an element.
  # This method performs an opposite function to the hidden= method.
  #
  #
  # Args:
  # - visibility: true if you want to hide the element, false if not
  #
  # Returns:
  # - status: true if the element has been hidden, false if
  # the element has not been hidden.
  #

  # Test the example code that we have in the API documentation.
  def test_set_visible_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     UI.messagebox "Click OK to Hide the Box"
     status = face.visible = false
    end
  end

  # Test edgecases for values passed to this method.
  #def test_set_visible_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_set_visible_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_set_visible_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

end
