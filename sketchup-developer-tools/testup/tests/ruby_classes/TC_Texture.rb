# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Tricia Stahr 
#
# Tests the SketchUp Ruby API Texture object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Texture contains unit tests for the Texture class.
#
# API Object::       Texture
# C++ File::         rtexture.cpp
# Parent Class::     Entity
# Version::          SketchUp 6.0
#
# The Texture class contains methods for obtaining information about textures
# that are part of your materials in your model (within the In-Model section
# of the Materials Browser). Remember, textures are repeatable images that
# "tile" when painted on a surface.
#
class TC_Texture < Test::Unit::TestCase

  # Setup for test cases
  def setup

    # Set class variables for test textures to be used in the class tests
    local_path = __FILE__.slice(0, __FILE__.rindex('.'))

    # Path to a valid texture
    @test_valid_texture = File.join(local_path, 'alphatest.png')

    # Redirect messagebox output
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # Tear down for test cases
  def teardown
     Sketchup.active_model.materials.purge_unused # Purge unused materials
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Texture.average_color
  # @file                rtexture.cpp
  #
  # The average_color method retrieves a color object with the average
  # color found in the texture.
  #
  #
  # Args:
  #
  # Returns:
  # - color: a color object (if successful), nil if
  # unsuccessful.
  #

  # Test the example code that we have in the API documentation for the 
  # average_color method.
  def test_average_color_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      materials = model.materials
      m = materials.add 'Test Color'
      begin
        m.texture = @test_valid_texture
      rescue
        UI.messagebox $!.message
      end
      texture = m.texture
      color = texture.average_color
      if (color)
        UI.messagebox color
      else
        UI.messagebox 'Failure: No average color'
      end
    end
  end

  # Test edgecases for the average_color method.

  # Test that the color object returned by the average_color method
  # is not nil
  def test_average_color_edgecases_color_object_not_nil
    m = Sketchup.active_model.materials.add 'Test Color'
    m.texture = @test_valid_texture
    texture = m.texture
    color = texture.average_color
    assert_not_nil(color, 'Object returned by the average_color method ' +
                   'is nil')
  end

  # Test that the values of the color object returned by average_color 
  # method are valid
  def test_average_color_edgecases_color_object_values_valid
    m = Sketchup.active_model.materials.add 'Test Color'
    m.texture = @test_valid_texture
    texture = m.texture
    color = texture.average_color

    # Get values of the color object
    red_actual = color.red
    blue_actual = color.blue
    green_actual = color.green
    alpha_actual = color.alpha

    # Set expected values
    red_expected = 190
    blue_expected = 219
    green_expected = 191
    alpha_expected = 31

    # Assert if the expected values are different than the actual values
    assert_equal([red_actual, blue_actual, green_actual, alpha_actual],
                 [red_expected, blue_expected, green_expected,
                 alpha_expected],
                 "\nWe expected #{red_expected} for the color of " +
                 "red and got  #{red_actual}
                 We expected #{blue_expected} for the color of " +
                 "blue and got  #{blue_actual}
                 We expected #{green_expected} for the color of " +
                 "green and got  #{green_actual}
                 We expected #{alpha_expected} for the alpha " +
                 "value and got  #{alpha_actual} \n")
  end

  # Test assertion occurs when method is called on a nil texture
  def test_average_color_bad_params
    assert_raise NoMethodError do
      texture = nil
      color = texture.average_color
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Texture.valid?
  # @file                rtexture.cpp
  #
  # The valid? method ensures that a texture is valid.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if valid, false if invalid.
  #

  # Test the example code that we have in the API documentation for the valid? method
  def test_valid_api_example
    assert_nothing_raised do
      m = Sketchup.active_model.materials.add 'Test Color'
      m.texture = @test_valid_texture
      texture = m.texture
      status = texture.valid?
      if (status)
        UI.messagebox status
      else
        UI.messagebox status
      end
    end
  end

  # Test edgecases for this method.
  def test_valid_edgecases_return_value_is_valid
    m = Sketchup.active_model.materials.add 'Test Color'
    m.texture = @test_valid_texture

    # Test that method returns true when called on a valid texture
    texture = m.texture
    status = texture.valid?
    assert_equal(true, status, '.valid? method did not return true for ' +
                 'valid texture')
    # TODO(tricias): idealy test that method returns false when called on an 
    # invalid exture but I'm not sure how to do this as invalid texture files
    # can't be added to materials....
  end

  # Test assertion occurs when method is called on a nil texture
  def test_valid_bad_params
    assert_raise NoMethodError do
      texture = nil
      status = texture.valid?
    end
  end

    # ----------------------------------------------------------------------------
  # @par Ruby Method:    Texture.filename
  # @file                rtexture.cpp
  #
  # The filename method retrieves the entire path, including the file, for
  # a texture object.
  #
  #
  # Args:
  #
  # Returns:
  # - filename: a string representation of the path and
  # filename used for the texture.
  #
  # Test the example code that we have in the API documentation

  def test_filename_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      materials = model.materials
      m = materials.add 'Test Color'
      begin
        m.texture = @test_valid_texture
      rescue
        UI.messagebox $!.message
      end
      texture = m.texture
      filename = texture.filename
      if (filename)
        UI.messagebox filename
      else
        UI.messagebox 'Failure'
      end
    end
  end

  # Test edgecases for this method.
  def test_filename_edgecases_filename_is_valid
    m = Sketchup.active_model.materials.add 'Test Color'

    # Test that valid texture filename is as expected
    m.texture = @test_valid_texture
    texture = m.texture
    filename = texture.filename
    assert_equal(@test_valid_texture, filename,
                 "\n We expected to see #{@test_valid_texture}" +
                 " and got #{filename} \n")
  end

  # Test assertion occurs when method is called on a nil texture
  def test_filename_bad_params
    assert_raise NoMethodError do
      texture = nil
      filename = texture.filename
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Texture.image_height
  # @file                rtexture.cpp
  #
  # The image_height method retrieves the height of the repeatable texture
  # image, in pixels.
  #
  #
  # Args:
  #
  # Returns:
  # - imageheight: the height, in pixels, of the texture
  # pattern
  #

  # Test the example code that we have in the API documentation for 
  # the image_height method.
  def test_image_height_api_example
    assert_nothing_raised do
      m = Sketchup.active_model.materials.add 'Test Color'
      m.texture = @test_valid_texture
      texture = m.texture
      imageheight = texture.image_height
      if (imageheight)
        UI.messagebox imageheight
      else
        UI.messagebox 'Failure'
      end
    end
  end

  # Test edgecases for this method
  def test_image_height_edgecases

    # Test image_height value is as expected
    m = Sketchup.active_model.materials.add 'Test Color'
    m.texture = @test_valid_texture
    texture = m.texture  
    imageheight = texture.image_height
    expected_imageheight = 287
    assert_equal(expected_imageheight, imageheight,
                 "\nWe expected to see a height of " + 
                 "#{expected_imageheight} pixels and got " +
                 "#{imageheight} \n")
  end

  # Test assertion occurs when method is called on a nil texture
  def test_image_height_bad_params
    assert_raise NoMethodError do
      texture = nil
      imageheight = texture.image_height
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Texture.image_width
  # @file                rtexture.cpp
  #
  # The image_width method retrieves the width of the repeatable texture
  # image, in pixels.
  #
  #
  # Args:
  #
  # Returns:
  # - imagewidth: the width, in pixels, of the texture
  # pattern
  #

  # Test the example code that we have in the API documentation for the image_width method
  def test_image_width_api_example
    assert_nothing_raised do
       m = Sketchup.active_model.materials.add 'Test Color'
       m.texture = @test_valid_texture
       texture = m.texture
       imagewidth = texture.image_width
       if (imagewidth)
        UI.messagebox imagewidth
      else
        UI.messagebox 'Failure'
      end
    end
  end

  # Test edgecases for this method.
  def test_image_width_edgecases

    # Test image_width value is as expected
    m = Sketchup.active_model.materials.add 'Test Color'
    m.texture = @test_valid_texture
    texture = m.texture
    imagewidth = texture.image_width
    expected_imagewidth = 380
    assert_equal(expected_imagewidth, imagewidth,
                 "\nWe expected to see a width of " + 
                 "#{expected_imagewidth} pixels and got " +
                 "#{imagewidth} \n")
  end

   # Test assertion occurs when method is called on a nil texture
  def test_image_width_bad_params
    assert_raise NoMethodError do
      texture = nil
      imagewidth = texture.image_width
    end
  end
  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Texture.height
  # @file                rtexture.cpp
  #
  # The height method is used to get the height of a repeatable texture
  # image, in inches.
  #
  #
  # Args:
  #
  # Returns:
  # - height: the height, in inches, of the texture pattern
  #

  # Test the example code that we have in the API documentation for the 
  # height method.
  def test_height_api_example
    assert_nothing_raised do
      m = Sketchup.active_model.materials.add 'Test Color'
      m.texture = @test_valid_texture
      texture = m.texture
      height = texture.height
      if (height)
        UI.messagebox  height
      else
        UI.messagebox 'Failure'
      end
    end
  end

  # Test edgecases for this method.
  def test_height_edgecases

    # Test height value is as expected
    m = Sketchup.active_model.materials.add 'Test Color'
    m.texture = @test_valid_texture
    texture = m.texture
    height = texture.height
    expected_height = 10.0
    assert_equal(expected_height, height, 
                 "\nWe expected a height of #{expected_height} inches" +
                 " and got #{height} \n")
  end

   # Test assertion occurs when method is called on a nil texture
  def test_height_bad_params
    assert_raise NoMethodError do
      texture = nil
      height = texture.height
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Texture.size=
  # @file                rtexture.cpp
  #
  # The size= method allows you to set the size of the repeatable texture
  # image, in inches,
  #
  #
  # Args:
  # - size: The size, in inches, of the texture. This number will apply to
  # height and width to keep aspect ratio.
  #
  # Returns:
  # - size: the size, in inches, of the texture. This number
  # will apply to height and width to keep aspect ratio.
  #
  # Test the example code that we have in the API documentation for 
  # the size method.
  def test_set_size_api_example
    assert_nothing_raised do
      m = Sketchup.active_model.materials.add 'Test Color'
      m.texture = @test_valid_texture
      texture = m.texture
      size = texture.size = 60
      if (size)
        UI.messagebox size
      else
        UI.messagebox 'Failure'
      end
    end
  end

  # Test edgecases for values passed to this method.
  def test_set_size_edgecases

    # Set size of texture and verify that the texture height and width 
    # are as expected
    m = Sketchup.active_model.materials.add 'Test Color'
    m.texture = @test_valid_texture
    texture = m.texture
    size = texture.size = 60
    width = texture.width.to_i
    height = texture.height.to_i
    expected_width = 60
    expected_height = 45
    assert_equal([expected_width, expected_height], [width, height],
                 "\nWe expected to see a height of  #{expected_height}" +
                 " and got #{height}
                 We expected to see a width of  #{expected_width}" +
                 " and got #{width}\n")
  end

   #Test method handles bad values
  def test_set_size_bad_params

    # Test assertion occurs when method is called on a nil texture
    assert_raise NoMethodError do
      texture = nil
      size = texture.size= 60
    end

    # Test assertion occurs when texture size is set to 0
    m = Sketchup.active_model.materials.add 'Test Color'
    m.texture = @test_valid_texture
    texture = m.texture
    assert_raise ArgumentError do
      size = texture.size = 0
    end

    # Test assertion occurs when texture size is set to nil
    assert_raise TypeError do
      size = texture.size = nil
    end
  end

end

