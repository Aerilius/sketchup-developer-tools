# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Behavior object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Behavior contains unit tests for the Behavior class.
#
# API Object::       Behavior
# C++ File::         rcomponentbehavior.cpp
# Parent Class::     Entity
# Version::          SketchUp 6.0
#
# The Behavior class is used to control the behavior of components. A behavior
# is accessed from a ComponentDefinition object.
#
#
class TC_Behavior < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Behavior.is2d?
  # @file                rcomponentbehavior.cpp
  #
  # The is2d? method is used to get a component's 2D behavior.
  #
  #
  # Args:
  #
  # Returns:
  # - status: the status of the 2D behavior (either true or
  # false)
  #

  # Test the example code that we have in the API documentation.
  def test_is2d_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     behavior = model.definitions[0].behavior
     status = behavior.is2d?
     if (status)
       #if status is true, do something
     else
       # if status is false, do something else
     end
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Behavior.shadows_face_sun?
  # @file                rcomponentbehavior.cpp
  #
  # The shadows_face_sun? method is used to determine whether the
  # component's shadow is being cast from the component's current position
  # (as though the component were facing the sun). See the Component
  # entity within the SketchUp User's guide for more information on this
  # feature.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if the component's is to be cast from the
  # component's current position as though the component
  # were facing the sun. False to cause the shadow to be
  # cast from the component's current position.
  #

  # Test the example code that we have in the API documentation.
  def test_shadows_face_sun_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     # Returns a DefinitionList
     definitions = model.definitions
     path = Sketchup.find_support_file "Bed.skp",
       "Components/Components Sampler/"
     begin
       definition = definitions.load path
     rescue
       UI.messagebox $!.message
     end
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Behavior.always_face_camera=
  # @file                rcomponentbehavior.cpp
  #
  # The always_face_camera= method is used to set the always_face_camera
  # behavior for a component.
  #
  # If the always_face_camera behavior is true, a component will always
  # try to orient itself so that the Y axis of the component is facing the
  # camera.
  #
  #
  # Args:
  # - true: Sets the always_face_camera behavior to true .
  # - false: Sets the always_face_camera behavior to false.
  #
  # Returns:
  # - status: the status of the always_face_camera behavior
  # if successful
  #

  # Test the example code that we have in the API documentation.
  def test_set_always_face_camera_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     behavior = model.definitions[0].behavior
     status = behavior.always_face_camera = false
    end
  end

  # Test that setting to true returns true and false returns false.
  def test_set_always_face_camera_true_and_false
   model = Sketchup.active_model
   behavior = model.definitions[0].behavior
   
   behavior.always_face_camera = true
   assert_equal(true, behavior.always_face_camera?,
                'True was not returned though it was just set.' )

   behavior.always_face_camera = false
   assert_equal(false, behavior.always_face_camera?,
                'False was not returned though it was just set.' )
  end



  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Behavior.always_face_camera?
  # @file                rcomponentbehavior.cpp
  #
  # The always_face_camera? method is used to retrieve the
  # always_face_camera behavior for a component.
  #
  # If the always_face_camera behavior is true, then a component will
  # always try to orient itself so that the -Y axis of the component is
  # facing the camera.
  #
  #
  # Args:
  #
  # Returns:
  # - behavior: true if the component is set to always face
  # the camera, false if the component is not set to always
  # face camera.
  #

  # Test the example code that we have in the API documentation.
  def test_always_face_camera_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     # Returns a DefinitionList
     definitions = model.definitions
     path = Sketchup.find_support_file "Bed.skp",
       "Components/Components Sampler/"

     begin
       definition = definitions.load path
     rescue
       UI.messagebox $!.message
     end

     behavior = definition.behavior
     b = behavior.always_face_camera?
     if (b)
       UI.messagebox b
     else
       UI.messagebox "Always Face Camera is equal to false"
     end
     status = behavior.always_face_camera = true
     b = behavior.always_face_camera?
     if (b)
       UI.messagebox b
     else
       UI.messagebox "Failure"
     end
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Behavior.snapto
  # @file                rcomponentbehavior.cpp
  #
  # The snapto method is used to verify the status of a component's "snap
  # to" behavior.
  #
  # Returns a constant indicating the snapping behavior of the component
  # described by behavior. Snapping behavior is how the x-y plane of a
  # component instance will be snapped against a face. Possible values
  # are:
  # SnapTo_Arbitrary => Snap to any aribrary face,
  # SnapTo_Horizontal => Snap to horizontal face like floors,
  # SnapTo_Vertical => Snap to vertical face like walls,
  # SnapTo_Sloped => Snap to sloped face like sloping roofs.
  #
  #
  # Args:
  #
  # Returns:
  # - status: the status of the snapto behavior (either true
  # or false)
  #

  # Test the example code that we have in the API documentation.
  def test_snapto_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     behavior = model.definitions[0].behavior
     status = behavior.snapto
     if (status)
       # if status is true, do something
     else
       # if status is false, do something else
     end
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Behavior.cuts_opening=
  # @file                rcomponentbehavior.cpp
  #
  # The cuts_opening= method is used to set the cut opening behavior for a
  # component.
  #
  #
  # Args:
  # - true: Sets the cuts_opening behavior to true .
  # - false: Sets the cuts_opening behavior to false.
  #
  # Returns:
  # - status: the status of the cuts_opening behavior
  # (either true or false)
  #

  # Test the example code that we have in the API documentation.
  def test_set_cuts_opening_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     behavior = model.definitions[0].behavior
     status = behavior.cuts_opening = false
     if (status)
       # if status is true, print the status
       UI.messagebox status
     else
       # code to respond cuts_opening being false
     end
    end
  end

  # Test that setting to true returns true and false returns false.
  def test_set_cuts_opening_true_and_false
   model = Sketchup.active_model
   behavior = model.definitions[0].behavior
   
   behavior.cuts_opening = true
   assert_equal(true, behavior.cuts_opening?,
                'True was not returned though it was just set.' )

   behavior.cuts_opening = false
   assert_equal(false, behavior.cuts_opening?,
                'False was not returned though it was just set.' )
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Behavior.set_shadows_face_sun=
  # @file                rcomponentbehavior.cpp
  #
  # The shadows_face_sun= method is used to identify whether the
  # component's shadow will be cast from the component's current position
  # as though the component were facing the sun. See the Component entity
  # within the SketchUp User's guide for more information on this feature.
  #
  #
  # Args:
  # - status: true if the component's is to be cast from the component's
  # current position as though the component were facing the sun. False to
  # cause the shadow to be cast from the component's current position.
  #
  # Returns:
  # - behavior: the Behavior object
  #

  # Test the example code that we have in the API documentation.
  def test_set_set_shadows_face_sun_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     behavior = model.definitions[0].behavior
     behavior = behavior.shadows_face_sun = true
    end
  end

  # Test that setting to true returns true and false returns false.
  def test_set_shadows_face_sun_true_and_false
   model = Sketchup.active_model
   behavior = model.definitions[0].behavior
   
   behavior.shadows_face_sun = true
   assert_equal(true, behavior.shadows_face_sun?,
                'True was not returned though it was just set.' )

   behavior.shadows_face_sun = false
   assert_equal(false, behavior.shadows_face_sun?,
                'False was not returned though it was just set.' )
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Behavior.cuts_opening?
  # @file                rcomponentbehavior.cpp
  #
  # The cuts_opening? method is used to get the status of a component's
  # cut opening behavior.
  #
  #
  # Args:
  #
  # Returns:
  # - status: the status of the cuts_opening behavior
  # (either true or false)
  #

  # Test the example code that we have in the API documentation.
  def test_cuts_opening_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     behavior = model.definitions[0].behavior
     status = behavior.cuts_opening?
     if (status)
       # if status is true, do something
     else
       # if status is false, do something else
     end
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Behavior.no_scale_mask=
  # @file                rcomponentbehavior.cpp
  #
  # Sets an integer that is really a bit-by-bit description of which scale
  # tool handles are hidden on a given component. This is useful for
  # creating definitions that can only be scaled in particular ways. If a
  # bit contains a a 1, then a certain handle set will be hidden when the
  # user selects the component and activates the Scale tool. Here is the
  # map of which bits control which handles.
  #
  # Bit0: disable scale along red (X),
  # Bit1: disable scale along green (Y),
  # Bit2: disable scale along blue (Z),
  # Bit3: disable scale in red/blue plane (X+Z),
  # Bit4: disable scale in green/blue plane (Y+Z),
  # Bit5: disable scale in red/green plane (X+Y),
  # Bit6: disable scale uniform (from corners) (XYZ).
  #
  # Note that for 2-dimensional components (such as face-me components),
  # not all of the handles in the list above are even used. Also, if the
  # component you are modifying is already selected with the scale tool,
  # then you or your user must deactivate and reactivate the scale tool
  # for your new behavior to take effect.
  #
  #
  # Args:
  # - scale_mask: - an integer describing which scale tool handles are
  # hidden.
  #
  # Returns:
  # - behavior: the Behavior object
  #

  # Test the example code that we have in the API documentation.
  def test_set_no_scale_mask_api_example
    assert_nothing_raised do
     # Disable the green and red-axes handles by setting bits 1 and 2 to 1.
     definition = Sketchup.active_model.definitions[0]
     behavior = definition.behavior
     behavior.no_scale_mask = (1 << 1) + (1 << 2)
    end
  end

  # Test that various settings are preserved, from no bits set to all.
  def test_no_scale_mask_variations
   model = Sketchup.active_model
   behavior = model.definitions[0].behavior
   
   for i in 0..63 # 0 to 63 is the valid range of settings
     behavior.no_scale_mask = i
     assert_equal(i, behavior.no_scale_mask?,
                  'True was not returned though it was just set.' )
   end
   
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Behavior.is2d=
  # @file                rcomponentbehavior.cpp
  #
  # The is2d= method is used to set the 2D behavior for a component:
  # whether it can be glued or aligned to a face.
  #
  #
  # Args:
  # - true: Sets the 2D behavior to true .
  # - false: Sets the 2D behavior to false.
  #
  # Returns:
  # - true: sets the 2D behavior to true false - sets
  # the 2D behavior to false
  #

  # Test the example code that we have in the API documentation.
  def test_set_is2d_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     behavior = model.definitions[0].behavior
     status = behavior.is2d = false
     if (status)
       # if status is true, print the status
       UI.messagebox status
     else
       # code to respond is2d behavior being false
     end
    end
  end

  # Test that setting to true returns true and false returns false.
  def test_set_is2d_true_and_false
   model = Sketchup.active_model
   behavior = model.definitions[0].behavior
   
   behavior.is2d = true
   assert_equal(true, behavior.is2d?,
                'True was not returned though it was just set.' )

   behavior.is2d = false
   assert_equal(false, behavior.is2d?,
                'False was not returned though it was just set.' )
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Behavior.no_scale_mask?
  # @file                rcomponentbehavior.cpp
  #
  # The no_scale_mask? method returns an integer that is a bit-by-bit
  # description of which scale tool handles are hidden when the user
  # selects this single component with the scale tool. See the
  # no_scale_mask= method for details on the bit encodings used.
  #
  # Returns a constant indicating the snapping behavior of the component
  # described by behavior. Snapping behavior is how the x-y plane of a
  # component instance will be snapped against a face. Possible values
  # are:
  # SnapTo_Arbitrary => Snap to any aribrary face,
  # SnapTo_Horizontal => Snap to horizontal face like floors,
  # SnapTo_Vertical => Snap to vertical face like walls,
  # SnapTo_Sloped => Snap to sloped face like sloping roofs.
  #
  #
  # Args:
  #
  # Returns:
  # - scale_mask: an integer describing which scale tool
  # handles are hidden.
  #

  # Test the example code that we have in the API documentation.
  def test_no_scale_mask_api_example
    assert_nothing_raised do
     definition = Sketchup.active_model.definitions[0]
     behavior = definition.behavior
     no_scale_mask = behavior.no_scale_mask?
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Behavior.snapto=
  # @file                rcomponentbehavior.cpp
  #
  # The snapto= method sets a component's "snap to" behavior.
  #
  # Snapping behavior is how the x-y plane of a component instance will
  # be snapped against a face. Possible constant values are:
  # SnapTo_Arbitrary => Snap to any aribrary face,
  # SnapTo_Horizontal => Snap to horizontal face like floors,
  # SnapTo_Vertical => Snap to vertical face like walls,
  # SnapTo_Sloped => Snap to sloped face like sloping roofs.
  #
  #
  # Args:
  # - snapto: A numeric constant identifying one of the snapto types.
  #
  # Returns:
  # - behavior: the Behavior object
  #

  # Test the example code that we have in the API documentation.
  def test_set_snapto_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     behavior = model.definitions[0].behavior
     behavior.snapto = SnapTo_Horizontal
    end
  end

  # Test the various constant settings
  def test_snapto_constants
   model = Sketchup.active_model
   behavior = model.definitions[0].behavior
   
   behavior.snapto = SnapTo_Arbitrary
   assert_equal(SnapTo_Arbitrary, behavior.snapto,
                'SnapTo_Arbitrary did not match, even though it was just set.')

   behavior.snapto = SnapTo_Horizontal
   assert_equal(SnapTo_Horizontal, behavior.snapto,
                'SnapTo_Horizontal did not match, even though it was just set.')

   behavior.snapto = SnapTo_Vertical
   assert_equal(SnapTo_Vertical, behavior.snapto,
                'SnapTo_Vertical did not match, even though it was just set.')

   behavior.snapto = SnapTo_Sloped
   assert_equal(SnapTo_Sloped, behavior.snapto,
                'SnapTo_Sloped did not match, even though it was just set.')

  end

end
