# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Entities object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Entities contains unit tests for the Entities class.
#
# API Object::       Entities
# C++ File::         rentities.cpp
# Parent Class::     Object
# Version::          SketchUp 6.0
#
# The Entities class is a container class for all entities in a model (it is a
# collection of Entity objects).
#
#
class TC_Entities < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.erase_entities
  # @file                rentities.cpp
  #
  # The erase_entities method is used to erase one or more entities from
  # the model.
  #
  #
  # Args:
  # - entities: An entity or array of entities.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_erase_entities_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]

     # Add the face to the entities in the model
     face = entities.add_face pts

     # I just happen to know that the second entity in the
     # entities objects is an edge, so erase it.
     UI.messagebox entities
     entities.erase_entities entities[1]
     UI.messagebox entities
    end
  end

  # Test edgecases for values passed to this method.
  #def test_erase_entities_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_erase_entities_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_erase_entities_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.add_instance
  # @file                rentities.cpp
  #
  # The add_instance method adds a component instance to the collection of
  # entities.
  #
  #
  # Args:
  # - definition: A ComponentDefinition object.
  # - transform: A Transformation object.
  #
  # Returns:
  # - componentinstance: a ComponentInstance object if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_add_instance_api_example
    assert_nothing_raised do
     point = Geom::Point3d.new 10,20,30
     transform = Geom::Transformation.new point
     model = Sketchup.active_model
     entities = model.active_entities
     path = Sketchup.find_support_file "Bed.skp",
       "Components/Components Sampler/"
     definitions = model.definitions
     componentdefinition = definitions.load path
     instance = entities.add_instance componentdefinition, transform
     if (instance)
       UI.messagebox instance
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_add_instance_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_add_instance_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_add_instance_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.add_arc
  # @file                rentities.cpp
  #
  # The add_arc method is used to create an arc curve segment.
  #
  #
  #
  # Args:
  # - center: A Point3d object representing the center .
  # - xaxis: A Vector3d object representing xaxis for the arc.
  # - normal: A Vector3d object representing normal for the arc.
  # - radius: The radius of the arc.
  # - start_angle: Start angle for the arc.
  # - end_angle: End angle for the arc.
  # - num_segments: (optional) How many segments to draw.
  #
  # Returns:
  # - arccurve: an ArcCurve object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_add_arc_api_example
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = Geom::Vector3d.new 1,0,0
     vector3 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     arccurve = entities.add_arc centerpoint, vector2, vector3, 10, 15, 35
     UI.messagebox arccurve
    end
  end

  # Test edgecases for values passed to this method.
  #def test_add_arc_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_add_arc_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_add_arc_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.at
  # @file                rentities.cpp
  #
  # The at method is an alias for []. See [].
  #
  #
  # Args:
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_at_api_example
    assert_nothing_raised do
     entities = Sketchup.active_model.entities
     entity0 = entities.at(0)
     if (entity0)
       UI.messagebox entity0
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_at_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_at_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_at_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.add_observer
  # @file                rentities.cpp
  #
  # The add_observer method is used to add an observer to the current
  # object.
  #
  #
  # Args:
  # - observer: An observer.
  #
  # Returns:
  # - : true if successful, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_add_observer_api_example
    observer = Object.new
    assert_nothing_raised do
     entities = Sketchup.active_model.entities
     status = entities.add_observer observer
    end
  end

  # Test edgecases for values passed to this method.
  #def test_add_observer_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_add_observer_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_add_observer_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.intersect_with
  # @file                rentities.cpp
  #
  # The intersect_with method is used to intersect an entities, component
  # instance, or group object with a entities object.
  #
  #
  # Args:
  # - recurse: true if you want this entities object to be recursed
  # (intersection lines will be put inside of groups and components within
  # this entities object).
  # - transform1: The transformation for this entities object.
  # - entities1: The entities where you want the intersection lines to
  # appear.
  # - transform2: The transformation for entities1.
  # - hidden: true if you want hidden geometry in this entities object to
  # be used in the intersection.
  # - entities2: An entities object, or an array of entity.
  #
  # Returns:
  # - : nil
  #

  # TODO(scottlininger): I'm not 100% sure how this method works, so I can't
  # write a better example that actually runs at the moment, so I'm commenting
  # the example test out for now.

  # Test the example code that we have in the API documentation.
  #def test_intersect_with_api_example
  #  assert_nothing_raised do
  #   entities.intersect_with recurse, transformation1, entities1,
  #     transformation2, hidden, entities2
  #  end
  #end

  # Test edgecases for values passed to this method.
  #def test_intersect_with_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_intersect_with_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_intersect_with_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.transform_by_vectors
  # @file                rentities.cpp
  #
  # The transform_by_vectors method is used to apply several vectors to
  # several sub-entities all at once.
  #
  #
  # Args:
  # - sub_entities: An array of entities to transform.
  # - vectors: An array of vectors to apply.
  #
  # Returns:
  # - : nil
  #

  # TODO(scottlininger): I'm not 100% sure how this method works, so I can't
  # write a better example that actually runs at the moment, so I'm commenting
  # the example test out for now.

  # Test the example code that we have in the API documentation.
  #def test_transform_by_vectors_api_example
  #  assert_nothing_raised do
  #   # Need better Ruby example.
  #   entities = entities.transform_by_vectors sub_entities, vector_array
  #  end
  #end

  # Test edgecases for values passed to this method.
  #def test_transform_by_vectors_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_transform_by_vectors_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_transform_by_vectors_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.transform_entities
  # @file                rentities.cpp
  #
  # The transform_entities method is used to apply a transform to several
  # sub-entities all at once.
  #
  #
  # Args:
  # - transform: The Transformation to apply.
  # - entities: An array or series of entities to transform.
  #
  # Returns:
  # - status: results of the transform.
  #

  # Test the example code that we have in the API documentation.
  def test_transform_entities_api_example
    assert_nothing_raised do
     entities = Sketchup.active_model.entities
     entities.add_line([0,0,0],[100,100,100])
     entities.add_line([0,0,0],[200,-10,-10])

     entities_to_transform = []
     entities_to_transform.push(entities[0])
     entities_to_transform.push(entities[1])

     transform = Geom::Transformation.new([100,0,0])
     entities.transform_entities(transform, entities_to_transform)
    end
  end

  # Test edgecases for values passed to this method.
  #def test_transform_entities_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_transform_entities_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_transform_entities_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.clear!
  # @file                rentities.cpp
  #
  # The clear! method is used to remove all entities from the collection
  # of entities.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if successful, false if unsuccessful
  #

  # Test the example code that we have in the API documentation.
  def test_clear_inplace_api_example
    assert_nothing_raised do
     coordinates = [10, 10, 10]
     model = Sketchup.active_model
     entities = model.entities
     point = Geom::Point3d.new coordinates
     text = entities.add_text "This is a Test", point
     UI.messagebox "Clearing All"
     status = entities.clear!
    end
  end

  # Test edgecases for values passed to this method.
  #def test_clear_inplace_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_clear_inplace_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_clear_inplace_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.add_face
  # @file                rentities.cpp
  #
  # The add_face method is used to create a face. You can call this method
  # a number of ways:
  #
  # entities.add_face(edge1, edge2, edge3, ...)
  # entities.add_face(edgearray)
  # entities.add_face(pt1, pt2, pt3, ...)
  # entities.add_face([pt1, pt2, pt3,...])
  # entities.add_face(curve)
  #
  # For the last form that takes a Curve, the curve must be closed - like
  # a circle.
  #
  #
  # Args:
  # - some_entities: Either a series of Edge or Point3d objects, an array
  # of Point3d objects, or a closed Curve.
  #
  # Returns:
  # - face: a Face object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_add_face_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     if (face)
       UI.messagebox face
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_add_face_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_add_face_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_add_face_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.add_cline
  # @file                rentities.cpp
  #
  # The add_cline method is used to create a construction line.
  #
  #
  # Args:
  # - start_point: A Point3d object where the line will start.
  # - end: If a Vector3d, then an infinite line passing through the
  # start_point will be created in that direction. If a Point3d, then a
  # finite line will be created between the two points.
  # - stipple: (optional) Stipple pattern. See ConstructionLine.stipple
  # for acceptable patterns.
  #
  # Returns:
  # - construction_line: a ConstructionLine object if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_add_cline_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     entities = model.active_entities
     point1 = Geom::Point3d.new(0,0,0)
     point2 = Geom::Point3d.new(20,20,20)
     constline = entities.add_cline point1,point2
     if (constline)
       UI.messagebox constline
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_add_cline_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_add_cline_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_add_cline_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.length
  # @file                rentities.cpp
  #
  # The length method is used to retrieve the number of entities in the
  # collection of entities.
  #
  #
  # Args:
  #
  # Returns:
  # - length: the number of entities in the collection of
  # entities if successful
  #

  # Test the example code that we have in the API documentation.
  def test_length_api_example
    assert_nothing_raised do
     coordinates = [10, 10, 10]
     model = Sketchup.active_model
     entities = model.entities
     point = Geom::Point3d.new coordinates
     text = entities.add_text "This is a Test", point
     length = entities.length
    end
  end

  # Test edgecases for values passed to this method.
  #def test_length_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_length_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_length_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.add_group
  # @file                rentities.cpp
  #
  # The add_group method is used to create an empty group or a group with
  # entities.
  #
  # NOTE: calling add_group with entities in its parameters has been
  # known to crash SketchUp. It is preferable to create an empty group and
  # then add things to its Entities collection.
  #
  #
  # Args:
  # - (optional): an entities collection to add to the group.
  #
  # Returns:
  # - group: the new group
  #

  # Test the example code that we have in the API documentation.
  def test_add_group_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     entities = model.active_entities
     group = entities.add_group
     if (group)
       UI.messagebox group
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_add_group_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_add_group_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_add_group_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.add_ngon
  # @file                rentities.cpp
  #
  # The add_ngon method is used to create a multi-sided polygon.
  #
  #
  # Args:
  # - center: A Point3d object representing the center of the polygon.
  # - normal: A Vector3d object.
  # - radius: A radius.
  # - numsides: The number of sides for the polygon.
  #
  # Returns:
  # - edges: an array of Edges that make up the polygon if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_add_ngon_api_example
    assert_nothing_raised do
     entities = Sketchup.active_model.entities
     center = Geom::Point3d.new
     normal = Geom::Vector3d.new(0,0,1)
     radius = 100
     numsides = 6
     edges = entities.add_ngon center, normal, radius, numsides
    end
  end

  # Test edgecases for values passed to this method.
  #def test_add_ngon_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_add_ngon_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_add_ngon_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.remove_observer
  # @file                rentities.cpp
  #
  # The remove_observer method is used to remove an observer from the
  # current object.
  #
  #
  # Args:
  # - observer: An observer.
  #
  # Returns:
  # - : true if successful, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_remove_observer_api_example
    observer = Object.new
    assert_nothing_raised do
     entities = Sketchup.active_model.entities
     status = entities.remove_observer observer
    end
  end

  # Test edgecases for values passed to this method.
  #def test_remove_observer_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_remove_observer_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_remove_observer_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.add_curve
  # @file                rentities.cpp
  #
  # The add_curve method is used to create a curve from a collection of
  # edges.
  #
  # The arguments are either Points or an Array of Points. At least 2
  # points are required.
  #
  #
  # Args:
  # - pts_or_array: You can pass either a series of Point3d objects or a
  # single array containing Point3d objects.
  #
  # Returns:
  # - curve: a Curve object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_add_curve_api_example
    assert_nothing_raised do
     entities = Sketchup.active_model.entities
     curve = entities.add_curve [0,0,0], [0,10,0], [1,20,0]
    end
  end

  # Test edgecases for values passed to this method.
  #def test_add_curve_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_add_curve_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_add_curve_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.add_edges
  # @file                rentities.cpp
  #
  # The add_edges method is used to add a set of connected edges to the
  # entities array.
  #
  #
  # Args:
  # - pts_or_array: You can pass either a series of Point3d objects or a
  # single array containing Point3d objects.
  #
  # Returns:
  # - edges: an array of Edge objects if successful
  #

  # Test the example code that we have in the API documentation.
  def test_add_edges_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     entities = model.active_entities
     point1 = Geom::Point3d.new(0,0,0)
     point2 = Geom::Point3d.new(20,20,20)
     edges = entities.add_edges point1, point2
    end
  end

  # Test edgecases for values passed to this method.
  #def test_add_edges_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_add_edges_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_add_edges_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.[]
  # @file                rentities.cpp
  #
  # The [] method is used to retrieve an entity by its index in an array
  # of entities. The index is a number between 0 and entities.count - 1.
  # In general, it is preferable to use the "each" method to iterate
  # though all of the entities in the collection as it will be much more
  # efficient.
  #
  #
  # Args:
  # - index: The index for a specific entity.
  #
  # Returns:
  # - entity: an Entity object if successful, nil if not
  # found
  #

  # Test the example code that we have in the API documentation.
  def test_arrayget_api_example
    assert_nothing_raised do
     entities = Sketchup.active_model.entities
     entity0 = entities[0]
     if (entity0)
       UI.messagebox entity0
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_arrayget_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_arrayget_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_arrayget_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # Test that nil is returned if there is a non-existent index requested.
  # We use the length of the collection to our non-existent index.
  def test_arrayget_nil_on_nonexistent_index
    collection = Sketchup.active_model.entities
    expected = nil
    result = collection[collection.length]
    assert_equal(expected, result,
                 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.add_image
  # @file                rentities.cpp
  #
  # The add_image method is used to add an image to the collection of
  # entities.
  #
  # The width and height are measured in model units (i.e. inches). If
  # the height is not given, then it is computed from the width to
  # preserve the aspect ratio of the image.
  #
  #
  # Args:
  # - filename: A filename for the image file.
  # - point: A Point3d object representing the insertion point of the
  # image.
  # - width: Width for the image.
  # - height: (optional) height for the image if you want to control width
  # and height independently.
  #
  # Returns:
  # - image: an Image object if successful.
  #

  # Test the example code that we have in the API documentation.
  def test_add_image_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     entities = model.active_entities
     point = Geom::Point3d.new 10,20,30
     image = entities.add_image "Shapes.jpg", point, 300
     if (image)
       UI.messagebox image
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_add_image_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_add_image_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_add_image_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.add_circle
  # @file                rentities.cpp
  #
  # The add_circle method is used to create a circle.
  #
  #
  # Args:
  # - center: A Point3d object representing the center .
  # - normal: A Vector3d object representing normal for the arc.
  # - radius: The radius of the arc.
  # - numsegs: (optional) number of segments. Defaults to 24.
  #
  # Returns:
  # - circle: an Array object containing edges if successful
  #

  # Test the example code that we have in the API documentation.
  def test_add_circle_api_example
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edges = entities.add_circle centerpoint, vector2, 10
    end
  end

  # Test edgecases for values passed to this method.
  #def test_add_circle_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_add_circle_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_add_circle_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.parent
  # @file                rentities.cpp
  #
  # The parent method is used to retrieve the parent or object that
  # contains the collection of entities. A parent can be either a Model or
  # ComponentDefinition object.
  #
  #
  # Args:
  #
  # Returns:
  # - parent: the object that contains the collection of
  # entities if successful
  #

  # Test the example code that we have in the API documentation.
  def test_parent_api_example
    assert_nothing_raised do
     coordinates = [10, 10, 10]
     model = Sketchup.active_model
     entities = model.entities
     point = Geom::Point3d.new coordinates
     text = entities.add_text "This is a Test", point
     parent = entities.parent
    end
  end

  # Test edgecases for values passed to this method.
  #def test_parent_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_parent_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_parent_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.add_text
  # @file                rentities.cpp
  #
  # The add_text method adds a note or label text entity to the entities
  #
  #
  # Args:
  # - text: The text string to add.
  # - point: A Point3d object representing the insertion point.
  # - vector: (optional) vector representing an arrow leader.
  #
  # Returns:
  # - text: a Text object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_add_text_api_example
    assert_nothing_raised do
     coordinates = [10, 10, 10]
     model = Sketchup.active_model
     entities = model.entities
     point = Geom::Point3d.new coordinates
     text = entities.add_text "This is a Test", point
    end
  end

  # Test edgecases for values passed to this method.
  #def test_add_text_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_add_text_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_add_text_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.add_cpoint
  # @file                rentities.cpp
  #
  # The add_cpoint method is used to create a construction point.
  #
  #
  # Args:
  # - point: A Point3d object.
  #
  # Returns:
  # - construction_point: a ConstructionPoint object if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_add_cpoint_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     entities = model.active_entities
     point1 = Geom::Point3d.new(100,200,300)
     constpoint = entities.add_cpoint point1
     if (constpoint)
       UI.messagebox constpoint
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_add_cpoint_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_add_cpoint_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_add_cpoint_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.count
  # @file                rentities.cpp
  #
  # The count method is an alias for the length method. See length.
  #
  #
  # Args:
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_count_api_example
    assert_nothing_raised do
     coordinates = [10, 10, 10]
     model = Sketchup.active_model
     entities = model.entities
     point = Geom::Point3d.new coordinates
     text = entities.add_text "This is a Test", point
     length = entities.count
    end
  end

  # Test edgecases for values passed to this method.
  #def test_count_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_count_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_count_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.add_faces_from_mesh
  # @file                rentities.cpp
  #
  # The add_faces_from_mesh is used to add Face objects to the collection
  # of entities from a PolygonMesh.
  #
  #
  # Args:
  # - polygonmesh: A Polygon mesh object.
  #
  # Returns:
  # - faces: an array of Face objects if successful
  #

  # Test the example code that we have in the API documentation.
  def test_add_faces_from_mesh_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     entities = model.active_entities
     mesh = Geom::PolygonMesh.new
     faces = entities.add_faces_from_mesh mesh
     if (faces)
       UI.messagebox faces
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_add_faces_from_mesh_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_add_faces_from_mesh_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_add_faces_from_mesh_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.each
  # @file                rentities.cpp
  #
  # The each method is used to iterate through the entities in the
  # collection of entities.
  #
  #
  #
  # Args:
  # - entity: A variable that will hold each Entity object as they are
  # found if successful.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_each_api_example
    assert_nothing_raised do
     coordinates = [10, 10, 10]
     model = Sketchup.active_model
     entities = model.entities
     point = Geom::Point3d.new coordinates
     text = entities.add_text "This is a Test", point
     entities.each { | entity| UI.messagebox entity }
    end
  end

  # Test edgecases for values passed to this method.
  #def test_each_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_each_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_each_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # Test that the number of iterations is equal to the reported length.
  def test_each_iterations_matches_length
    collection = Sketchup.active_model.entities
    count = 0
    collection.each do |obj|
      count = count + 1
    end
    expected = collection.length
    result = count
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.add_3d_text
  # @file                rentities.cpp
  #
  # The add_3d_text is used to create 3D text. It will be added as edges
  # and faces drawn at the origin.
  #
  #
  # Args:
  # - string: The text to create.
  # - alignment: Number that defines the alignment. There are constants
  # called TextAlignLeft, TextAlignRight, and TextAlignCenter that can be
  # passed.
  # - font: String font name.
  # - is_bold: (optional) Boolean, true for bold.
  # - is_italic: (optional) Boolean, true for italic.
  # - letter_height: (optional) Height of the text in inches.
  # - tolerance: (optional) Tolerance of the curve creation. Defaults to
  # 0.0, which creates the highest possible curve quality.
  # - z: (optional) z position in inches.
  # - is_filled: (optional) Boolean, true for filled, which will put a
  # face between the edges of the letters.
  # - extrusion: (optional) Extrusion depth in inches. Defaults to 0.0.
  #
  # Returns:
  # - : true if successful
  #

  # Test the example code that we have in the API documentation.
  def test_add_3d_text_api_example
    assert_nothing_raised do
     # Draw the word "test" at the origin of the model, aligned left, in
     # Arial Bold, not italics, 1" in size, best tolerance quality, filled,
     # with an extrusion size of 5".
     entities = Sketchup.active_model.entities
     success = entities.add_3d_text('test', TextAlignLeft, "Arial",
       true, false, 1.0, 0.0, 0.5, true, 5.0)
    end
  end

  # Test edgecases for values passed to this method.
  #def test_add_3d_text_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_add_3d_text_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_add_3d_text_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.add_line
  # @file                rentities.cpp
  #
  # The add_line method is used to add an edge to the collection of
  # entities. This is not to be confused with the concept of a "line" from
  # a geometric sense, which is an invisible object represented by an
  # Array of a point and a vector. (See the Array class for more
  # information on geometric lines in SketchUp.)
  #
  # This method is the same as add_edges method, but returns a single
  # edge.
  #
  #
  # Args:
  # - point1: Point3d object representing the edge's starting point.
  # - point2: Point3d object representing the edge's ending point.
  #
  # Returns:
  # - edge: a Edge object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_add_line_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     entities = model.active_entities
     point1 = Geom::Point3d.new(0,0,0)
     point2 = Geom::Point3d.new(20,20,20)
     line = entities.add_line point1,point2
     if (line)
       UI.messagebox line
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_add_line_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_add_line_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_add_line_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Entities.model
  # @file                rentities.cpp
  #
  # The model method is used to retrieve the model that contains the
  # collection of entities.
  #
  #
  # Args:
  #
  # Returns:
  # - model: the model that contains the collection of
  # entities if successful.
  #

  # Test the example code that we have in the API documentation.
  def test_model_api_example
    assert_nothing_raised do
     coordinates = [10, 10, 10]
     model = Sketchup.active_model
     entities = model.entities
     point = Geom::Point3d.new coordinates
     text = entities.add_text "This is a Test", point
     model = entities.model
    end
  end

  # Test edgecases for values passed to this method.
  #def test_model_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_model_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_model_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # Test that the entities method returns an Array object.
  def test_model_returns_model_obj
    obj = Sketchup.active_model.entities
    model_obj = obj.model
    result = model_obj.class
    expected = Sketchup::Model
    assert_equal(expected, result, 'Expected does not match result.')
  end

end
