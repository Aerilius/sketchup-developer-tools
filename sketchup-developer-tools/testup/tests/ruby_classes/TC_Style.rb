# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Style object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Style contains unit tests for the Style class.
#
# API Object::       Style
# C++ File::         rstyle.cpp
# Parent Class::
# Version::          SketchUp 6.0
#
# The Style class contains methods for modifying information about a specific
# style.
#
class TC_Style < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Style.name
  # @file                rstyle.cpp
  #
  # The name method is used to retrieve the name for a style.
  #
  #
  # Args:
  #
  # Returns:
  # - name: the name for the style.
  #

  # Test the example code that we have in the API documentation.
  def test_name_api_example
    styles = Sketchup.active_model.styles
    first_style = styles[0]
    assert_nothing_raised do
      UI.messagebox('Your first style is named: ' + first_style.name.to_s)
    end
  end

#  # Test edgecases for values passed to this method.
#  def test_name_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_name_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_name_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Style.description
  # @file                rstyle.cpp
  #
  # The description method is used to retrieve the description for a
  # style.
  #
  #
  # Args:
  #
  # Returns:
  # - description: the description for the style.
  #

  # Test the example code that we have in the API documentation.
  def test_description_api_example
    assert_nothing_raised do
      style = Sketchup.active_model.styles[0]
      UI.messagebox('Your first style description is: ' +
                    style.description.to_s)
    end
  end

#  # Test edgecases for values passed to this method.
#  def test_description_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_description_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_description_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Style.name=
  # @file                rstyle.cpp
  #
  # The name= method is used to set the name for a style.
  #
  #
  # Args:
  # - name: - the new name for the style.
  #
  # Returns:
  # - name: the name that was set.
  #

  # Test the example code that we have in the API documentation.
  def test_set_name_api_example
    style = Sketchup.active_model.styles[0]
    assert_nothing_raised do
      style.name = 'My Very Own Style'
      UI.messagebox('My new style name is: ' + style.name)
    end
  end

  # Test edgecases for values passed to this method.
  def test_set_name_edgecases
    style = Sketchup.active_model.styles[0]
    style.name = 'My Very Own Style Name!!@#$%^&*()(*&'
    assert_equal('My Very Own Style Name!!@#$%^&*()(*&', style.name.to_s,
                 'Failed in test_set_name_edgecases' )
  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_set_name_bad_params
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # Test that the set name method works with strings.
  def test_set_name_works_with_string
    obj = Sketchup.active_model.styles[0]
    messy_string = 'TestString!@#%^*&(*_[]}{:"":><.,?>/.\|'
    obj.name = messy_string
    result = obj.name
    expected = messy_string
    assert_equal(expected, result, 'Expected does not match result in 
                 test_set_name_works_with_string')
  end

#  # Test that the set name method works with integer.
#  def test_set_name_works_with_integer
#    obj = Sketchup.active_model.styles[0]
#    integer = 54321
#    obj.name = integer
#    result = obj.name
#    expected = integer.to_s
#    assert_equal(expected, result, 'Expected does not match result.')
#  end

#  # Test that the set name method works with float.
#  def test_set_name_works_with_integer
#    obj = Sketchup.active_model.styles[0]
#    float = 54321.1
#    obj.name = float
#    result = obj.name
#    expected = float.to_s
#    assert_equal(expected, result, 'Expected does not match result.')
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Style.description=
  # @file                rstyle.cpp
  #
  # The description= method is used to set a description for a style.
  #
  #
  # Args:
  # - description: A textual description of the style.
  #
  # Returns:
  # - status: true if successful, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_set_description_api_example
    assert_nothing_raised do
      style = Sketchup.active_model.styles[0]
      style.description = 'My new style description.'
      UI.messagebox('My new style description is: ' + style.description)
    end
  end

  # Test edgecases for values passed to this method.
  def test_set_description_edgecases
    style = Sketchup.active_model.styles[0]
    style.description = '#$%^&*My new style description.#$%^&*('
    assert_equal('#$%^&*My new style description.#$%^&*(', style.description,
                 'Failed in test_set_description_edgecases' )
  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_set_description_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end


  # Test that the set description method works with strings.
  def test_set_description_works_with_string
    obj = Sketchup.active_model.styles[0]
    messy_string = 'TestString!@#%^*&(*_[]}{:"":><.,?>/.\|'
    obj.description = messy_string
    result = obj.description
    expected = messy_string
    assert_equal(expected, result, 'Expected does not match result.')
  end

#  # Test that the set description method works with integer.
#  def test_set_description_works_with_integer
#    obj = Sketchup.active_model.styles[0]
#    integer = 54321
#    obj.description = integer
#    result = obj.description
#    expected = integer.to_s
#    assert_equal(expected, result, 'Expected does not match result.')
#  end

#  # Test that the set description method works with float.
#  def test_set_description_works_with_integer
#    obj = Sketchup.active_model.styles[0]
#    float = 54321.1
#    obj.description = float
#    result = obj.description
#    expected = float.to_s
#    assert_equal(expected, result, 'Expected does not match result.')
#  end
end
