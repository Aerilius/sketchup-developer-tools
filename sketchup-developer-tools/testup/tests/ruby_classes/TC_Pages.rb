# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Pages object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Pages contains unit tests for the Pages class.
#
# API Object::       Pages
# C++ File::         rpage.cpp
# Parent Class::     Entity
# Version::          SketchUp 6.0
#
# The Pages class contains methods for manipulating a collection of Pages
# (scenes) in a model.
#
class TC_Pages < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
    while Sketchup.active_model.pages.count > 0
      Sketchup.active_model.pages.erase Sketchup.active_model.pages[0]
    end
  end

  def teardown
    while Sketchup.active_model.pages.count > 0
      Sketchup.active_model.pages.erase Sketchup.active_model.pages[0]
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Pages.add_frame_change_observer
  # @file                rpage.cpp
  #
  # By watching the percent_done for 1.0, you can activate Ruby code that
  # executes as soon as the user's camera has finished animating.
  #
  # The method returns an integer id that can be stored and later used to
  # remove the observer with the Pages.remove_frame_change_observer
  # method.
  #
  # Note: In SketchUp 6 and 7, the fromPage argument into the callback
  # does not appear to be populated on the PC. You can store a variable
  # that keeps track of the toPage and then use that on a subsequent Scene
  # selection to determine the last Page that the user was on.
  #
  #
  # Args:
  # - object: An object that implements the frameChange method.
  #
  # Returns:
  # - : nil
  #



  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Pages.each
  # @file                rpage.cpp
  #
  # The each method is used to iterate through pages.
  #
  #
  # Args:
  # - page: Variables that will hold each page as it is found.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_each_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     pages = model.pages
     status = pages.add "Page 1"
     status = pages.add "Page 2"
     pages.each {|page| UI.messagebox page}
    end
  end

  # Test that the number of iterations is equal to the reported length.
  def test_each_iterations_matches_length
    collection = Sketchup.active_model.pages
    count = 0
    collection.each do |obj|
      count = count + 1
    end
    expected = collection.size
    result = count
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Pages.selected_page=
  # @file                rpage.cpp
  #
  # The selected_page method is used to set the currently selected page.
  # Once you set this, SketchUp will animate to that page as if the user
  # had clicked on its scene tab.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if successful
  #

  # Test the example code that we have in the API documentation.
  def test_set_selected_page_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      status = pages.add "Page 1"
      status = pages.add "Page 2"
      pages.selected_page = model.pages[1]
    end
  end

  # Test edgecases for values passed to this method.
  def test_set_selected_page_edgecases
    status = Sketchup.active_model.pages.add "Page 1"
    status = Sketchup.active_model.pages.add "Page 2"
    Sketchup.active_model.pages.selected_page = Sketchup.active_model.pages[0]
    expected = "Page 1"
    result = Sketchup.active_model.pages.selected_page.name
    assert_equal(expected, result,
                 'Failed in test_set_selected_page_api_example.')
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Pages.parent
  # @file                rpage.cpp
  #
  # The parent method is used to determine the model for the pages.
  #
  #
  # Args:
  #
  # Returns:
  # - model: the model that contains the pages if successful
  #

  # Test the example code that we have in the API documentation.
  def test_parent_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     pages = model.pages
     status = pages.add "Page 1"
     status = pages.add "Page 2"
     model = pages.parent
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Pages.add_matchphoto_page
  # @file                rpage.cpp
  #
  # The add_matchphoto_page method is used to add a photomatch page to the
  # model.
  #
  #
  # Args:
  # - image_name: String image name.
  # - camera: (optional) Camera object.
  # - page_name: (optional) String page name.
  #
  # Returns:
  # - page: the new photomatch page.
  #


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Pages.size
  # @file                rpage.cpp
  #
  # The size method is used to retrieve the number of pages.
  #
  #
  # Args:
  #
  # Returns:
  # - num_pages: the number of pages
  #

  # Test the example code that we have in the API documentation.
  def test_size_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     pages = model.pages
     status = pages.add "Page 1"
     status = pages.add "Page 2"
     size = pages.size
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Pages.add
  # @file                rpage.cpp
  #
  # The add method is used to add an empty Page object.
  #
  # If no name is given, then a new name is generated using the default
  # name for new Pages. If a name is given, then a new Page with that name
  # is added.
  #
  # If flags is given, it controls which properties are saved with the
  # new Page. See the Page.update method for a description of the flags
  # that can be set.
  #
  # If index is given, it specifies the position in the page list that
  # the new page is added. Otherwise the new page is added to the end.
  #
  #
  # Args:
  # - name: The name of the specific page.
  # - flags: (optional) Bit flags in integer form.
  # - index: (optional) Index of where to inset.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_add_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     pages = model.pages
     status = pages.add "Page 1"
     status = pages.add "Page 2"
     if (status)
       UI.messagebox status
     else
       UI.messagebox "Failure"
     end
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Pages.[]
  # @file                rpage.cpp
  #
  # The [] method retrieves a page by either name or index.
  #
  #
  # Args:
  # - index_or_name: The index or the string name of the specific page.
  #
  # Returns:
  # - page: a Page object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_arrayget_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     pages = model.pages
     status = pages.add "Page 1"
     status = pages.add "Page 2"
     page = pages["Page 2"]
     if (page)
       UI.messagebox page
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test that nil is returned if there is a negative index requested.
  def test_arrayget_nil_on_negative_index
    collection = Sketchup.active_model.pages
    expected = nil
    result = collection[-1]
    assert_equal(expected, result,
                 'Expected does not match result.')
  end

  # Test that nil is returned if there is a non-existent index requested.
  # We use the length of the collection to our non-existent index.
  def test_arrayget_nil_on_nonexistent_index
    collection = Sketchup.active_model.pages
    expected = nil
    result = collection[collection.size]
    assert_equal(expected, result,
                 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Pages.count
  # @file                rpage.cpp
  #
  # The count method is an alias for size. See also Page.size
  #
  #
  # Args:
  #
  # Returns:
  # - num_pages: the number of pages if successful
  #

  # Test the example code that we have in the API documentation.
  def test_count_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     pages = model.pages
     status = pages.add "Page 1"
     status = pages.add "Page 2"
     num = pages.count
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Pages.erase
  # @file                rpage.cpp
  #
  # The erase method is used to remove a page from the collection.
  #
  #
  # Args:
  # - page: The page you wish to delete.
  #
  # Returns:
  # - : true if successful, false if unsuccessful.
  #


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Pages.remove_frame_change_observer
  # @file                rpage.cpp
  #
  # The remove_frame_change_observer method is used to remove a frame
  # change observer
  #
  # The argument is the number returned from the call to
  # add_frame_change_observer.
  #
  #
  # Args:
  #
  # Returns:
  # - : nil
  #


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Pages.remove_observer
  # @file                rpage.cpp
  #
  # The remove_observer method is used to remove an observer from the
  # current object.
  #
  #
  # Args:
  # - observer: An observer.
  #
  # Returns:
  # - : true if successful, false if unsuccessful.
  #


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Pages.show_frame_at
  # @file                rpage.cpp
  #
  # The show_frame_at method is used to show a frame in animation (of the
  # slide show) at a given time in seconds.
  #
  #
  # Args:
  # - seconds: The time in seconds.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_show_frame_at_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     pages = model.pages
     status = pages.add "Page 1"
     status = pages.add "Page 2"
     status = pages.show_frame_at 10
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Pages.add_observer
  # @file                rpage.cpp
  #
  # The add_observer method is used to add an observer to the current
  # object.
  #
  #
  # Args:
  # - observer: An observer.
  #
  # Returns:
  # - : true if successful, false if unsuccessful.
  #

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Pages.slideshow_time
  # @file                rpage.cpp
  #
  # The slideshow_time method is used to get the amount of time that a
  # slideshow of all of the pages will take. This takes into account the
  # transition time for each Page and the amount of time that each Page is
  # displayed.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if successful
  #


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Pages.selected_page
  # @file                rpage.cpp
  #
  # The selected_page method is used to retrieve the currently selected
  # page.
  #
  #
  # Args:
  #
  # Returns:
  # - page: the currently selected Page object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_selected_page_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     pages = model.pages
     status = pages.add "Page 1"
     status = pages.add "Page 2"
     page = pages.selected_page
    end
  end

end
