# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Face object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Face contains unit tests for the Face class.
#
# API Object::       Face
# C++ File::         rface.cpp
# Parent Class::     Drawingelement
# Version::          SketchUp 6.0
#
# Faces in SketchUp are flat, 2-sided polygons with 3 or more sides.
#
#
class TC_Face < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end

    entities_to_erase = []
    for entity in Sketchup.active_model.entities
      entities_to_erase.push entity
    end

    for entity in entities_to_erase
      if entity.valid?
        entity.erase!
      end
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Face.get_UVHelper
  # @file                rface.cpp
  #
  # The get_UVHelper object is used to retrieve a UVHelper object for use
  # in texture manipulation on a face.
  #
  #
  # Args:
  # - front: true if you want the texture coordinates for the front face,
  # false if not.
  # - back: true if you want the texture coordinates for the back face,
  # false if not.
  # - texturewriter: A TextureWriter object.
  #
  # Returns:
  # - uvhelper: a UVHelper object
  #

  # Test the example code that we have in the API documentation.
  def test_get_uvhelper_api_example

    
    # TODO(scottlininger): This API example looks like it should run both as
    # documented and as I read the C++ source code. So I'm returning for now.
    # But we'll need to track down how this is supposed to work.
    return;

    assert_nothing_raised do
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [9, 0, 0]
     pts[2] = [9, 9, 0]
     pts[3] = [0, 9, 0]

     # Add the face to the entities in the model
     face = entities.add_face pts
     tw = Sketchup::TextureWriter.new
     uvHelp = face.get_UVHelper true, true, tw
    end
  end

  # Test edgecases for values passed to this method.
  #def test_get_uvhelper_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_get_uvhelper_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_get_uvhelper_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  def test_get_uvhelper_with_default_params
    model = Sketchup.active_model
    ents = model.entities
    test_face = ents.add_face [[0, 0, 0], [0, 10, 0], [10, 10, 0], [10, 0, 0]]
    test_uvhelper = test_face.get_UVHelper
    assert_equal(Sketchup::UVHelper, test_uvhelper.class)
  end

  def test_get_uvhelper_with_one_param
    model = Sketchup.active_model
    ents = model.entities
    test_face = ents.add_face [[0, 0, 0], [0, 10, 0], [10, 10, 0], [10, 0, 0]]
    test_uvhelper = test_face.get_UVHelper false
    assert_equal(Sketchup::UVHelper, test_uvhelper.class)
  end

  def test_get_uvhelper_with_two_param
    model = Sketchup.active_model
    ents = model.entities
    test_face = ents.add_face [[0, 0, 0], [0, 10, 0], [10, 10, 0], [10, 0, 0]]
    test_uvhelper = test_face.get_UVHelper false, false
    assert_equal(Sketchup::UVHelper, test_uvhelper.class)
  end

  def test_get_uvhelper_with_wrong_param_type
    assert_raise TypeError do
      model = Sketchup.active_model
      ents = model.entities
      test_face = ents.add_face [[0, 0, 0], [0, 10, 0], [10, 10, 0], [10, 0, 0]]
      test_uvhelper = test_face.get_UVHelper false, false, false
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Face.back_material=
  # @file                rface.cpp
  #
  # The back_material= method is used to set the material assigned to the
  # back side of the face.
  #
  #
  # Args:
  # - material: A Material object or the name of a valid material.
  #
  # Returns:
  # - material: the name of the valid material or the new
  # Material object (if successful)
  #

  # Test the example code that we have in the API documentation.
  def test_set_back_material_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     status = face.back_material="red"
    end
  end

  # Test edgecases for values passed to this method.
  #def test_set_back_material_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_set_back_material_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_set_back_material_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Face.plane
  # @file                rface.cpp
  #
  # The plane method is used to retrieve the plane of the face. See the
  # Array class for information on how planes are stored.
  #
  #
  # Args:
  #
  # Returns:
  # - plane: a plane that contains the face (if successful)
  #

  # Test the example code that we have in the API documentation.
  def test_plane_api_example
    assert_nothing_raised do
     point1 = Geom::Point3d.new(0,0,0)
     point2 = Geom::Point3d.new(0,0,100)
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]

     # Add the face to the entities in the model
     face = entities.add_face pts
     plane = face.plane
    end
  end

  # Test edgecases for values passed to this method.
  #def test_plane_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_plane_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_plane_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Face.edges
  # @file                rface.cpp
  #
  # The edges method is used to get an array of edges that bound the face.
  #
  #
  # Args:
  #
  # Returns:
  # - edges: an array of Edge objects (if successful)
  #

  # Test the example code that we have in the API documentation.
  def test_edges_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     edges = face.edges
    end
  end

  # Test edgecases for values passed to this method.
  #def test_edges_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_edges_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_edges_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Face.position_material
  # @file                rface.cpp
  #
  # The position_material method is used to position a material on a face.
  #
  # The pt_array must contain 2, 4, 6 or 8 points. The points are used in
  # pairs to tell where a point in the texture image is positioned on the
  # Face. The first point in each pair is a 3D point in the model. It
  # should be a point on the Face. The second point in each pair of points
  # is a 2D point that gives the (u,v) coordinates of a point in the image
  # to match up with the 3D point.
  #
  #
  # Args:
  # - material: a Material object.
  # - pt_array: An array of Point3d objects used to position the material.
  # - o_front: true to position the texture on the front of the Face or
  # false to position it on the back of the Face.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_position_material_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [9, 0, 0]
     pts[2] = [9, 9, 0]
     pts[3] = [0, 9, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts

     material = model.materials[0]
     pt_array = []
     pt_array[0] = Geom::Point3d.new(3,0,0)
     pt_array[1] = Geom::Point3d.new(0,0,0)
     on_front = true
     face.position_material material, pt_array, on_front
    end
  end

  # Test edgecases for values passed to this method.
  #def test_position_material_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_position_material_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_position_material_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Face.normal
  # @file                rface.cpp
  #
  # The normal method is used to retrieve the 3d vector normal to the face
  # in the front direction.
  #
  #
  # Args:
  #
  # Returns:
  # - vector: a Vector3d object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_normal_api_example
    assert_nothing_raised do
     point1 = Geom::Point3d.new(0,0,0)
     point2 = Geom::Point3d.new(0,0,100)
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]

     # Add the face to the entities in the model
     face = entities.add_face pts
     normal = face.normal
    end
  end

  # Test edgecases for values passed to this method.
  #def test_normal_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_normal_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_normal_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Face.outer_loop
  # @file                rface.cpp
  #
  # This method is used to retrieve the outer loop that bounds the face.
  #
  #
  # Args:
  #
  # Returns:
  # - loop: a Loop object representing the outer loop (if
  # successful)
  #

  # Test the example code that we have in the API documentation.
  def test_outer_loop_api_example
    assert_nothing_raised do
     point1 = Geom::Point3d.new(0,0,0)
     point2 = Geom::Point3d.new(0,0,100)
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]

     # Add the face to the entities in the model
     face = entities.add_face pts
     loop = face.outer_loop
    end
  end

  # Test edgecases for values passed to this method.
  #def test_outer_loop_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_outer_loop_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_outer_loop_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Face.back_material
  # @file                rface.cpp
  #
  # The back_material method is used to retrieve the material assigned to
  # the back side of the face.
  #
  #
  # Args:
  #
  # Returns:
  # - material: a Material object representing the material
  # on the back of the face (if successful)
  #

  # Test the example code that we have in the API documentation.
  def test_back_material_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]

     # Add the face to the entities in the model
     face = entities.add_face pts
     area = face.area
     back = face.back_material
    end
  end

  # Test edgecases for values passed to this method.
  #def test_back_material_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_back_material_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_back_material_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Face.mesh
  # @file                rface.cpp
  #
  # The mesh method creates a polygon mesh that represents the face. See
  # the PolygonMesh class for more information.
  #
  # Valid flags are:
  #
  # 0: Include PolygonMeshPoints,
  # 1: Include PolygonMeshUVQFront,
  # 2: Include PolygonMeshUVQBack,
  # 4: Include PolygonMeshNormals.
  #
  # Add these numbers together to combine flags. A value of 5 will
  # include all flags, for example.
  #
  #
  # Args:
  # - flags: One or more flags used to generate a mesh (see comments).
  #
  # Returns:
  # - mesh: a PolygonMesh object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_mesh_api_example
    assert_nothing_raised do
     point1 = Geom::Point3d.new(0,0,0)
     point2 = Geom::Point3d.new(0,0,100)
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]

     # Add the face to the entities in the model
     face = entities.add_face pts
     mesh = face.mesh 7
    end
  end

  # Test edgecases for values passed to this method.
  #def test_mesh_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_mesh_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_mesh_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Face.all_connected
  # @file                rface.cpp
  #
  # The all_connected method retrieves all of the entities connected to a
  # face.
  #
  #
  # Args:
  #
  # Returns:
  # - entities: the entities connected to the face
  #

  # Test the example code that we have in the API documentation.
  def test_all_connected_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]

     # Add the face to the entities in the model
     face = entities.add_face pts

     # Assuming nothing else was in the model, first entity should be an Edge.
     entity1 = entities[0]
     if entity1.typename == 'Edge'
       connected = entity1.all_connected
     end

     if (connected)
       UI.messagebox connected
     else
       UI.messagebox 'Failure'
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_all_connected_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_all_connected_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_all_connected_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Face.loops
  # @file                rface.cpp
  #
  # The loops method is used to get an array of all of the loops that
  # bound the face.
  #
  #
  # Args:
  #
  # Returns:
  # - loops: an array of Loop objects if successful
  #

  # Test the example code that we have in the API documentation.
  def test_loops_api_example
    assert_nothing_raised do
     point1 = Geom::Point3d.new(0,0,0)
     point2 = Geom::Point3d.new(0,0,100)
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]

     # Add the face to the entities in the model
     face = entities.add_face pts
     loops = face.loops
    end
  end

  # Test edgecases for values passed to this method.
  #def test_loops_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_loops_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_loops_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Face.followme
  # @file                rface.cpp
  #
  # The followme method is used creating a shape by making the face follow
  # along an array of edges.
  #
  #
  # Args:
  # - edge1: An Edge object to follow.
  #
  # Returns:
  # - status: true if successful, nil if unsuccessful
  #
""" Broken with http://b/2231925
  # Test the example code that we have in the API documentation.
  def test_followme_api_example
    assert_nothing_raised do
     point1 = Geom::Point3d.new(0,0,0)
     point2 = Geom::Point3d.new(0,0,100)
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]

     # Add the face to the entities in the model
     face = entities.add_face pts
     line = entities.add_line point1, point2
     begin
       status = face.followme line
     rescue
       UI.messagebox $!.message
     end
    end
  end
"""
  # Test edgecases for values passed to this method.
  #def test_followme_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_followme_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_followme_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Face.area
  # @file                rface.cpp
  #
  # The area method is used to retrieve the area of a face in current
  # units.
  #
  #
  # Args:
  #
  # Returns:
  # - area: the area of the face in current units (if
  # successful)
  #

  # Test the example code that we have in the API documentation.
  def test_area_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     area = face.area
    end
  end

  # Test edgecases for values passed to this method.
  #def test_area_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_area_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_area_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Face.pushpull
  # @file                rface.cpp
  #
  # The pushpull method is used to perform a push/pull on a face.
  #
  # The distance is measured in the direction that the face normal is
  # pointing.
  #
  #
  # Args:
  # - distance: The distance, in current units, to push/pull the face.
  # - copy: Create a new push/pull starting face if true (equivalent of
  # pressing CTRL while in SketchUp), do not create a push/pull starting
  # face if false.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_pushpull_api_example
    assert_nothing_raised do
     point1 = Geom::Point3d.new(0,0,0)
     point2 = Geom::Point3d.new(0,0,100)
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     status = face.pushpull 100, true
    end
  end

  # Test edgecases for values passed to this method.
  #def test_pushpull_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_pushpull_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_pushpull_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Face.reverse!
  # @file                rface.cpp
  #
  # The reverse! method is used to reverse the face's orientation, meaning
  # the front becomes the back.
  #
  #
  # Args:
  #
  # Returns:
  # - face: the reversed Face object if successful, false if
  # unsuccessful
  #

  # Test the example code that we have in the API documentation.
  def test_reverse_inplace_api_example
    assert_nothing_raised do
     point1 = Geom::Point3d.new(0,0,0)
     point2 = Geom::Point3d.new(0,0,100)
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     status = face.reverse!
    end
  end

  # Test edgecases for values passed to this method.
  #def test_reverse_inplace_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_reverse_inplace_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_reverse_inplace_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Face.classify_point
  # @file                rface.cpp
  #
  # The classify_point method is used to determine if a given Point3d is on the
  # referenced Face. The return value is calculated from this list:
  #
  #   - 0: Sketchup::Face::PointUnknown (indicates an error),
  #   - 1: Sketchup::Face::PointInside (point is on the face, not in a hole),
  #   - 2: Sketchup::Face::PointOnVertex (point touches a vertex),
  #   - 4: Sketchup::Face::PointOnEdge (point is on an edge),
  #   - 16: Sketchup::Face::PointOutside (point outside the face or in a hole),
  #   - 32: Sketchup::Face::PointNotOnPlane (point off the face's plane).
  #
  # It is important that return value comparisons be made against the
  # symbolic constants (i.e. Sketchup::Face::PointUnknown, 
  # Sketchup::Face::PointInside, Sketchup::Face::PointOnVertex, etc.) rather
  # than the absolute integer values as these values may change from one 
  # release to the next.
  #
  # Args:
  # - point: A Point3d.
  #
  # Returns:
  # - : An integer describing where a Point3d is in relation to
  # a face.
  #

  # Test the example code that we have in the API documentation.
  def test_classify_point_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [9, 0, 0]
     pts[2] = [9, 9, 0]
     pts[3] = [0, 9, 0]

     # Add the face to the entities in the model
     face = entities.add_face pts
     test_point = Geom::Point3d.new(50,50,0)
     result = face.classify_point(test_point)
    end
  end

  # Test all of the single results
  def test_classify_point_single_results
    model = Sketchup.active_model
    entities = model.active_entities
    pts = []
    pts[0] = [0, 0, 0]
    pts[1] = [9, 0, 0]
    pts[2] = [9, 9, 0]
    pts[3] = [0, 9, 0]

    # Add the face to the entities in the model
    face = entities.add_face pts

    # Check a point that should be outside the face.
    result = face.classify_point(Geom::Point3d.new(50, 50, 0))
    puts 'Result was ' + result.to_s + 
         ' which is equal to ' + Sketchup::Face::PointOutside.to_s
    assert_equal(Sketchup::Face::PointOutside, result,
                 'classify_point outside failed')

    # Check a point that should be outside inside the face.
    result = face.classify_point(Geom::Point3d.new(1, 1, 0))
    puts 'Result was ' + result.to_s + 
         ' which is equal to ' + Sketchup::Face::PointInside.to_s
    assert_equal(Sketchup::Face::PointInside, result,
                 'classify_point inside failed')

    # Check a point that should be on the vertex of the face.
    result = face.classify_point(Geom::Point3d.new(0, 0, 0))
    puts 'Result was ' + result.to_s + 
         ' which is equal to ' + Sketchup::Face::PointOnVertex.to_s
    assert_equal(Sketchup::Face::PointOnVertex, result,
                 'classify_point on_vertex failed')

    # Check a point that should be on the edge of the face.
    result = face.classify_point(Geom::Point3d.new(0, 1, 0))
    puts 'Result was ' + result.to_s + 
         ' which is equal to ' + Sketchup::Face::PointOnEdge.to_s
    assert_equal(Sketchup::Face::PointOnEdge, result,
                 'classify_point on_edge failed')

    # Check a point that should be off the plane of the face.
    result = face.classify_point(Geom::Point3d.new(1, 1, 10))
    puts 'Result was ' + result.to_s + 
         ' which is equal to ' + Sketchup::Face::PointNotOnPlane.to_s
    assert_equal(Sketchup::Face::PointNotOnPlane, result,
                 'classify_point on_edge failed')

  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_classify_point_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Face.vertices
  # @file                rface.cpp
  #
  # The vertices method is used to get an array of all of the vertices
  # that bound the face.
  #
  #
  # Args:
  #
  # Returns:
  # - vertices: an array of Vertex objects if successful
  #

  # Test the example code that we have in the API documentation.
  def test_vertices_api_example
    assert_nothing_raised do
     point1 = Geom::Point3d.new(0,0,0)
     point2 = Geom::Point3d.new(0,0,100)
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]

     # Add the face to the entities in the model
     face = entities.add_face pts
     vertices = face.vertices
    end
  end

  # Test edgecases for values passed to this method.
  #def test_vertices_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_vertices_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_vertices_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end
end
