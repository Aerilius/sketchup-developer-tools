# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
# Author: Simone Nicolo 
#
# Tests the SketchUp Ruby API UI object.
#
# This file was originally generated by ourdoc.rb, an internal tool we
# developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_UI contains unit tests for the UI class.
#
# API Object::       UI
# C++ File::         rui.cpp
# Parent Class::     N/A
# Version::          SketchUp 6.0
#
# The UI module contains a number of methods for creating simple UI elements
# from a SketchUp Ruby script.
#

class TC_UI < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
    def UI::inputbox(p1, p2, p3)
      puts 'TESTUP OVERRIDE: UI::inputbox > ' + p1.to_s + p2.to_s + p3.to_s
    end
    def UI::savepanel(p1, p2, p3)
      puts 'TESTUP OVERRIDE: UI::savepanel > ' + p1.to_s + p2.to_s + p3.to_s
    end
    def UI::openpanel(p1, p2, p3)
      puts 'TESTUP OVERRIDE: UI::openpanel > ' + p1.to_s + p2.to_s + p3.to_s
    end
    def UI::openURL(p1)
      puts 'TESTUP OVERRIDE: UI::openURL > ' + p1.to_s
    end

  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.toolbar_visible?
  # @file                rui.cpp
  #
  # The toolbar_visible? method is used to determine whether a given
  # toolbar is visible.
  #
  #
  # Args:
  # - name: The name of a Ruby toolbar.
  #
  # Returns:
  # - status: true if successful, false if unsuccessful
  #

  # Test the example code that we have in the API documentation.
  def test_toolbar_visible_api_example
    assert_nothing_raised do
     status = UI.toolbar_visible? "Camera"
    end
  end

  # Test edgecases for values passed to this method.
  def test_toolbar_visible_edgecases_true
    list = UI.toolbar_names
    list.each do |name|
      UI.set_toolbar_visible(name.to_s, true)
      status = UI.toolbar_visible? name.to_s
      assert(status, "Failed in test_toolbar_visible_edgecases_true - #{name}" )
    end
  end

  # Test edgecases for values passed to this method.
  def test_toolbar_visible_edgecases_false
    list = UI.toolbar_names
    list.each do |name|
      UI.set_toolbar_visible(name.to_s, false)
      status = UI.toolbar_visible? name.to_s
      assert_equal(false, status,
                     "Failed in test_toolbar_visible_edgecases_false - #{name}" )
    end
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.add_context_menu_handler
  # @file                rui.cpp
  #
  # The add_context_menu_handler method is used to register a block of
  # code with SketchUp that will be called when a context menu is to be
  # displayed. The context menu handler can then display the context menu
  # with the items that you have added.
  #
  # See the contextmenu.rb script in the Plugins/examples directory for
  # an example.
  #
  #
  # Args:
  # - menu: A block of code that takes a menu as its only as its only
  # argument.
  #
  # Returns:
  # - count: the number of context handlers that are
  # registered
  #

  # Test the example code that we have in the API documentation.
  def test_add_context_menu_handler_api_example
    assert_nothing_raised do
     # Right click on anything to see a Hello World item.
      UI.add_context_menu_handler do |context_menu|
        context_menu.add_separator
        context_menu.add_item("Hello World") {
        UI.messagebox("Hello world") }
     end
    end
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.show_model_info
  # @file                rui.cpp
  #
  # The show_model_info method is used to display the model info dialog
  # for a specific page. You can get the list of valid dialogs with
  # UI.model_info_pages.
  #
  #
  # Args:
  # - page_name: The name of the model info dialog you want to display.
  #
  # Returns:
  # - status: true if successful, false if unsuccessful
  #

  # Test the example code that we have in the API documentation.
  def test_show_model_info_api_example
    assert_nothing_raised do
     status = UI.show_model_info "Credits"
    end
  end

  # Test the example code that we have in the API documentation.
  def test_show_model_edgecases
    status = UI.show_model_info "Credits"
    assert(status, 'Failed in test_show_model_edgecases')
  end

  # Test the example code that we have in the API documentation.
  def test_show_model_edgecases_all
    pages = UI.model_info_pages
    pages.each do |page|
      status = UI.show_model_info page
      assert(status, 'Failed in test_show_model_edgecases')
    end
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.play_sound
  # @file                rui.cpp
  #
  # The play_sound method is used to play a sound file. Valid sound files
  # include .wav and .mp3 files on the Mac and .wav files on the PC.
  #
  #
  # Args:
  # - filename: the relative path to the filename from the Sketchup
  # install directory, or an absolute path to the file. (See
  # Sketchup.find_support_file for a way to search for a specific file.)
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_play_sound_api_example
    assert_nothing_raised do
      UI.play_sound "Plugins/mediadiscussion.wav"
    end
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.beep
  # @file                rui.cpp
  #
  # The beep method plays a system beep sound.
  #
  # The beep method does not accept any arguments nor return any values.
  #
  #
  # Args:
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_beep_api_example
    assert_nothing_raised do
      UI.beep
    end
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.toolbar
  # @file                rui.cpp
  #
  # The toolbar method is used to get a Ruby toolbar by name.
  #
  #
  # Args:
  # - name: The name of the Ruby toolbar.
  #
  # Returns:
  # - toolbar: a Toolbar object
  #

  # Test the example code that we have in the API documentation.
  def test_toolbar_api_example
    assert_nothing_raised do
      toolbar = UI::Toolbar.new "Test"
      toolbar = UI.toolbar "Test"
      if (toolbar)
        UI.messagebox toolbar
      else
        UI.messagebox "Failure"
      end
    end
  end

  # Test edgecases for values passed to this method.
  def test_toolbar_edgecases
     names = UI.toolbar_names
     names.each do |name|
       toolbar = UI.toolbar name
       assert_not_nil(toolbar)
     end
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.messagebox
  # @file                rui.cpp
  #
  # Creates a dialog box containing static text with a series of buttons
  # for the user to choose from.
  #
  # The default message box type is MB_OK and the default title for the
  # message box is "Validity Check." Valid message box types are:
  #
  # - MB_OK - Contains an OK (1)
  # - MB_OKCANCEL - Contains OK (1) and CANCEL (2)
  # - MB_ABORTRETRYCANCEL - Contains ABORT (3), RETRY (4), and CANCEL (2)
  # - MB_YESNOCANCEL - Contains YES (6), NO (7), and CANCEL (2)
  # - MB_YESNO - Contains YES (6) and NO (7)
  # - MB_RETRYCANCEL - Contains RETRY (4) and CANCEL (2)
  # - MB_MULTILINE - Contains and OK (1)
  #
  # In a MB_MULTILINE message box, the message is displayed as a
  # multi-line message with scrollbars (as needed).
  #
  # The messagebox method returns a number corresponding to the button
  # pressed (in parentheses above.)
  #
  #
  # Args:
  # - message: The message that you want to appear in the message box.
  # - type: (optional) message box type, which will be a constant from the
  # list in the method comments. Default to MB_OK.
  #
  # Returns:
  # - : A number corresponding to what the user selected. This
  # number will be an integer from the values listed
  # in parenthesis inside the method comments.
  #

  # Test the example code that we have in the API documentation.
  def test_messagebox_api_example
    assert_nothing_raised do
      result = UI.messagebox "Do you like cheese?"
      if result == 6 # Yes
        UI.messagebox("Sketchup likes cheese, too.")
     end
    end
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.stop_timer
  # @file                rui.cpp
  #
  # The stop_timer method is used to stop a timer based on its id.
  #
  #
  # Args:
  # - id: The timer idea for the timer that you want to stop.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_stop_timer_api_example
    assert_nothing_raised do
      # Beep after 10 seconds.
      id = UI.start_timer(10) { UI.beep }
      if (id)
        UI.messagebox id
      else
        UI.messagebox "Failure"
      end
      UI.stop_timer id
      UI.messagebox "Stopped"
    end
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.savepanel
  # @file                rui.cpp
  #
  # The savepanel method is used to display the Save dialog box. The path
  # that is returned can then be used inside code to save out a text or
  # image file. See the standard Ruby class File for examples of reading
  # and writing from disk.
  #
  #
  # Args:
  # - title: The title to apply to the open dialog box.
  # - directory: The default directory for the open panel.
  # - filename: The default filename for the open panel .
  #
  # Returns:
  # - string: the full path and name of the file
  # selected or nil if the dialog was canceled.
  #

  # Test the example code that we have in the API documentation.
  def test_savepanel_api_example
    assert_nothing_raised do
      path_to_save_to = UI.savepanel "Save Image File", "c:\\", "Shapes.jpg"
    end
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.preferences_pages
  # @file                rui.cpp
  #
  # The preferences_pages method is used to returns the names of all the
  # preferences pages. These include windows like Extensions.
  #
  #
  # Args:
  #
  # Returns:
  # - prefspages: an array of strings containing the names
  # of prefspages.
  #

  # Test the example code that we have in the API documentation.
  def test_preferences_pages_api_example
    assert_nothing_raised do
      prefs = UI.preferences_pages
    end
  end

  # Test edgecases for values passed to this method.
  def test_preferences_pages_edgecases
    pages = UI.preferences_pages
    assert_not_nil(pages, 'Failed in test_preferences_pages_edgecases')
  end

  # Test edgecases for values passed to this method.
  def test_preferences_pages_edgecases_2
    pages = UI.preferences_pages
    count = 0
    pages.each do |p|
      count +=1
    end
    assert_equal(pages.length, count, 'Failed in '+
                                      'test_preferences_pages_edgecases_2')
  end

  def test_preferences_pages_edgecases_3
    pages = UI.preferences_pages
    pages.each do |p|
      assert_not_nil(p,  'Failed in test_preferences_pages_edgecases_3')
    end
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.model_info_pages
  # @file                rui.cpp
  #
  # The model_info_pages method is used to returns the names of all the
  # available model info pages. These include UI windows such as
  # Components, Credits, and Units.
  #
  #
  # Args:
  #
  # Returns:
  # - mipages: an array of strings containing the names of
  # model info pages.
  #

  # Test the example code that we have in the API documentation.
  def test_model_info_pages_api_example
    assert_nothing_raised do
      mypages = UI.model_info_pages
    end
  end

  # Test edgecases for values passed to this method.
  def test_model_info_pages_edgecases
    mypages = UI.model_info_pages
    assert_not_nil(mypages, 'Failed in test_model_info_pages_edgecases')
  end

  # Test edgecases for values passed to this method.
  def test_model_info_pages_edgecases_2
    mypages = UI.model_info_pages
    count = 0
    mypages.each do |p|
      count +=1
    end
    assert_equal(mypages.length, count, 'Failed in test_info_pages_edgecases_2')
  end

  # Test edgecases for values passed to this method.
  def test_model_info_pages_edgecases_3
    mypages = UI.model_info_pages
    mypages.each do |p|
      assert_not_nil(p, 'Failed in test_info_pages_edgecases_3')
    end
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.toolbar_names
  # @file                rui.cpp
  #
  # The toolbar_names method is used to returns the name of all the
  # available toolbars (this differs between PC and Mac).
  #
  #
  # Args:
  #
  # Returns:
  # - names: Array of strings representing toolbar names.
  #

  # Test the example code that we have in the API documentation.
  def test_toolbar_names_api_example
    assert_nothing_raised do
      names = UI.toolbar_names
    end
  end

  # Test edgecases for values passed to this method.
  def test_toolbar_names_edgecases
    names = UI.toolbar_names
    names.each do |name|
      toolbar = UI.toolbar name
      assert_not_nil(toolbar)
    end
  end

   # Test edgecases for values passed to this method.
   def test_toolbar_names_edgecases_2
     names = UI.toolbar_names
     assert_not_nil(names)
   end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.start_timer
  # @file                rui.cpp
  #
  # The start_timer method is used to start a timer. This is an effective
  # method to create a repeating snippet of code for arbitrary animation.
  #
  # See this blog post for an detailed example of custom animation using
  # timers: http://sketchupapi.blogspot.com/2008/10/animate-yo-cheese.html
  #
  #
  # Args:
  # - seconds: The time in seconds before your code should be called.
  # - repeat: true if you want the timer to repeat, false if you do not
  # want it to repeat.
  # - procedure: The procedure you want to execute after seconds has
  # expired.
  #
  # Returns:
  # - timer: a timer ID
  #

  # Test the example code that we have in the API documentation.
  def test_start_timer_api_example
    assert_nothing_raised do
      # Beep after 10 seconds.
      id = UI.start_timer(10, false) { UI.beep }
      if (id)
        UI.messagebox id
      else
        UI.messagebox "Failure"
      end
    end
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.refresh_inspectors
  # @file                rui.cpp
  #
  # Tells SketchUp to refresh all inspectors such as the Component Browser
  # and the Outliner. This is useful when you need to manually force a
  # refresh after you've made a change to the document via Ruby.
  # Generally, SketchUp will keep these in sync for you, but occasionally
  # it does not, such as when model.start_operation has disabled UI
  # updates.
  #
  #
  # Args:
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_refresh_inspectors_api_example
    assert_nothing_raised do
      UI.refresh_inspectors
    end
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.show_inspector
  # @file                rui.cpp
  #
  # The show_inspector method is used to display the inspector with the
  # given name. You can get the list of valid inspectors with
  # UI.inspector_names.
  #
  #
  # Args:
  # - name: The name of inspector that you want to display.
  #
  # Returns:
  # - status: true if successful, false if unsuccessful
  #

  # Test the example code that we have in the API documentation.
  def test_show_inspector_api_example
    assert_nothing_raised do
     status = UI.show_inspector "Components"
    end
  end

  # Test the example code that we have in the API documentation.
  def test_show_inspector_edgecases
    inspectors_list = UI.inspector_names
    inspectors_list.each do |name|
      result = UI.show_inspector name.to_s
      # bug 3224824 cause this to fail for the 'Styles' inspector, so here
      # we account for it, when the bug will be fixed this test will fail
      # and will need to be rewritten.
      if name.eql? "Styles" and RUBY_PLATFORM.include? 'darwin'
        assert((not result),
               "failed in show_inspector_edgecases - inspector #{name}")
      else
        assert(result,
               "failed in show_inspector_edgecases - inspector #{name}")
      end
    end
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.openURL
  # @file                rui.cpp
  #
  # The openURL method is used to open the default Web browser to a URL.
  #
  #
  # Args:
  # - URL: A string URL.
  #
  # Returns:
  # - status: true if successful
  #

  # Test the example code that we have in the API documentation.
  def test_openurl_api_example
    assert_nothing_raised do
      status = UI.openURL "http://www.google.com"
    end
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.openpanel
  # @file                rui.cpp
  #
  # The openpanel method is used to display the Open dialog box. The path
  # that is returned can then be used inside code to open a text or image
  # file. See the standard Ruby class File for examples of reading and
  # writing from disk.
  #
  #
  # Args:
  # - title: The title to apply to the open dialog box.
  # - directory: The default directory for the open panel.
  # - filename: The default filename for the open panel. On Windows, you
  # can alternatively pass a mask, like "*.txt", to have all the .txt
  # files display. If you want multiple file types to display, you can
  # supply multiple masks for the filename and separate them with a
  # semicolon, like this: "*.txt;*.zip".
  #
  # Returns:
  # - string: the full path and name of the file
  # selected, or nil if the dialog was canceled.
  #

  # Test the example code that we have in the API documentation.
  def test_openpanel_api_example
    assert_nothing_raised do
      chosen_image = UI.openpanel "Open Image File", "c:\\", "Shapes.jpg"
    end
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.show_preferences
  # @file                rui.cpp
  #
  # The show_preferences method is used to display a SketchUp preferences
  # dialog. You can get the list of valid dialogs with
  # UI.preferences_pages.
  #
  #
  # Args:
  # - page_name: The name of the preferences dialog you want to display.
  #
  # Returns:
  # - status: true if successful, false if unsuccessful
  #

  # Test the example code that we have in the API documentation.
  # This test on PC is painful to run since it needs user input to 'OK' the
  # preference pane.
  def test_show_preferences_api_example
    status = nil
    assert_nothing_raised do
      status = UI.show_preferences "GraphicsCard"
    end
    assert(status, 'Failed in show preferences API example')
  end

  # Test edgecases for values passed to this method.
  # This test on PC is painful to run since it
  #def test_show_preferences_edgecases_two
  #  prefs = UI.preferences_pages
  #  prefs.each do |p|
  #    status = UI.show_preferences p
  #    assert(status, "Failed in test_show_preferences_edgecases_two")
  #  end
  #end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.set_toolbar_visible
  # @file                rui.cpp
  #
  # The set_toolbar_visible method is used to set whether a given toolbar
  # is visible.
  #
  #
  # Args:
  # - name: The name of a Ruby toolbar.
  # - visible: True to make the toolbar visible, false to hide it.
  #
  # Returns:
  # - visibility: the newly set visibility state.
  #

  # Test the example code that we have in the API documentation.
  def test_set_toolbar_visible_api_example
    assert_nothing_raised do
      status = UI.set_toolbar_visible("Camera", true)
    end
  end

  # Test edgecases for values passed to this method.
  def test_set_toolbar_visible_edgecases_true
    toolbar_names = UI.toolbar_names
    toolbar_names.each do |name|
      status = UI.set_toolbar_visible(name.to_s, true)
      assert(status, 'failed in test_set_toolbar_visible_edgecases_true for' +
               name)

    end
  end
  
  # Test edgecases for values passed to this method.
  def test_set_toolbar_visible_edgecases_false
    toolbar_names = UI.toolbar_names
    toolbar_names.each do |name|
      status = UI.set_toolbar_visible(name.to_s, false)
      assert(status, 'failed in test_set_toolbar_visible_edgecases_false for' +
               name)
    end
  end


  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.inputbox
  # @file                rui.cpp
  #
  # Creates a dialog box for inputting user information. The dialog box
  # contains input fields with static text prompts, optional default
  # values, and optional name.
  #
  # You will have to pass specific units (such as feet in the following
  # examples) if you want your box to conform to a certain scale. Also
  # note, you cannot pass just prompts and a name, you must either pass no
  # arguments or all arguments.
  #
  #
  # Args:
  # - prompts: An array of prompt names appearing in the input box
  # adjacent to input fields.
  # - defaults: (optional) An array of default values for the input
  # fields.
  # - title: (optional) The name for the input box.
  #
  # Returns:
  # - results: An array of returned values if the user did
  # not cancel the dialog. If the user canceled the
  # dialog, nil is returned. The returned values in the
  # array will be in the same order as the input fields.
  #

  # Test the example code that we have in the API documentation.
  def test_inputbox_api_example
    assert_nothing_raised do
      prompts = ["What is your Name?", "What is your Age?"]
      defaults = ["Enter name", "Enter age"]

      results = UI.inputbox prompts, defaults, "Tell me about yourself."
      if results == nil
        UI.messagebox("You cancelled on me!")
      else
        UI.messagebox("Your name is: " + results[0].to_s)
      end
    end
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.inspector_names
  # @file                rui.cpp
  #
  # The inspector_names method is used to returns the names of all the
  # inspectors. Inspectors are another name for the various floating
  # dialog windows that you can activiate from withing SketchUp, such as
  # the Materials window.
  #
  #
  # Args:
  #
  # Returns:
  # - inspectors: a vector of strings containing the names
  # of inspectors.
  #

  # Test the example code that we have in the API documentation.
  def test_inspector_names_api_example
    assert_nothing_raised do
      inspectors = UI.inspector_names
    end
  end

  # Test edgecases for values passed to this method.
  def test_inspector_names_edgecases
    inspectors = UI.inspector_names
    assert_not_nil(inspectors, 'failed in test_inspector_names_edgecases')
  end

  # Test edgecases for values passed to this method.
  def test_inspector_names_edgecases
    inspectors = UI.inspector_names
    count = 0
    inspectors.each do |i|
      count += 1
    end
    assert_equal(inspectors.length, count, 'failed in ' +
                                           'test_inspector_names_edgecases_2')
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.set_cursor
  # @file                rui.cpp
  #
  # The set_cursor method is used to change the cursor to a new cursor
  # with a given cursor id. See UI.create_cursor and the Tool class for
  # details on creating your own tools with arbitrary cursors.
  #
  # If you call this while a standard SketchUp tool is active, you will
  # not see your custom cursor, as these tools are constantly setting
  # their own cursors to indicate SketchUp's state.
  #
  #
  # Args:
  # - cursor_id: The id of the cursor you want to display.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_set_cursor_api_example
    assert_nothing_raised do
      def onSetCursor
        UI.set_cursor(@@my_custom_cursor_id)
      end
    end
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.menu
  # @file                rui.cpp
  #
  # The menu method retrieves a SketchUp's menu object with a given name.
  # This is the first step toward adding your own custom items to the
  # bottom of SketchUp's menus.
  #
  # Valid menu names are: "File", "Edit", "View", "Camera", "Create",
  # "Tools", "Page", "Window", "Plugins" and "Help".
  #
  #
  # Args:
  # - menuname: The name of an existing menu.
  #
  # Returns:
  # - menu: a menu object.
  #

  # Test the example code that we have in the API documentation.
  def test_menu_api_example
    assert_nothing_raised do
      tool_menu = UI.menu "Tools"
      tool_menu.add_item("Cheese Tool") {
        UI.messagebox("Cheese activated.")
     }
    end
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    UI.create_cursor
  # @file                rui.cpp
  #
  # The create_cursor method is used to create a cursor from an image file
  # at the specified location. This must be called from within a custom
  # Tool. See the Tool class for a complete example.
  #
  #
  # Args:
  # - filename: Filename for an image.
  # - hot_x: An x coordinate that is the "hotpoint" for the cursor. For
  # example, a value of 5 here would identify the hotpoint of the cursor
  # as 5 pixels from the left edge of your cursor image.
  # - hot_y: A y coordinate that is the "hotpoint" for the cursor.
  #
  # Returns:
  # - ID: ID associated with the cursor
  #

  # Test the example code that we have in the API documentation.
  def test_create_cursor_api_example
    assert_nothing_raised do
      cursor_path = Sketchup.find_support_file("Pointer.png", "Plugins/")
      if cursor_path
        id = UI.create_cursor(cursor_path, 0, 0)
        UI.set_cursor(id)
      else
        id=0
      end
    end
  end
end
