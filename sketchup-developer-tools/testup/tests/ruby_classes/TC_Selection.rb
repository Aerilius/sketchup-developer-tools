# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Selection object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Selection contains unit tests for the Selection class.
#
# API Object::       Selection
# C++ File::         rselectionset.cpp
# Parent Class::     Object
# Version::          SketchUp 6.0
#
# A set of the currently selected entities. Use the Selection method from the
# Model class to get a Selection object.  Note that the order of entities
# (selection[0], selection[1] and so on) in the set is in no particular order
# and should not be assumed to be in the same order as the user selected the
# entities.
#
class TC_Selection < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Selection.add_observer
  # @file                rselectionset.cpp
  #
  # The add_observer method is used to add an observer to the current
  # object.
  #
  #
  #
  # Args:
  # - observer: An observer.
  #
  # Returns:
  # - : true if successful, false if unsuccessful.
  #

  

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Selection.clear
  # @file                rselectionset.cpp
  #
  # The clear method is used to clear the selection.
  #
  #
  # Args:
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_clear_api_example
    entities = Sketchup.active_model.entities
    selection = Sketchup.active_model.selection
    assert_nothing_raised do
     entity = entities[0]
     selection.add entity
     UI.messagebox "Ready to Clear"
     selection.clear
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Selection.length
  # @file                rselectionset.cpp
  #
  # The length method is used to retrieve the number of selected Entities.
  #
  #
  #
  # Args:
  #
  # Returns:
  # - length: the number of entities in the selection if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_length_api_example
    selection = Sketchup.active_model.selection
    assert_nothing_raised do
     number = selection.length
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Selection.nitems
  # @file                rselectionset.cpp
  #
  # The nitems method is an alias for length. See also length.
  #
  #
  # Args:
  #
  # Returns:
  # - length: the number of entities in the selection if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_nitems_api_example
    selection = Sketchup.active_model.selection
    assert_nothing_raised do
     number = selection.length
    end

  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Selection.each
  # @file                rselectionset.cpp
  #
  # The each method is used to iterate through all of the selected
  # entities.
  #
  # If you want to do something with all of the selected Entities, this
  # is more efficient than using [].
  #
  #
  # Args:
  # - entity: A variable that will hold each Entity object as they are
  # found.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_each_api_example
    selection = Sketchup.active_model.selection
    assert_nothing_raised do
     selection.each { |entity| UI.messagebox(entity) }
    end

  end


  # Test that the number of iterations is equal to the reported length.
  def test_each_iterations_matches_length
    collection = Sketchup.active_model.selection
    count = 0
    collection.each do |obj|
      count = count + 1
    end
    expected = collection.length
    result = count
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Selection.at
  # @file                rselectionset.cpp
  #
  # The at method is used to retrieve an Entity object from the selection
  # by index.
  #
  # This method is not very efficient. It is equivalent to using
  # selection[]. In the case of this method, you have to start at index 0
  # to retrieve the first entity.
  #
  #
  # Args:
  # - index: The index of the Entity object to retrieve.
  #
  # Returns:
  # - entity: an Entity object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_at_api_example
    entities = Sketchup.active_model.entities
    selection = Sketchup.active_model.selection
    assert_nothing_raised do
     entity = entities[0]
     status = selection.add entity
     # looks like you have to retrieve from the selection set starting
     # at zero.
     entity = selection.at(0)
    end
  end

  # Test that nil is returned if there is a non-existent index requested.
  # We use the length of the collection to our non-existent index.
  def test_at_nil_on_nonexistent_index
    collection = Sketchup.active_model.selection
    expected = nil
    result = collection.at collection.length
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Selection.is_curve?
  # @file                rselectionset.cpp
  #
  # The is_curve? method is used to determine if the selection contains
  # all edges that belong to a single curve.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if the selection contains all edges that
  # belong to a single curve. False if the selection does
  # not contain all edges that belong to a single curve.
  #

  # Test the example code that we have in the API documentation.
  def test_is_curve_api_example
    entities = Sketchup.active_model.entities
    selection = Sketchup.active_model.selection
    entity = entities[0]
    assert_nothing_raised do
     selection.add entity
     status = selection.is_curve?
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Selection.remove_observer
  # @file                rselectionset.cpp
  #
  # The remove_observer method is used to remove an observer from the
  # current object.
  #
  #
  # Args:
  # - observer: An observer.
  #
  # Returns:
  # - : true if successful, false if unsuccessful.
  #

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Selection.shift
  # @file                rselectionset.cpp
  #
  # The shift method is used to remove the first entity from the selection
  # and returns it
  #
  #
  # Args:
  #
  # Returns:
  # - entity: the first Entity object in the selection set
  # if successful
  #

  # Test the example code that we have in the API documentation.
  def test_shift_api_example
    entities = Sketchup.active_model.entities
    selection = Sketchup.active_model.selection
    entity = entities[0]
    assert_nothing_raised do
     status = selection.add entity
     UI.messagebox "Ready to remove item from selection set"
     entity = selection.shift
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Selection.toggle
  # @file                rselectionset.cpp
  #
  # Note that the add, remove, and toggle methods are all aliases for one
  # another. So if you call remove on an entity that is not selected, it
  # will be toggled to be selected, not removed! Be cautious when writing
  # your code to not make the assumption about the currently selected
  # state of a given entity.
  #
  #
  # Args:
  # - ents_or_array: List or Array of Entity objects.
  #
  # Returns:
  # - status: the number of Entity objects changed
  #

  # Test the example code that we have in the API documentation.
  def test_toggle_api_example
    model = Sketchup.active_model
    selection = Sketchup.active_model.selection

    assert_nothing_raised do
     entities = model.active_entities
     entity = entities[0]
     status = selection.add entity
    end

  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Selection.single_object?
  # @file                rselectionset.cpp
  #
  # The single_object? method is used to determine if the selection
  # contains a single object
  #
  # It can either be a single Entity or a group of Entities for which
  # is_curve? or is_surface? will return true.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if the selection contains a single
  # object. False if the selection does not contain a
  # single object.
  #

  # Test the example code that we have in the API documentation.
  def test_single_object_api_example
    model = Sketchup.active_model
    selection = Sketchup.active_model.selection

    assert_nothing_raised do
     status = selection.single_object?
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Selection.count
  # @file                rselectionset.cpp
  #
  # The count method is an alias for length. See also length.
  #
  #
  # Args:
  #
  # Returns:
  # - number: the number of Entities in the selection if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_count_api_example
    model = Sketchup.active_model
    selection = Sketchup.active_model.selection
    assert_nothing_raised do
     number = selection.count
    end

  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Selection.model
  # @file                rselectionset.cpp
  #
  # The model method retrieves the model for the selection.
  #
  #
  # Args:
  #
  # Returns:
  # - model: the model that includes the selection if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_model_api_example
    model = Sketchup.active_model
    selection = Sketchup.active_model.selection
    assert_nothing_raised do
     model = selection.model
    end
  end


  # Test that the entities method returns an Array object.
  def test_model_returns_model_obj
    obj = Sketchup.active_model.selection
    model_obj = obj.model
    result = model_obj.class
    expected = Sketchup::Model
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Selection.first
  # @file                rselectionset.cpp
  #
  # The first method is used to retrieve the first selected entity
  #
  # Returns nil if nothing is selected. This method is useful when you
  # know that only a single entity is selected, or you are only interested
  # in the first selected entity.
  #
  #
  # Args:
  #
  # Returns:
  # - entity: the first selected Entity object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_first_api_example
    entity = Sketchup.active_model.entities[0]
    selection = Sketchup.active_model.selection
    assert_nothing_raised do
     status = selection.add entity
     entity = selection.first
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Selection.include?
  # @file                rselectionset.cpp
  #
  # The include? method is an alias for contains
  #
  #
  # Args:
  # - entity: An Entity object.
  #
  # Returns:
  # - status: true if the Entity object is in the selection.
  # False if the Entity object is not in the selection.
  #

  # Test the example code that we have in the API documentation.
  def test_include_api_example
    entity = Sketchup.active_model.entities[0]
    selection = Sketchup.active_model.selection
    assert_nothing_raised do
     selection.add entity
     status = selection.include? entity
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Selection.contains?
  # @file                rselectionset.cpp
  #
  # The contains? method is used to determine if a given entity is in the
  # selection.
  #
  #
  # Args:
  # - entity: An Entity object.
  #
  # Returns:
  # - status: true if the selection contains the entity.
  # False if the selection does not contain the entity.
  #

  # Test the example code that we have in the API documentation.
  def test_contains_api_example
    entities = Sketchup.active_model.entities
    selection = Sketchup.active_model.selection
    assert_nothing_raised do
     entity = entities[0]
     status = selection.add entity
     status = selection.contains? entity
     if (status)
       UI.messagebox status
     else
       UI.messagebox "Failure"
     end
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Selection.[]
  # @file                rselectionset.cpp
  #
  # The [] method is used to retrieve an Entity object from the selection
  # by index. Index 0 is the first entity in the selection.
  #
  # This method is not very efficient.
  #
  #
  # Args:
  # - index: The index of the Entity object to retrieve.
  #
  # Returns:
  # - entity: an Entity object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_arrayget_api_example
    
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     selection = model.selection
     entity = entities[0]
     status = selection.add entity
     entity = selection[0]
     if (entity)
       UI.messagebox entity
     else
       UI.messagebox "Failure"
     end
    end

  end

  # Test that nil is returned if there is a non-existent index requested.
  # We use the length of the collection to our non-existent index.
  def test_arrayget_nil_on_nonexistent_index
    collection = Sketchup.active_model.selection
    expected = nil
    result = collection[collection.length]
    assert_equal(expected, result,
                 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Selection.add
  # @file                rselectionset.cpp
  #
  # Note that the add, remove, and toggle methods are all aliases for one
  # another. So if you call remove on an entity that is not selected, it
  # will be toggled to be selected, not removed! Be cautious when writing
  # your code to not make the assumption about the currently selected
  # state of a given entity.
  #
  #
  # Args:
  # - ents_or_array: List or Array of Entity objects.
  #
  # Returns:
  # - status: the number of Entity objects added
  #

  # Test the example code that we have in the API documentation.
  def test_add_api_example
    model = Sketchup.active_model
    selection = Sketchup.active_model.selection
    assert_nothing_raised do
     entities = model.active_entities
     entity = entities[0]
     status = selection.add entity
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Selection.empty?
  # @file                rselectionset.cpp
  #
  # The empty? method is used to determine if there are entities in the
  # selection.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if the selection is empty. False if the
  # selection is not empty.
  #

  # Test the example code that we have in the API documentation.
  def test_empty_api_example
    entity = Sketchup.active_model.entities[0]
    selection = Sketchup.active_model.selection
    assert_nothing_raised do
     status = selection.add entity
     status = selection.empty?
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Selection.is_surface?
  # @file                rselectionset.cpp
  #
  # The is_surface? method is used to determine if the selection contains
  # only all of the faces that are part of a single curved surface.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if the selection contains all faces that
  # belong to a single curved surface. False if the
  # selection does not contain all faces that belong to a
  # single curved surface.
  #

  # Test the example code that we have in the API documentation.
  def test_is_surface_api_example
    entity = Sketchup.active_model.entities[0]
    selection = Sketchup.active_model.selection
    assert_nothing_raised do
     selection.add entity
     status = selection.is_surface?
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Selection.remove
  # @file                rselectionset.cpp
  #
  # Note that the add, remove, and toggle methods are all aliases for one
  # another. So if you call remove on an entity that is not selected, it
  # will be toggled to be selected, not removed! Be cautious when writing
  # your code to not make the assumption about the currently selected
  # state of a given entity.
  #
  #
  # Args:
  # - ents_or_array: List or Array of Entity objects.
  #
  # Returns:
  # - status: the number of Entity objects removed
  #

  # Test the example code that we have in the API documentation.
  def test_remove_api_example
    model = Sketchup.active_model
    selection = Sketchup.active_model.selection
    assert_nothing_raised do
     entities = model.active_entities
     entity = entities[0]
     status = selection.add entity
    end

  end


end
