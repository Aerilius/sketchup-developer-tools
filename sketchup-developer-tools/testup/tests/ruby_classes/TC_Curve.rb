# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Curve object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Curve contains unit tests for the Curve class.
#
# API Object::       Curve
# C++ File::         rcurve.cpp
# Parent Class::     Entity
# Version::          SketchUp 6.0
#
# Curves are edges that are part of a curve. The Curve class contains methods
# for getting information about a Curve (namely edge information for the
# curve).
#
#
class TC_Curve < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end

    entities_to_erase = []
    for entity in Sketchup.active_model.entities
      entities_to_erase.push entity
    end

    for entity in entities_to_erase
      if entity.valid?
        entity.erase!
      end
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ArcCurve.plane
  # @file                rcurve.cpp
  #
  # The plane method is used to retrieve the plane of the arc.
  #
  # Refer to the Geom module for instructions to create a plane.
  #
  #
  # Args:
  #
  # Returns:
  # - plane: the plane of the arc if successful
  #

  # Test the example code that we have in the API documentation.
  def test_plane_api_example
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 10
     edge = edgearray[0]
     arccurve = edge.curve
     plane = arccurve.plane
    end
  end

  # Test edgecases for values passed to this method.
  #def test_plane_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_plane_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_plane_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Curve.last_edge
  # @file                rcurve.cpp
  #
  # The last_edge method is used to retrieve the last edge of the curve.
  #
  #
  # Args:
  #
  # Returns:
  # - edge: the last Edge object in the curve if successful
  #

  # Test the example code that we have in the API documentation.
  def test_last_edge_api_example
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 10
     edge = edgearray[7]
     curve = edge.curve
     lastedge = curve.last_edge
    end
  end

  # Test edgecases for values passed to this method.
  #def test_last_edge_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_last_edge_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_last_edge_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Curve.count_edges
  # @file                rcurve.cpp
  #
  # The count_edges method is used to retrieve the number of Edge objects
  # that make up the Curve.
  #
  #
  # Args:
  #
  # Returns:
  # - num_edges: the number of edges in the curve
  #

  # Test the example code that we have in the API documentation.
  def test_count_edges_api_example
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 10
     edge = edgearray[0]
     curve = edge.curve
     number = curve.count_edges
    end
  end

  # Test edgecases for values passed to this method.
  #def test_count_edges_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_count_edges_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_count_edges_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ArcCurve.end_angle
  # @file                rcurve.cpp
  #
  # The end_angle method is used to retrieve the angle of the end of the
  # arc measured from the X axis in radians.
  #
  #
  #
  # Args:
  #
  # Returns:
  # - angle: the angle of the end of the arc if successful
  #

  # Test the example code that we have in the API documentation.
  def test_end_angle_api_example
    assert_nothing_raised do
     # Create a 1/2 circle, normal to the Z axis
     center = Geom::Point3d.new
     normal = Geom::Vector3d.new 0,0,1
     xaxis = Geom::Vector3d.new 1,0,0
     start_a = 0.0
     end_a = Math::PI
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_arc center, xaxis, normal, 5, start_a, end_a
     edge = edgearray[0]
     arccurve = edge.curve
     end_angle = arccurve.end_angle
    end
  end

  # Test edgecases for values passed to this method.
  #def test_end_angle_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_end_angle_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_end_angle_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ArcCurve.yaxis
  # @file                rcurve.cpp
  #
  # The yaxis method is used to retrieve the Y axis of the coordinate
  # system for the curve. Note that the length of the returned vector is
  # equal to the radius of the underlying curve.
  #
  #
  # Args:
  #
  # Returns:
  # - vector: a Vector3d object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_yaxis_api_example
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 10
     edge = edgearray[0]
     arccurve = edge.curve
     v = arccurve.yaxis
    end
  end

  # Test edgecases for values passed to this method.
  #def test_yaxis_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_yaxis_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_yaxis_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Curve.vertices
  # @file                rcurve.cpp
  #
  # The vertices method retrieves a collection of all vertices in a curve.
  #
  #
  # Args:
  #
  # Returns:
  # - vertices: a collection of the vertices
  #

  # Test the example code that we have in the API documentation.
  def test_vertices_api_example
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 10
     edge = edgearray[7]
     curve = edge.curve
     vertices = curve.vertices
    end
  end

  # Test edgecases for values passed to this method.
  #def test_vertices_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_vertices_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_vertices_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Curve.first_edge
  # @file                rcurve.cpp
  #
  # The first_edge method is used to retrieve the first edge of the curve.
  #
  #
  # Args:
  #
  # Returns:
  # - edge: the first Edge object in the curve if successful
  #

  # Test the example code that we have in the API documentation.
  def test_first_edge_api_example
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 10
     edge = edgearray[0]
     curve = edge.curve
     firstedge = curve.first_edge
    end
  end

  # Test edgecases for values passed to this method.
  #def test_first_edge_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_first_edge_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_first_edge_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ArcCurve.start_angle
  # @file                rcurve.cpp
  #
  # The start_angle method is used to retrieve the angle of the start of
  # the arc, measured from the X axis in radians.
  #
  #
  #
  # Args:
  #
  # Returns:
  # - angle: the angle of the start of the arc if successful
  #

  # Test the example code that we have in the API documentation.
  def test_start_angle_api_example
    assert_nothing_raised do
     # Create a 1/4 circle, radius of 5, normal to the Z axis
     center = Geom::Point3d.new 0, 0, -1
     normal = Geom::Vector3d.new 0,0,1
     xaxis = Geom::Vector3d.new 1,0,0
     start_a = Math::PI/2
     end_a = Math::PI
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_arc center, xaxis, normal, 5, start_a, end_a
     edge = edgearray[0]
     arccurve = edge.curve
     start_angle = arccurve.start_angle
    end
  end

  # Test edgecases for values passed to this method.
  #def test_start_angle_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_start_angle_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_start_angle_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Curve.edges
  # @file                rcurve.cpp
  #
  # The edges method is used to retrieve an array of Edge objects that
  # make up the Curve.
  #
  #
  # Args:
  #
  # Returns:
  # - edges: an array of Edge objects if successful
  #

  # Test the example code that we have in the API documentation.
  def test_edges_api_example
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 10
     edge = edgearray[0]
     curve = edge.curve
     edges = curve.edges
    end
  end

  # Test edgecases for values passed to this method.
  #def test_edges_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_edges_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_edges_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ArcCurve.normal
  # @file                rcurve.cpp
  #
  # The normal method retrieves a Vector3d that is perpendicular to the
  # plane of the arc.
  #
  #
  # Args:
  #
  # Returns:
  # - vector: a Vector3d object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_normal_api_example
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 10
     edge = edgearray[0]
     arccurve = edge.curve
     v = arccurve.normal
    end
  end

  # Test edgecases for values passed to this method.
  #def test_normal_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_normal_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_normal_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ArcCurve.radius
  # @file                rcurve.cpp
  #
  # The radius method is used to retrieve the radius of the arc.
  #
  #
  # Args:
  #
  # Returns:
  # - radius: the radius of the arc if successful
  #

  # Test the example code that we have in the API documentation.
  def test_radius_api_example
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 10
     edge = edgearray[0]
     arccurve = edge.curve
     radius = arccurve.radius
    end
  end

  # Test edgecases for values passed to this method.
  #def test_radius_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_radius_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_radius_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ArcCurve.xaxis
  # @file                rcurve.cpp
  #
  # The xaxis method is used to retrieve the X axis of the coordinate
  # system for the curve. Note that the length of the returned vector is
  # equal to the radius of the underlying curve.
  #
  #
  # Args:
  #
  # Returns:
  # - vector: a Vector3d object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_xaxis_api_example
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 10
     edge = edgearray[0]
     arccurve = edge.curve
     v = arccurve.xaxis
    end
  end

  # Test edgecases for values passed to this method.
  #def test_xaxis_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_xaxis_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_xaxis_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Curve.move_vertices
  # @file                rcurve.cpp
  #
  # The vertices method retrieves a collection of all vertices in a curve.
  #
  #
  # Args:
  # - point_array: Array of Point3d objects to move each vertex to match.
  #
  # Returns:
  # - success: true or false
  #

  # Test the example code that we have in the API documentation.
  def test_move_vertices_api_example
    assert_nothing_raised do
     # Need example ruby code here.
    end
  end

  # Test edgecases for values passed to this method.
  #def test_move_vertices_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_move_vertices_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_move_vertices_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Curve.length
  # @file                rcurve.cpp
  #
  # The length method retrieves the length of the curve.
  #
  #
  # Args:
  #
  # Returns:
  # - length: the length of the curve in current units if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_length_api_example
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 10
     edge = edgearray[7]
     curve = edge.curve
     length = curve.length
    end
  end

  # Test edgecases for values passed to this method.
  #def test_length_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_length_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_length_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ArcCurve.center
  # @file                rcurve.cpp
  #
  # The center method is used to retrieve the Point3d that is at the
  # center of the circular arc.
  #
  #
  #
  # Args:
  #
  # Returns:
  # - point: a Point3d at the center of the arc if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_center_api_example
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 10
     edge = edgearray[0]
     arccurve = edge.curve
     point = arccurve.center
    end
  end

  # Test edgecases for values passed to this method.
  #def test_center_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_center_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_center_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Curve.each_edge
  # @file                rcurve.cpp
  #
  # The each_edge method is used to iterate through all of the Edge
  # objects in the curve.
  #
  #
  # Args:
  #
  # Returns:
  # - edge: a variable that will hold each Edge object as
  # they are found.
  #

  # Test the example code that we have in the API documentation.
  def test_each_edge_api_example
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 10
     edge = edgearray[0]
     curve = edge.curve
     curve.each_edge {|e| UI.messagebox e}
    end
  end

  # Test edgecases for values passed to this method.
  #def test_each_edge_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_each_edge_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_each_edge_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # Tests the is_polygon? method with a circle entity
  #
  def test_is_polygon_with_circle
    m = Sketchup.active_model
    ents = m.entities

    # Create a circle
    center = [0, 0, 0]
    normal = [0, 0, 1]
    radius = 20
    ents.add_circle center, normal, radius

    # Check circle edges
    m.entities.each do |e|
      if e.is_a? Sketchup::Edge and e.curve.respond_to? 'is_polygon?'
        assert_equal(false, e.curve.is_polygon?,
                     'Curve of circle edge should not be polygon.')
      end
    end
  end

  # Tests the is_polygon? method with a polygon entity
  #
  def test_is_polygon_with_polygon
    m = Sketchup.active_model
    ents = m.entities

    # Create a polygon
    center = [0, 0, 0]
    normal = [0, 0, 1]
    radius = 20
    nsides = 8
    ents.add_ngon center, normal, radius, nsides

    # Check poly edges
    m.entities.each do |e|
      if e.is_a? Sketchup::Edge and e.curve.respond_to? 'is_polygon?'
        assert_equal(true, e.curve.is_polygon?,
                     'Curve of polygon edge should be polygon.')
      end
    end
  end

  # Tests the is_polygon? method with a arc entity
  #
  def test_is_polygon_with_arc
    m = Sketchup.active_model
    ents = m.entities

    # Create an arc
    center = [0, 0, 0]
    xaxis = [1, 0, 0]
    normal = [0, 0, 1]
    radius = 20
    start_angle = 0
    end_angle = 180
    nsides = 6
    ents.add_arc center, xaxis, normal, radius, start_angle, end_angle, nsides

    # Check arc edges
    m.entities.each do |e|
      if e.is_a? Sketchup::Edge and e.curve.respond_to? 'is_polygon?'
        assert_equal(false, e.curve.is_polygon?,
                     'Curve of arc edge should not be polygon.')
      end
    end
  end

  # Tests the is_polygon? method with a curve entity
  #
  def test_is_polygon_with_curve
    m = Sketchup.active_model
    ents = m.entities

    # Create a curve
    pts = []
    pts.push [1, 4, 0]
    pts.push [3, 3, 0]
    pts.push [2, 3, 0]
    pts.push [0, 4, 0]
    pts.push [3, 2, 0]
    pts.push [3, -2, 0]
    pts.push [3, -3, 0]
    pts.push [2, -4, 0]
    pts.push [1, -4, 0]
    ents.add_curve pts

    # Check curve edges
    m.entities.each do |e|
      if e.is_a? Sketchup::Edge and e.curve.respond_to? 'is_polygon?'
        assert_equal(false, e.curve.is_polygon?,
                     'Curve of curve edge should not be polygon.')
      end
    end
  end

  # Tests the is_polygon? api documentation example
  #
  def test_is_polygon_api_example
    # For backwards compatibility, only run test if curve instance has
    # is_polygon? method
    if Sketchup::Curve.new().public_methods.include? "is_polygon?"
      assert_nothing_raised do
        # Create a polygon and check its edge
        ents = Sketchup.active_model.entities
        ents.add_ngon [0, 0, 0], [0, 0, 1], 10, 6
        curve = nil
        ents.each { |e| curve = e.curve if e.is_a? Sketchup::Edge }
        is_poly = curve.is_polygon?
      end
    end
  end
end
