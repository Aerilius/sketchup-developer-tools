# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API OptionsManager object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_OptionsManager contains unit tests for the OptionsManager class.
#
# API Object::       OptionsManager
# C++ File::         roptionsmanager.cpp
# Parent Class::     Object
# Version::          SketchUp 6.0
#
# The OptionsManager class manages various kinds of OptionsProviders on a
# Model.
#
class TC_OptionsManager < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts "TESTUP OVERRIDE: UI::messagebox > #{params.to_s}"
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    OptionsManager.size
  # @file                roptionsmanager.cpp
  #
  # The size method returns the number of OptionsProvider objects inside
  # this OptionsManager.
  #
  #
  # Args:
  #
  # Returns:
  # - number: number of OptionsProvider objects if successful.
  #

  # Test the example code that we have in the API documentation.
  def test_size_api_example
    manager = nil
    size = nil
    assert_nothing_raised do
     model = Sketchup.active_model
     manager = model.options
     size = manager.size
    end
    # The size should be the same as the number of keys
    assert_equal(manager.keys.length, size,
                 'Failed in test_size' )
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    OptionsManager.each
  # @file                roptionsmanager.cpp
  #
  # The each method is used to iterate through options providers.
  #
  #
  # Args:
  # - opsprovider: A variable that will hold each OptionsProvider object
  # as they are found.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_each_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     manager = model.options
     # Retrieves each provider
     manager.each { |provider| UI.messagebox provider.name }
    end
  end

  # Test that the number of iterations is equal to the reported length.
  def test_each_iterations_matches_size
    collection = Sketchup.active_model.options
    count = 0
    collection.each do |obj|
      count = count + 1
    end
    expected = collection.size
    result = count
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # Test that the number of iterations is equal to the reported length.
  def test_each_iterations_matches_count
    collection = Sketchup.active_model.options
    count = 0
    collection.each do |obj|
      count = count + 1
    end
    expected = collection.count
    result = count
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # Test that the number of iterations is equal to the reported length.
  def test_each_iterations_matches_keys_length
    collection = Sketchup.active_model.options
    count = 0
    collection.each do |obj|
      count = count + 1
    end
    expected = collection.keys.length
    result = count
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    OptionsManager.[]
  # @file                roptionsmanager.cpp
  #
  #
  #
  # Args:
  # - index: The index of the OptionsProvider object.
  # - name: The name of the OptionsProvider object.
  #
  # Returns:
  # - optionprovider: an OptionsProvider object if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_arrayget_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     manager = model.options
     provider = manager[0]
     if (provider)
       UI.messagebox provider
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test that nil is returned if there is a negative index requested.
  def bug_test_arrayget_nil_on_negative_index
    collection = Sketchup.active_model.options
    expected = nil
    result = collection[-1]
    assert_equal(expected, result,
                 'Expected does not match result.')
  end

  # Test that nil is returned if there is a non-existent index requested.
  # We use the length of the collection to our non-existent index.
  def test_arrayget_nil_on_nonexistent_index
    collection = Sketchup.active_model.options
    expected = nil
    result = collection[collection.count]
    assert_equal(expected, result,
                 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    OptionsManager.keys
  # @file                roptionsmanager.cpp
  #
  # The keys method is used to get a list of keys in the OptionsManager.
  #
  #
  # Args:
  #
  # Returns:
  # - keys: Array of string keys
  #

  # Test the example code that we have in the API documentation.
  def test_keys_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     manager = model.options
     optionproviderarray = manager.keys
     if (optionproviderarray)
       UI.messagebox optionproviderarray
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test that the entities method returns an Array object.
  def test_keys_returns_array
    obj = Sketchup.active_model.options
    keys = obj.keys
    result = keys.class
    expected = Array
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    OptionsManager.count
  # @file                roptionsmanager.cpp
  #
  # The count method is an alias for size.
  #
  #
  # Args:
  #
  # Returns:
  # - number: number of OptionsProvider objects if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_count_api_example
    manager = nil
    count = nil
    assert_nothing_raised do
     model = Sketchup.active_model
     manager = model.options
     count = manager.count
    end
    # The number of keys should match the count
    assert_equal(manager.keys.length, count,
                 'Failed in test_count' )
  end

end
