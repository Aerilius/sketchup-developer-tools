# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Loop object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Loop contains unit tests for the Loop class.
#
# API Object::       Loop
# C++ File::         rloop.cpp
# Parent Class::     Entity
# Version::          SketchUp 6.0
#
# Loop is a low level topology class that will not need to be used often. A
# Loop is a chain of Edges that bound a Face.
#
#
class TC_Loop < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end

    entities_to_erase = []
    for entity in Sketchup.active_model.entities
      entities_to_erase.push entity
    end

    for entity in entities_to_erase
      if entity.valid?
        entity.erase!
      end
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Loop.face
  # @file                rloop.cpp
  #
  # Get the Face object that is bounded by this loop.
  #
  #
  #
  # Args:
  #
  # Returns:
  # - face: a Face object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_face_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]

     # Add the face to the entities in the model
     face = entities.add_face pts
     loop = face.outer_loop
     f = loop.face
     if (f)
       UI.messagebox f
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_face_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_face_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_face_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Loop.edgeuses
  # @file                rloop.cpp
  #
  # Get an array of the EdgeUse objects that define this loop.
  #
  #
  # Args:
  #
  # Returns:
  # - edgeuses: an array of EdgeUse objects if successful.
  #

  # Test the example code that we have in the API documentation.
  def test_edgeuses_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]

     # Add the face to the entities in the model
     face = entities.add_face pts
     loop = face.outer_loop
     edgeuses = loop.edgeuses
    end
  end

  # Test edgecases for values passed to this method.
  #def test_edgeuses_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_edgeuses_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_edgeuses_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Loop.convex?
  # @file                rloop.cpp
  #
  # Determine if the loop is convex.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if convex, false if not convex.
  #

  # Test the example code that we have in the API documentation.
  def test_convex_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]

     # Add the face to the entities in the model
     face = entities.add_face pts
     loop = face.outer_loop
     status = loop.convex?
     if (status)
       UI.messagebox "Loop is Convex"
     else
       UI.messagebox "Loop is not Convex"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_convex_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_convex_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_convex_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Loop.edges
  # @file                rloop.cpp
  #
  # Get an array of the edges that define the loop.
  #
  #
  # Args:
  #
  # Returns:
  # - edges: an array of Edge objects if successful.
  #

  # Test the example code that we have in the API documentation.
  def test_edges_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]

     # Add the face to the entities in the model
     face = entities.add_face pts
     loop = face.outer_loop
     edges = loop.edges
     if (edges)
       UI.messagebox edges
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_edges_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_edges_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_edges_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Loop.outer?
  # @file                rloop.cpp
  #
  # Determine if this is an outer loop. Each face has one outer loop, and
  # will have one loop for each hole.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if the loop is an outer loop, false if it
  # is not an outer loop.
  #

  # Test the example code that we have in the API documentation.
  def test_outer_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]

     # Add the face to the entities in the model
     face = entities.add_face pts
     loop = face.outer_loop
     status = loop.outer?
     if (status)
       UI.messagebox status
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_outer_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_outer_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_outer_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Loop.vertices
  # @file                rloop.cpp
  #
  # Get an array of the vertices that define the loop.
  #
  #
  # Args:
  #
  # Returns:
  # - vertices: an array of Vertex objects if successful.
  #

  # Test the example code that we have in the API documentation.
  def test_vertices_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]

     # Add the face to the entities in the model
     face = entities.add_face pts
     loop = face.outer_loop
     vertices = loop.vertices
     if (vertices)
       UI.messagebox vertices
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_vertices_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_vertices_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_vertices_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end


end
