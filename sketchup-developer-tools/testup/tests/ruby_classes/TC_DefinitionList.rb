# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API DefinitionList object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_DefinitionList contains unit tests for the DefinitionList class.
#
# API Object::       DefinitionList
# C++ File::         rcomponentdefinition.cpp
# Parent Class::     Entity
# Version::          SketchUp 6.0
#
# A DefinitionList object holds a list of all of the ComponentDefinition
# objects in a model. This class contains methods for  adding and retrieving
# definitions from the list.
#
#
class TC_DefinitionList < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    DefinitionList.purge_unused
  # @file                rcomponentdefinition.cpp
  #
  # The purge_unused method is used to remove the unused component
  # definitions.
  #
  #
  # Args:
  #
  # Returns:
  # - : true if successful, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_purge_unused_api_example
    assert_nothing_raised do
     # Need ruby code example here.
    end
  end

  # Test edgecases for values passed to this method.
  #def test_purge_unused_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_purge_unused_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_purge_unused_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    DefinitionList.count
  # @file                rcomponentdefinition.cpp
  #
  # The count method is an alias for length. See also length.
  #
  #
  # Args:
  #
  # Returns:
  # - count: the number of component definitions in the
  # definition list if successful
  #

  # Test the example code that we have in the API documentation.
  def test_count_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     definitions = model.definitions
     componentdefinition = definitions.add "BedTraditional"
     number = definitions.count
    end
  end

  # Test edgecases for values passed to this method.
  #def test_count_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_count_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_count_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    DefinitionList.remove_observer
  # @file                rcomponentdefinition.cpp
  #
  # The remove_observer method is used to remove an observer from the
  # current object.
  #
  #
  # Args:
  # - observer: An observer.
  #
  # Returns:
  # - : true if successful, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_remove_observer_api_example
    observer = Object.new
    assert_nothing_raised do
     definitions = Sketchup.active_model.definitions
     status = definitions.remove_observer observer
    end
  end

  # Test edgecases for values passed to this method.
  #def test_remove_observer_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_remove_observer_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_remove_observer_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    DefinitionList.[]
  # @file                rcomponentdefinition.cpp
  #
  # The [] method is used to retrieve a component definition from the
  # list. You can give an integer index in the range 0 to length, a string
  # which represents the GUID for the component definition, or a string
  # that is the name of the component definition.
  #
  #
  # Args:
  # - index: The index for a specific component definition .
  # - guid: The unique ID for the component definition.
  # - def_name: The name of an existing component definition.
  #
  # Returns:
  # - componentdefinition: a ComponentDefinition object if
  # successful, nil if not found
  #

  # Test the example code that we have in the API documentation.
  def test_arrayget_api_example
    assert_nothing_raised do
     path=Sketchup.find_support_file "Bed.skp",
       "Components/Components Sampler/"
     model = Sketchup.active_model
     definitions = model.definitions
     componentdefinition = definitions.load path
     component = definitions[0]
    end
  end

  # Test edgecases for values passed to this method.
  #def test_arrayget_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_arrayget_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_arrayget_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    DefinitionList.length
  # @file                rcomponentdefinition.cpp
  #
  # The length method is used to retrieve number of component definitions
  # in the list.
  #
  #
  # Args:
  #
  # Returns:
  # - length: the number of component definitions in the
  # definition list (if successful)
  #

  # Test the example code that we have in the API documentation.
  def test_length_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     definitions = model.definitions
     componentdefinition = definitions.add "BedTraditional"
     number = definitions.count
     if (number)
       UI.messagebox number.to_s
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_length_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_length_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_length_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    DefinitionList.unique_name
  # @file                rcomponentdefinition.cpp
  #
  # The unique_name is used to generate a unique name for a definition
  # based on a base_name string. For example, a base_name of "Joe" might
  # return "Joe #2"
  #
  #
  # Args:
  # - base_name: The
  #
  # Returns:
  # - new_name: the unique name.
  #

  # Test the example code that we have in the API documentation.
  def test_unique_name_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     definitions = model.definitions
     new_name = definitions.unique_name "My Base Name"
    end
  end

  # Test edgecases for values passed to this method.
  #def test_unique_name_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_unique_name_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_unique_name_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    DefinitionList.load
  # @file                rcomponentdefinition.cpp
  #
  # The load method is used to load a component from a file.
  #
  #
  # Args:
  # - path: The path where the component definition file is located.
  #
  # Returns:
  # - componentdefinition: the loaded ComponentDefinition
  # object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_load_api_example
    assert_nothing_raised do
     path=Sketchup.find_support_file "Bed.skp",
       "Components/Components Sampler/"
     model = Sketchup.active_model
     definitions = model.definitions
     componentdefinition = definitions.load path
    end
  end

  # Test edgecases for values passed to this method.
  #def test_load_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_load_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_load_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    DefinitionList.add
  # @file                rcomponentdefinition.cpp
  #
  # The add method is used to add a new component definition to the
  # definition list with the given name.
  #
  #
  # Args:
  # - def_name: The new component definition to add to the definition
  # list.
  #
  # Returns:
  # - componentdefinition: the ComponentDefinition object
  # that was added (if successful)
  #

  # Test the example code that we have in the API documentation.
  def test_add_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     definitions = model.definitions
     componentdefinition = definitions.add "BedTraditional"
     component = definitions[0]
    end
  end

  # Test edgecases for values passed to this method.
  #def test_add_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_add_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_add_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    DefinitionList.each
  # @file                rcomponentdefinition.cpp
  #
  # The each method is used to iterate through all of the component
  # definitions in the definition list.
  #
  # Throws an exception if there are no component definitions.
  #
  #
  # Args:
  # - def: A variable that will hold each ComponentDefinition object as
  # they are found.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_each_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     definitions = model.definitions
     componentdefinition = definitions.add "BedTraditional"
     number = definitions.each {|definition| UI.messagebox definition.to_s }
    end
  end

  # Test edgecases for values passed to this method.
  #def test_each_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_each_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_each_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # Test that the number of iterations is equal to the reported length.
  def test_each_iterations_matches_length
    collection = Sketchup.active_model.definitions
    count = 0
    collection.each do |obj|
      count = count + 1
    end
    expected = collection.length
    result = count
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    DefinitionList.at
  # @file                rcomponentdefinition.cpp
  #
  # The at method is used to retrieve a component definition at a specific
  # index. This is an alias for the [] method.
  #
  #
  # Args:
  # - index: The index of the component definition.
  #
  # Returns:
  # - componentdefinition: the ComponentDefinition object at
  # the specific index if successful, nil if unsuccessful
  #

  # Test the example code that we have in the API documentation.
  def test_at_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     definitions = model.definitions
     componentdefinition = definitions.add "BedTraditional"
     component = definitions.at 0
    end
  end

  # Test edgecases for values passed to this method.
  #def test_at_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_at_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_at_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    DefinitionList.add_observer
  # @file                rcomponentdefinition.cpp
  #
  # The add_observer method is used to add an observer to the current
  # object.
  #
  #
  #
  # Args:
  # - observer: An observer.
  #
  # Returns:
  # - : true if successful, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_add_observer_api_example
    observer = Object.new
    assert_nothing_raised do
     definitions = Sketchup.active_model.definitions
     status = definitions.add_observer observer
    end
  end

  # Test edgecases for values passed to this method.
  #def test_add_observer_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_add_observer_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_add_observer_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

end
