# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Model object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Model contains unit tests for the Model class.
#
# API Object::       Model
# C++ File::         rmodel.cpp
# Parent Class::     Object
# Version::          SketchUp 6.0
#
# This is the interface to a SketchUp model.
#
class TC_Model < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(message)
      puts message
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.close_active
  # @file                rmodel.cpp
  #
  # The close_active method is used to close the currently active (open)
  # group or component.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if successful, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_close_active_api_example
    Sketchup.active_model.start_operation "test_close_active_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      status = model.close_active
    end
    Sketchup.active_model.commit_operation
  end


#  # Test edgecases for values passed to this method.
#  def test_close_active_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_close_active_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_close_active_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.place_component
  # @file                rmodel.cpp
  #
  # The place_component method places a new component in the Model using
  # the component placement tool. The first argument is a
  # ComponentDefinition. There is a second optional argument. If it is
  # true, it says to stay in the tool and place multiple instances of the
  # component.
  #
  #
  # Args:
  # - componentdef: A component definition object containing the
  # definition (blueprint) for the component.
  # - repeat: If set to true, stay in the component placement tool and
  # place multiple components.
  # - : Undefined.
  # - : Undefined.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_place_component_api_example

    model = Sketchup.active_model
    model.start_operation "test_place_component_api_example"

    pts = []
    pts[0] = [0, 0, 0]
    pts[1] = [100, 0, 0]
    pts[2] = [100, 100, 0]
    pts[3] = [0, 100, 0]

    #Test instance.intersect
    component_def = model.definitions.add("component")
    # Add the face to the entities in the group
    face = component_def.entities.add_face pts
    status = face.pushpull -100, true

    repeat = true
    model = Sketchup.active_model
    assert_nothing_raised do
      status = model.place_component component_def, repeat
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_place_component_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_place_component_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_place_component_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.select_tool
  # @file                rmodel.cpp
  #
  # This method is used to select a SketchUp Tool object s the active
  # tool. You must implement the SketchUp Tool interface to create a tool
  # prior to calling this method.
  #
  # The select tool is returned if you pass nil to the select_tool
  # method. You must implement the SketchUp Tool interface to create a
  # tool, prior to calling this method, and then instance the tool
  # implementation and pass the object to this method. If you attempt to
  # set the select_tool to nil in the initialize method of a tool you have
  # written, it will be ignored.
  #
  #
  # Args:
  # - tool: The Tool object you want to select.
  #
  # Returns:
  # - tool: A Tool object.
  #

  # Test the example code that we have in the API documentation.
  def test_select_tool_api_example
    Sketchup.active_model.start_operation "test_select_tool_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      tool = model.select_tool nil
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_select_tool_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_select_tool_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_select_tool_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.selection
  # @file                rmodel.cpp
  #
  # This method retrieves a Selection object for the model, containing the
  # currently selected entities. The entries in the selection list are not
  # necessarily in the same order in which the user selected them.
  #
  #
  # Args:
  #
  # Returns:
  # - selection: A Selection object with 0 or more entities
  # that are currently selected.
  #

  # Test the example code that we have in the API documentation.
  def test_selection_api_example
    Sketchup.active_model.start_operation "test_selection_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      selection = model.selection
    end
    Sketchup.active_model.commit_operation
  end


#  # Test edgecases for values passed to this method.
#  def test_selection_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_selection_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_selection_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.active_layer
  # @file                rmodel.cpp
  #
  # The active_layer method retrieves the active Layer.
  #
  # The default layer in SketchUp is layer 0.
  #
  #
  # Args:
  #
  # Returns:
  # - layer: a layer object containing the currently active
  # layer
  #

  # Test the example code that we have in the API documentation.
  def test_active_layer_api_example
    Sketchup.active_model.start_operation "test_active_layer_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      layers = model.layers
      activelayer = model.active_layer
    end
    Sketchup.active_model.commit_operation
  end


  # Test edgecases for values passed to this method.
  def test_active_layer_edgecases
    Sketchup.active_model.start_operation "test_active_layer_edgecases"
    model = Sketchup.active_model
    layers = model.layers
    layers.add "My Layer"
    activelayer = model.active_layer = layers[1]
    layer = model.active_layer
    assert_equal(activelayer, layer,
                 'Failed in test_active_layer_edgecases' )
    Sketchup.active_model.commit_operation
  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_active_layer_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.tools
  # @file                rmodel.cpp
  #
  # The tools method is used to retrieve the current Tools object.
  #
  #
  # Args:
  #
  # Returns:
  # - tools: a Tools object.
  #

  # Test the example code that we have in the API documentation.
  def test_tools_api_example
    Sketchup.active_model.start_operation "test_tools_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      tools = model.tools
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_tools_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_tools_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_tools_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.layers
  # @file                rmodel.cpp
  #
  # The layers method retrieves a collection of all Layers objects in the
  # model.
  #
  #
  # Args:
  #
  # Returns:
  # - layers: a Layers object containing a collection of
  # Layers in the model
  #

  # Test the example code that we have in the API documentation.
  def test_layers_api_example
    Sketchup.active_model.start_operation "test_layers_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      layers = model.layers
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_layers_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_layers_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_layers_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # Test that the entities method returns an Array object.
  def test_layers_returns_layers_obj
    Sketchup.active_model.start_operation "test_layers_returns_layers_object"
    obj = Sketchup.active_model
    layers_obj = obj.layers
    result = layers_obj.class
    expected = Sketchup::Layers
    assert_equal(expected, result, 'Expected does not match result.')
    Sketchup.active_model.commit_operation
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.mipmapping=
  # @file                rmodel.cpp
  #
  # This method can be used to turn mipmapping on or off.
  #
  #
  # Args:
  # - boolean: - whether mipmapping is turned on or off.
  #
  # Returns:
  # - boolean: the new mipmapping setting
  #

  # Test the example code that we have in the API documentation.
  def test_set_mipmapping_api_example
    Sketchup.active_model.start_operation "test_set_mipmapping_api_example"
    assert_nothing_raised do
      # Turn off mipmapping
      Sketchup.active_model.mipmapping = false
    end
    Sketchup.active_model.commit_operation
  end

  # Test edgecases for values passed to this method.
  def test_set_mipmapping_edgecases
    Sketchup.active_model.start_operation "test_set_mipmapping_edgecases"
    model = Sketchup.active_model
    model.mipmapping = false
    assert_equal(false, model.mipmapping?,
                 'Failed in test_set_mipmapping_edgecases' )
    model.mipmapping = true
    assert_equal(true, model.mipmapping?,
                 'Failed in test_set_mipmapping_edgecases' )
    Sketchup.active_model.commit_operation
  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_set_mipmapping_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.get_datum
  # @file                rmodel.cpp
  #
  # the get_datum method retrieves the datum, in the form of a string,
  # used in UTM conversions.
  #
  #
  # Args:
  #
  # Returns:
  # - datum: a datum represented as a string if successful.
  #

  # Test the example code that we have in the API documentation.
  def test_get_datum_api_example
    Sketchup.active_model.start_operation "test_get_datum_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      datum = model.get_datum
    end
    Sketchup.active_model.commit_operation
  end

  # Test edgecases for values passed to this method.
  def test_get_datum_edgecases
    Sketchup.active_model.start_operation "test_get_datum_edgecases"
      model = Sketchup.active_model
      model.set_datum "Tokyo"
      datum = model.get_datum
      assert_equal("Tokyo", datum,
                 'Failed in test_get_datum_edgecases' )
      Sketchup.active_model.commit_operation
  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_get_datum_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end
  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.attribute_dictionary
  # @file                rmodel.cpp
  #
  # Returns the Sketchup::AttributeDictionary object that is specified by
  # name. If the model does not have an attribute dictionary that
  # corresponds to name, returns either nil, or a creates an attribute
  # dictionary. If the optional second argument is true, and there is no
  # attribute dictionary that corresponds to name, a new attribute
  # dictionary is created.
  #
  #
  # Args:
  # - name: The name of the dictionary you are attempting to retrieve.
  # - create: (optional) if set to true an attribute dictionary of the
  # given "name" will be created if not found.
  #
  # Returns:
  # - attributedictionary: an attribute dictionary object if
  # successful, nil if unsuccessful
  #

  # Test the example code that we have in the API documentation.
  def test_attribute_dictionary_api_example
    Sketchup.active_model.start_operation "test_attribute_dictionary_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      create_if_empty = true
      attributedictionary = model.attribute_dictionary "name", create_if_empty
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_attribute_dictionary_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_attribute_dictionary_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_attribute_dictionary_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.title
  # @file                rmodel.cpp
  #
  # The tile method retrieves the name of the model. If the model is saved
  # on disk, returns the file name without extension. Otherwise returns an
  # empty string.
  #
  #
  # Args:
  #
  # Returns:
  # - title: the title of the model or an empty string (if
  # the title is not set)
  #

  # Test the example code that we have in the API documentation.
  def test_title_api_example
    Sketchup.active_model.start_operation "test_title_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
     title = model.title
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_title_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                'Failed in test_title_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_title_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.tags
  # @file                rmodel.cpp
  #
  # The tags method retrieves the string tags of the model.
  #
  #
  # Args:
  #
  # Returns:
  # - tags: string tags of the model
  #

  # Test the example code that we have in the API documentation.
  def test_tags_api_example
    Sketchup.active_model.start_operation "test_tags_api_example"
    model = Sketchup.active_model
     assert_nothing_raised do
       tags = model.tags
    end
    Sketchup.active_model.commit_operation
  end


  # Test edgecases for values passed to this method.
  def test_tags_edgecases
    Sketchup.active_model.start_operation "test_tags_edgecases"
    model = Sketchup.active_model
    model.tags = "Building, House, Brik, Simone"
    tags = model.tags
    assert_equal("Building, House, Brik, Simone", tags,
                 'Failed in test_tags_edgecases' )
    Sketchup.active_model.commit_operation
  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_tags_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.description
  # @file                rmodel.cpp
  #
  # The description method retrieves a description of the model as found
  # in the Model Info > Files panel.
  #
  # The returned description can be empty. The default description for
  # all models is empty.
  #
  #
  # Args:
  #
  # Returns:
  # - description: a description if successful.
  #

  # Test the example code that we have in the API documentation.
  def test_description_api_example
    Sketchup.active_model.start_operation "test_description_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      desc = model.description
    end
    Sketchup.active_model.commit_operation
  end

  # Test edgecases for values passed to this method.
  def test_description_edgecases
    Sketchup.active_model.start_operation "test_description_edgecases"
    model = Sketchup.active_model
    model.description = "Simone's Awesome Model"
    desc = model.description
    assert_equal("Simone's Awesome Model", desc,
                 'Failed in test_description_edgecases' )
    Sketchup.active_model.commit_operation
  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_description_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.utm_to_point
  # @file                rmodel.cpp
  #
  # The utm_to_point method converts a position given in UTM coordinates
  # to a Point3d in the Model.
  #
  #
  # Args:
  # - utm: A UTM object.
  #
  # Returns:
  # - point: A Point3d object.
  #

  # Test the example code that we have in the API documentation.
  def test_utm_to_point_api_example
    Sketchup.active_model.start_operation "test_utm_to_point_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      utm = Geom::UTM.new [+1, "A", 0.12333333, 0.12321321]
      point = model.utm_to_point utm
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_utm_to_point_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_utm_to_point_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_utm_to_point_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.import
  # @file                rmodel.cpp
  #
  # The import method is used to load a file by recognizing the file
  # extension and calling appropriate importer.
  #
  #
  # Args:
  # - filename: The name of the file to import.
  # - show_summary: true if you want to show a summary window, false if
  # you do not want to show a summary window.
  #
  # Returns:
  # - status: true if successful, false if unsuccessful
  #

  # Test the example code that we have in the API documentation.
  def test_import_api_example
    Sketchup.active_model.start_operation "test_import_api_example"
    model = Sketchup.active_model
    show_summary = true
    assert_nothing_raised do
     status = model.import "filename", show_summary
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_import_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_import_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_import_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.export
  # @file                rmodel.cpp
  #
  # The export method is used to export to the specified file format by
  # recognizing the given file extension and calling the appropriate
  # exporter.
  #
  # Optional second parameter show_summary dictates whether export
  # summary panel is shown after export operation. Returns true or false
  # indicating success or failure.
  #
  #
  # Args:
  # - filename: The name of the file to export.
  # - show_summary: true if you want to show a summary window, false if
  # you do not want to show a summary window.
  #
  # Returns:
  # - status: true if successful, false if unsuccessful
  #

  # Test the example code that we have in the API documentation.
  def test_export_api_example
    Sketchup.active_model.start_operation "test_export_api_example"
    model = Sketchup.active_model
    show_summary = true
    assert_nothing_raised do
      status = model.export "filename", show_summary
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_export_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_export_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_export_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.add_observer
  # @file                rmodel.cpp
  #
  # The add_observer method is used to add an observer to the current
  # object.
  #
  #
  # Args:
  # - observer: An observer.
  #
  # Returns:
  # - : true if successful, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_add_observer_api_example
    Sketchup.active_model.start_operation "test_add_observer_api_example"
    model = Sketchup.active_model
    object = model.materials
    observer = Sketchup::MaterialsObserver.new
    assert_nothing_raised do
      status = object.add_observer observer
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_add_observer_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_add_observer_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_add_observer_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.get_attribute
  # @file                rmodel.cpp
  #
  # The get_attribute method gets the value of an attribute that in the
  # AttributeDictionary with the given name. If no value is associated
  # with key, or if the model does not have an attribute dictionary
  # specified by name, the optional third parameter will be returned.
  #
  #
  # Args:
  # - dictname: The name of the dictionary containing the value.
  # - key: The key containing the value.
  # - defaultvalue: (optional) default value that will be returned if a
  # value does not exist.
  #
  # Returns:
  # - value: the value for a given key in the given
  # dictionary if a value exists; the default value if a
  # defaultvalue is provided and the value does not exist;
  # nil if the value does not exist and no defaultvalue is
  # provided.
  #

  # Test the example code that we have in the API documentation.
  def test_get_attribute_api_example
    Sketchup.active_model.start_operation "test_get_attribute_api_example"
    model = Sketchup.active_model
    model.set_attribute "testdictionary", "test", 115
    assert_nothing_raised do
     value = model.get_attribute "testdictionary", "test", 42
    end
    Sketchup.active_model.commit_operation
  end

 # Test edgecases for values passed to this method.
  def test_get_attribute_edgecases
    Sketchup.active_model.start_operation "test_get_attribute_edgecases"
    model = Sketchup.active_model
    model.set_attribute "testdictionary", "test", 115
    value = model.get_attribute "testdictionary", "different_test", 42
    assert_equal(42, value, "Failed in test_get_attribute_api_example")
    Sketchup.active_model.commit_operation
  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_get_attribute_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.add_note
  # @file                rmodel.cpp
  #
  # Add a text note to the Model. The position of the note is given as
  # relative window positions between 0 and 1. For example, the following
  # command would create a note that start 1/10 of the ways down the
  # screen from the upper left corner of the window.
  #
  #
  # Args:
  # - note: A string note.
  # - x: A distance along the x axis between 0 and 1.
  # - y: A distance along the y axis between 0 and 1.
  #
  # Returns:
  # - note: a note object or an exception if it is
  # unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_add_note_api_example
    Sketchup.active_model.start_operation "test_add_note_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      # Add a note 1/10 ways down the screen and 1/10 ways right from the
      # upper left corner of model window.
      note = Sketchup.active_model.add_note "Hello World", 0.1, 0.1
    end
    Sketchup.active_model.commit_operation
  end


#  # Test edgecases for values passed to this method.
#  def test_add_note_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_add_note_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_add_note_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.options
  # @file                rmodel.cpp
  #
  # The options method retrieves the options manager that defines the
  # options settings for the model.
  #
  #
  # Args:
  #
  # Returns:
  # - optionsmanager: an OptionsManager object containing
  # one or more options providers if successful.
  #

  # Test the example code that we have in the API documentation.
  def test_options_api_example
    Sketchup.active_model.start_operation "test_options_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      optionsmanager = model.options
      if (optionsmanager)
        # If an options manager is returned, iterate through each option
        # provider within the options manager and display its name.
        for option in optionsmanager
          name = option.name
          UI.messagebox name
        end
      else
        UI.messagebox "Failure"
      end
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_options_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_options_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_options_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.mipmapping?
  # @file                rmodel.cpp
  #
  # This method can be used to find out if mipmapping is on or off.
  #
  #
  # Args:
  #
  # Returns:
  # - boolean: the current mipmapping setting
  #

  # Test the example code that we have in the API documentation.
  def test_mipmapping_api_example
    Sketchup.active_model.start_operation "test_mipmapping_api_example"
    assert_nothing_raised do
     mipmapping_is_on = Sketchup.active_model.mipmapping?
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_mipmapping_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_mipmapping_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_mipmapping_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.save_thumbnail
  # @file                rmodel.cpp
  #
  # The save_thumbnail method is used to save a thumbnail image to a file.
  # The image format is specified by the file extension of filename.
  # Supported formats are bmp, jpg, png, tif, pct, and gif.
  #
  # Returns nil if it is an internal component.
  #
  #
  # Args:
  # - filename: The name of the file, with extension, to save the
  # thumbnail as.
  #
  # Returns:
  # - status: true if successful, false if unsuccessful
  #


  # Test the example code that we have in the API documentation.
  def test_save_thumbnail_api_example
    Sketchup.active_model.start_operation "test_save_thumbnail_api_example"
    depth = 100
    width = 100
    model = Sketchup.active_model
    entities = model.active_entities
    pts = []
    pts[0] = [0, 0, 0]
    pts[1] = [width, 0, 0]
    pts[2] = [width, depth, 0]
    pts[3] = [0, depth, 0]
    # Add the face to the entities in the model
    face = entities.add_face pts
    assert_nothing_raised do
      status = model.save_thumbnail "testthumbnail2.jpg"
      UI.messagebox status
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_save_thumbnail_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_save_thumbnail_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_save_thumbnail_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.list_datums
  # @file                rmodel.cpp
  #
  # This method retrieves an Array of all of the datums recognized by
  # SketchUp.
  #
  #
  # Args:
  #
  # Returns:
  # - datums: An Array object containing the datums
  # supported by SketchUp
  #

  # Test the example code that we have in the API documentation.
  def test_list_datums_api_example
    Sketchup.active_model.start_operation "test_list_datums_api_example"
    assert_nothing_raised do
      model = Sketchup.active_model
      datums = model.list_datums
      if (datums)
        # display a paragraph with all of the datums
        UI.messagebox datums
      end
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_list_datums_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_list_datums_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_list_datums_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.point_to_latlong
  # @file                rmodel.cpp
  #
  # The point_to_latlong method converts a point in the model to a LatLong
  # so that you can get its latitude and longitude.
  #
  # This method uses the location information set in ShadowInfo.
  #
  #
  # Args:
  # - point: A Point3d object.
  #
  # Returns:
  # - latlong: a LatLong object
  #

  # Test the example code that we have in the API documentation.
  def test_point_to_latlong_api_example
    Sketchup.active_model.start_operation "test_point_to_latlong_api_example"
    model = Sketchup.active_model
    coordinates = [10,10,10]
    local_point = Geom::Point3d.new(coordinates)
    assert_nothing_raised do
      ll = model.point_to_latlong(local_point)
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_point_to_latlong_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_point_to_latlong_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_point_to_latlong_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.active_layer=
  # @file                rmodel.cpp
  #
  # The active_layer= method sets the active Layer object.
  #
  #
  # Args:
  # - layer: The layer object to be set as the active layer.
  #
  # Returns:
  # - activelayer: the newly set active layer object
  #

  # Test the example code that we have in the API documentation.
  def test_set_active_layer_api_example
    Sketchup.active_model.start_operation "test_set_active_layer_api_example"
    model = Sketchup.active_model
    layers = model.layers
    layers.add "My Layer"
    assert_nothing_raised do
      activelayer = model.active_layer=layers[1]
    end
    layer=model.active_layer
    name = layer.name
    if (name != "My Layer")
      UI.messagebox "Failure: wrong Layer"
    else
      UI.messagebox name
    end
    Sketchup.active_model.commit_operation
  end

  # Test edgecases for values passed to this method.
  def test_set_active_layer_edgecases
    Sketchup.active_model.start_operation "test_set_active_layer_edgecases"
    model = Sketchup.active_model
    layers = model.layers
    layers.add "My Layer"
    activelayer = model.active_layer=layers[1]
    layer=model.active_layer
    name = layer.name
    assert_equal("My Layer", name, "Failed in test_set_active_layer_edgecases")
    Sketchup.active_model.commit_operation
  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_set_active_layer_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.remove_observer
  # @file                rmodel.cpp
  #
  # The remove_observer method is used to remove an observer from the
  # current object.
  #
  #
  # Args:
  # - observer: An observer.
  #
  # Returns:
  # - : true if successful, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_remove_observer_api_example
    Sketchup.active_model.start_operation "test_remove_observer_api_example"
    model = Sketchup.active_model
    object = model.materials
    observer = Sketchup::MaterialsObserver.new
    object.add_observer observer
    assert_nothing_raised do
     status = object.remove_observer observer
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_remove_observer_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_remove_observer_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_remove_observer_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.behavior
  # @file                rmodel.cpp
  #
  # The behavior method retrieves the behavior of the model.
  #
  #
  # Args:
  #
  # Returns:
  # - : behavior = behavior object for the model if successful
  #

  # Test the example code that we have in the API documentation.
  def test_behavior_api_example
    Sketchup.active_model.start_operation "test_behavior_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      behavior = model.behavior
      if (behavior)
        UI.messagebox behavior
      else
        UI.messagebox "Failure"
      end
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_behavior_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_behavior_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_behavior_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.skpdoc
  # @file                rmodel.cpp
  #
  # This method is deprecated. It doesn't do anything that's useful to
  # anyone, so we've sent it to pasture.
  #
  # Fly free, skpdoc!
  #
  #
  # Args:
  #
  # Returns:
  # - : number = behavior object for the model if successful
  #

  # Test the example code that we have in the API documentation.
  # NOTE: this method is not listed but it can be seen using the Ruby
  #   .methods on a model entity.
  def test_skpdoc_api_example
    Sketchup.active_model.start_operation "test_skpdoc_api_example"
    assert_nothing_raised do
      doc = Sketchup.active_model.skpdoc
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_skpdoc_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_skpdoc_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_skpdoc_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.raytest
  # @file                rmodel.cpp
  #
  # The raytest method is used to cast a ray (line) through the model and
  # return the first thing that the ray hits.
  #
  # A ray is a two element array containing a point and a vector
  # [Geom::Point3d(), Geom::Vector3d()]. The point defines the start point
  # of the ray and the vector defines the direction. If direction can not
  # be normalized (e.g. direction = [0, 0, 0]), direction is taken as a
  # point the ray intersects.
  #
  #
  # Args:
  # - ray: A two element array containing a point and a vector.
  #
  # Returns:
  # - item: an array of two values. The first value is a
  # Point3d where the item that the ray passed through
  # exists. The second element is the instance path array
  # of the entity that the ray hit. For example, if the ray
  # hits a face that contained by a component instance the
  # instance path would be [Component1]. If the ray hit a
  # face that is contained by a component instance, which
  # is contained by another component instance and so on,
  # the instance path would be [Component1, Component2,
  # Componten3...].
  #

  # Test the example code that we have in the API documentation.
  def test_raytest_api_example
    Sketchup.active_model.start_operation "test_raytest_api_example"
    model = Sketchup.active_model
    ray = [Geom::Point3d.new(1,2,3), Geom::Vector3d.new(4,5,6)]
    assert_nothing_raised do
      item = model.raytest ray
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_raytest_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_raytest_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_raytest_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.get_product_family
  # @file                rmodel.cpp
  #
  # Returns a constant number which indicates the product family of the
  # installed SketchUp application. Meaning of the values are as follows:
  # 0 = Unknown,
  # 1 = Free,
  # 2 = Pro Evaluation Mode,
  # 3 = Pro License,
  # 4 = Pro Evaluation Expired,
  # 5 = Pro License Unavailable.
  #
  #
  # Args:
  # - filename: The name of the file to import.
  #
  # Returns:
  # - number: the product family number.
  #

  # Test the example code that we have in the API documentation.
  def test_get_product_family_api_example
    Sketchup.active_model.start_operation "test_get_product_family_api_example"
    # Create a friendly array of product family names.
    family_codes = []
    family_codes[0] = 'Unknown'
    family_codes[1] = 'Free'
    family_codes[2] = 'Pro Evaluation Mode'
    family_codes[3] = 'Pro License'
    family_codes[4] = 'Pro Evaluation Expired'
    family_codes[5] = 'Pro License Unavailable'

    assert_nothing_raised do
    # Show a message of the current family.
      current_product = Sketchup.active_model.get_product_family
      UI.messagebox('You are running in ' + family_codes[current_product])
    end
    Sketchup.active_model.commit_operation
  end


  # Test edgecases for values passed to this method.
  def test_get_product_family_edgecases
    Sketchup.active_model.start_operation "test_get_product_family_edgecases"
    result = Sketchup.active_model.get_product_family
    assert_equal(true, ((result >= 0) and (result <= 5)),
                 'Failed in test_get_product_family_edgecases' )
    Sketchup.active_model.commit_operation
  end


#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_get_product_family_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.set_datum
  # @file                rmodel.cpp
  #
  # This method sets the datum used in conversions between the internal
  # coordinate system and UTM.
  #
  # The default datum is WGS84. You can use the method list_datums to get
  # a list of all of the datums supported in SketchUp. If you pass an
  # invalid datum to set_datum, set_datum returns the default datum.
  #
  #
  # Args:
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_set_datum_api_example
    Sketchup.active_model.start_operation "test_set_datum_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      value = model.set_datum "Tokyo"
    end
    Sketchup.active_model.commit_operation
  end


  # Test edgecases for values passed to this method.
  def test_set_datum_edgecases
    Sketchup.active_model.start_operation "test_set_datum_edgecases"
    model = Sketchup.active_model
    model.set_datum "Tokyo"
    datum = model.get_datum
    assert_equal("Tokyo", datum,
                 'Failed in test_set_datum_edgecases' )
    Sketchup.active_model.commit_operation
  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_set_datum_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.attribute_dictionaries
  # @file                rmodel.cpp
  #
  # The attribute_dictionaries method retrieves the AttributeDictionaries
  # object that is associated with the Model.
  #
  #
  # Args:
  #
  # Returns:
  # - attributedictionaries: an array of attribute dictionary
  # if successful, nil if there are no attribute
  # dictionaries
  #

  # Test the example code that we have in the API documentation.
  def test_attribute_dictionaries_api_example
    Sketchup.active_model.start_operation "test_attribute_dictionaries_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      attdicts = model.attribute_dictionaries
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_attribute_dictionaries_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_attribute_dictionaries_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_attribute_dictionaries_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.save
  # @file                rmodel.cpp
  #
  # This method is used to save the model to a file.
  #
  #
  # Args:
  # - filename: The name of the file to save.
  #
  # Returns:
  # - status: true if successful, false if unsuccessful
  #

  # Test the example code that we have in the API documentation.
   def test_save_api_example
     Sketchup.active_model.start_operation "test_save_api_example"
     model = Sketchup.active_model
     assert_nothing_raised do
       status = model.save "mysketchup.skp"
     end
     Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_save_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_save_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_save_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.name=
  # @file                rmodel.cpp
  #
  # The name= method sets the string name of the model.
  #
  #
  # Args:
  # - name: - new name of the model
  #
  # Returns:
  # - model: the model that was renamed
  #

  # Test the example code that we have in the API documentation.
  def test_set_name_api_example
    Sketchup.active_model.start_operation "test_set_name_api_example"
    assert_nothing_raised do
      Sketchup.active_model.name = "My New Model Name"
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_set_name_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_set_name_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_set_name_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # Test that the set name method works with strings.
  def test_set_name_works_with_strings
    Sketchup.active_model.start_operation "test_set_name_works_with_strings"
    obj = Sketchup.active_model
    messy_string = 'TestString!@#%^*&(*_[]}{:"":><.,?>/.\|'
    obj.name = messy_string
    result = obj.name
    expected = messy_string
    assert_equal(expected, result, 'Expected does not match result.')
    Sketchup.active_model.commit_operation
  end

  # Test that the set name method works with integer.
  def test_set_name_works_with_integers
    Sketchup.active_model.start_operation "test_set_name_works_with_integers"
    obj = Sketchup.active_model
    integer = 54321
    obj.name = integer.to_s
    result = obj.name
    expected = integer.to_s
    assert_equal(expected, result, 'Expected does not match result.')
    Sketchup.active_model.commit_operation
  end

  # Test that the set name method works with float.
  def test_set_name_works_with_floats
    Sketchup.active_model.start_operation "test_set_name_works_with_floats"
    obj = Sketchup.active_model
    float = 54321.1
    obj.name = float.to_s
    result = obj.name
    expected = float.to_s
    assert_equal(expected, result, 'Expected does not match result.')
    Sketchup.active_model.commit_operation
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.description=
  # @file                rmodel.cpp
  #
  # The description= method sets the description of the model.
  #
  # If you do not include a description string, the description is
  # cleared and an empty description is returned.
  #
  #
  # Args:
  # - description: (optional) the description string to be set.
  #
  # Returns:
  # - description: the currently set description string.
  #

  # Test the example code that we have in the API documentation.
  def test_set_description_api_example
    Sketchup.active_model.start_operation "test_set_description_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      description = model.description="This is a model of a house on the " +
        "North West Corner of 10th and Dolores Street in Carmel, California"
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_set_description_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_set_description_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_set_description_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # Test that the set description method works with strings.
  def test_set_description_works_with_strings
    Sketchup.active_model.start_operation "test_set_description_works_with_strings"
    obj = Sketchup.active_model
    messy_string = 'TestString!@#%^*&(*_[]}{:"":><.,?>/.\|'
    obj.description = messy_string
    result = obj.description
    expected = messy_string
    assert_equal(expected, result, 'Expected does not match result.')
    Sketchup.active_model.commit_operation
  end

  # Test that the set description method works with integers.
  def test_set_description_works_with_integers
    Sketchup.active_model.start_operation "test_set_description_works_with_integers"
    obj = Sketchup.active_model
    integer = 54321
    obj.description = integer.to_s
    result = obj.description
    expected = integer.to_s
    assert_equal(expected, result, 'Expected does not match result.')
    Sketchup.active_model.commit_operation
  end

  # Test that the set description method works with float.
  def test_set_description_works_with_floats
    Sketchup.active_model.start_operation "test_set_description_works_with_floats"
    obj = Sketchup.active_model
    float = 54321.1
    obj.description = float.to_s
    result = obj.description
    expected = float.to_s
    assert_equal(expected, result, 'Expected does not match result.')
    Sketchup.active_model.commit_operation
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.entities
  # @file                rmodel.cpp
  #
  # The entities method returns an Entities object containing an array of
  # entities in the model.
  #
  # If no entities are in your model, this method returns an empty
  # Entities object (an empty array)
  #
  #
  # Args:
  #
  # Returns:
  # - entities: an Entities object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_entities_api_example
    Sketchup.active_model.start_operation "test_entities_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      entities = model.entities
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_entities_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_entities_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_entities_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
# end

  # Test that the entities method returns an Entities object.
  def test_entities_returns_entities_obj
    Sketchup.active_model.start_operation "test_entities_returns_entities_obj"
    obj = Sketchup.active_model
    ents = obj.entities
    result = ents.class
    expected = Sketchup::Entities
    assert_equal(expected, result, 'Expected does not match result.')
    Sketchup.active_model.commit_operation
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.active_path
  # @file                rmodel.cpp
  #
  # Returns an array containing the sequence of entities the user has
  # double-clicked on for editing. This allows one to determine whether
  # they are in component edit mode and where in the model they are.
  #
  # For example, if a user has double-clicked into a component to edit
  # its geometry, and then double clicked into a sub-group to edit that,
  # the active_path might contain:
  #
  # [#<Sketchup::ComponentInstance>, #<Sketchup::Group>]
  #
  #
  # Args:
  #
  # Returns:
  # - path: array of entities showing where the user is
  # currently editing.
  #

  # Test the example code that we have in the API documentation.
  def test_active_path_api_example
    Sketchup.active_model.start_operation "test_active_path_api_example"
    assert_nothing_raised do
      active_path = Sketchup.active_model.active_path
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_active_path_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_active_path_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_active_path_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
# end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.active_view
  # @file                rmodel.cpp
  #
  # The active_view method returns the active View object for this model.
  #
  #
  # Args:
  #
  # Returns:
  # - view: a view object
  #

  # Test the example code that we have in the API documentation.
  def test_active_view_api_example
    Sketchup.active_model.start_operation "test_active_view_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      view = model.active_view
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_active_view_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_active_view_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_active_view_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.guid
  # @file                rmodel.cpp
  #
  # The guid method retrieves the globally unique identifier, in the form
  # of a string, for the Model.
  #
  #
  # Args:
  #
  # Returns:
  # - guid: a globally unique identifier, in the form of a
  # string, for the model
  #

  # Test the example code that we have in the API documentation.
  def test_guid_api_example
    Sketchup.active_model.start_operation "test_active_view_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      guid = model.guid
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_guid_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_guid_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_guid_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.styles
  # @file                rmodel.cpp
  #
  # The styles method retrieves the styles associated with the model.
  #
  #
  # Args:
  #
  # Returns:
  # - styles: the Styles object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_styles_api_example
    Sketchup.active_model.start_operation "test_styles_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      styles = model.styles
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_styles_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_styles_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_styles_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.materials
  # @file                rmodel.cpp
  #
  # The materials method returns a collection of all of the Materials in
  # the model.
  #
  #
  # Args:
  #
  # Returns:
  # - materials: materials collection.
  #

  # Test the example code that we have in the API documentation.
  def test_materials_api_example
    Sketchup.active_model.start_operation "test_materials_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      materials = model.materials
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_materials_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_materials_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_materials_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.point_to_utm
  # @file                rmodel.cpp
  #
  # This method converts a Point3d object in the Model to UTM coordinates.
  #
  # This method uses the location information set in ShadowInfo. See also
  # UTM.
  #
  #
  # Args:
  # - point: A Point3d object.
  #
  # Returns:
  # - utm: a UTM object
  #

  # Test the example code that we have in the API documentation.
  def test_point_to_utm_api_example
    Sketchup.active_model.start_operation "test_point_to_utm_api_example"
    model = Sketchup.active_model
    point = Geom::Point3d.new(10,10,10)
    assert_nothing_raised do
      utm = model.point_to_utm point
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_point_to_utm_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_point_to_utm_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_point_to_utm_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.set_attribute
  # @file                rmodel.cpp
  #
  # This method is used to set the value of an attribute in an attribute
  # dictionary with the given name.
  #
  # This method can be used create a new AttributeDictionary object, if
  # needed.
  #
  #
  # Args:
  # - attrdictname: The name of the attribute dictionary whose attribute
  # you wish to set.
  # - key: The attribute name.
  # - value: The value to set.
  #
  # Returns:
  # - value: the value that was set
  #

  # Test the example code that we have in the API documentation.
  def test_set_attribute_api_example
    Sketchup.active_model.start_operation "test_set_attribute_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      value = model.set_attribute "attributedictionaryname", "key", "value"
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_set_attribute_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_set_attribute_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_set_attribute_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.abort_operation
  # @file                rmodel.cpp
  #
  # The abort_operation method aborts the current operation started with
  # the start_operation method.
  #
  # The abort_operation method is normally called from inside of a rescue
  # clause to cancel an operation if something goes wrong.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if successful, false if unsuccessful
  #

  # Test the example code that we have in the API documentation.
  def test_abort_operation_api_example
    Sketchup.active_model.start_operation "test_abort_operation_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      status = model.abort_operation
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_abort_operation_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_abort_operation_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_abort_operation_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.commit_operation
  # @file                rmodel.cpp
  #
  # The commit_operation method commits an operation for undo.
  #
  # The commit_operation method is normally called at the end of a method
  # to commit the operation that the method performs.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if successful, false if unsuccessful
  #

  # Test the example code that we have in the API documentation.
  def test_commit_operation_api_example
    Sketchup.active_model.start_operation "test_commit_operation_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      status = model.commit_operation
    end
  end

#  # Test edgecases for values passed to this method.
#  def test_commit_operation_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_commit_operation_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_commit_operation_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.bounds
  # @file                rmodel.cpp
  #
  # The bounds method retrieves the bounding box of the model.
  #
  #
  # Args:
  #
  # Returns:
  # - : boundingbox = bounding box for the model if successful
  #

  # Test the example code that we have in the API documentation.
  def test_bounds_api_example
    Sketchup.active_model.start_operation "test_bounds_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      bounds = model.bounds
      if (bounds)
        length = bounds.depth
        UI.messagebox length
      else
        UI.messagebox "Failure: No bounding box found"
      end
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_bounds_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_bounds_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_bounds_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.valid?
  # @file                rmodel.cpp
  #
  # Determine if a model is a valid Sketchup::Model object. Returns false
  # if the model has been closed.
  #
  # This is useful on the mac where one can have multiple models open at
  # the same time. In such a case, this method can tell you if the user
  # has closed the model before you perform operations on it.
  #
  #
  # Args:
  #
  # Returns:
  # - valid: true or false depending on model validity
  #

  # Test the example code that we have in the API documentation.
  def test_valid_api_example
    Sketchup.active_model.start_operation "test_valid_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
    # This is a silly example since the active model is generally going to
    # be valid, but it illustrates the idea.
      if model.valid?
        UI.messagebox('This model is valid.')
      else
        UI.messagebox('This model is NOT valid.')
      end
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_valid_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_valid_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_valid_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # Test that the valid? method returns true if it's a valid object.
  def test_valid_returns_true_if_valid_object
    Sketchup.active_model.start_operation "test_valid_returns_true_if_valid_object"
    obj = Sketchup.active_model
    result = obj.valid?
    expected = true
    assert_equal(expected, result, 'Expected does not match result.')
    Sketchup.active_model.commit_operation
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.shadow_info
  # @file                rmodel.cpp
  #
  # This method is used to retrieve the shadow information for the Model.
  #
  #
  # Args:
  #
  # Returns:
  # - shadowinfo: a ShadowInfo object.
  #

  # Test the example code that we have in the API documentation.
  def test_shadow_info_api_example
    Sketchup.active_model.start_operation "test_shadow_info_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      shadowinfo = model.shadow_info
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_shadow_info_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_shadow_info_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_shadow_info_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.start_operation
  # @file                rmodel.cpp
  #
  # The start_operation method is used to notify Edit > Undo that a new
  # operation (which can be undone) is starting.
  #
  # The String is a description for the operation that is displayed
  # adjacent to the Edit > Undo menu item.
  #
  # Starting with SketchUp 7.0, there are three additional booleans that
  # one can pass in when starting an operation. All three default to
  # false.
  #
  #
  # Args:
  # - op_name: String name of the operation
  # - disable_ui: boolean - if set to true, then SketchUp's tendency to
  # update the user interface after each geometry change will be
  # suppressed. This can result in much faster Ruby code execution if the
  # operation involves updating the model in any way.
  # - transparent: boolean - if set to true, then this operation will be
  # made "transparent", which functionally means that whatever operation
  # comes after this one will be appended into one combined operation,
  # allowing the user the undo both actions with a single undo command.
  # This flag is a highly difficult one, since there are so many ways that
  # a SketchUp user can interrupt a given operation with one of their own.
  # Use extreme caution and test thoroughly when setting this to true.
  # - prev_trans: boolean - if set to true, then this operation will make
  # the <i>previous</i> one transparent, which functionally means that
  # your new operation will be combined with whatever the user did last.
  # This is particularly useful for creating observers that react to user
  # actions without littering the undo stack with extra steps that Ruby is
  # performing.
  #
  # Returns:
  # - status: true if successful, false if unsuccessful
  #

  # Test the example code that we have in the API documentation.
  def test_start_operation_api_example
    model = Sketchup.active_model
    assert_nothing_raised do
      status = model.start_operation "The Name Of The Operation"
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_start_operation_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_start_operation_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_start_operation_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.tags=
  # @file                rmodel.cpp
  #
  # The tags= method sets the string tags of the model.
  #
  #
  # Args:
  # - tags: - new tags of the model
  #
  # Returns:
  # - model: the model that was retagged
  #

  # Test the example code that we have in the API documentation.
  def test_set_tags_api_example
    assert_nothing_raised do
      Sketchup.active_model.tags = "Building, House, Brick"
    end
  end

  # Test edgecases for values passed to this method.
  def test_set_tags_edgecases
    Sketchup.active_model.start_operation "test_set_tags_edgecases"
    model = Sketchup.active_model
    model.tags = "Building, House, Brik, Simone"
    tags = model.tags
    assert_equal("Building, House, Brik, Simone", tags,
                 'Failed in test_set_tags_edgecases' )
    Sketchup.active_model.commit_operation
  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_set_tags_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.name
  # @file                rmodel.cpp
  #
  # The name method retrieves the string name of the model.
  #
  #
  # Args:
  #
  # Returns:
  # - name: string name of the model
  #

  # Test the example code that we have in the API documentation.
  def test_name_api_example
    Sketchup.active_model.start_operation "test_name_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      name = model.name
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_name_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_name_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_name_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.pages
  # @file                rmodel.cpp
  #
  # The pages method retrieves a Pages object containing all of the pages
  # in the Model.
  #
  #
  # Args:
  #
  # Returns:
  # - pages: returns a Pages object with 0 or more pages.
  #

  # Test the example code that we have in the API documentation.
  def test_pages_api_example
    Sketchup.active_model.start_operation "test_pages_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      pages = model.pages
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_pages_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_pages_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_pages_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
# end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.definitions
  # @file                rmodel.cpp
  #
  # The definitions method retrieves a definition list containing all of
  # the component definitions in the model.
  #
  # The returned definitions can be empty.
  #
  #
  # Args:
  #
  # Returns:
  # - definitions: a definitions list if successful.
  #

  # Test the example code that we have in the API documentation.
  def test_definitions_api_example
    Sketchup.active_model.start_operation "test_definitions_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      deflist = model.definitions
      # parse array of definitions and act upon the definitions found
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_definitions_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_definitions_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_definitions_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.edit_transform
  # @file                rmodel.cpp
  #
  # Returns the transformation of the current component edit session. If a
  # user has double-clicked to edit a component's geometry, this will
  # return the transformation of that component, relative to its parent's
  # origin. This allows one to correctly calculate "local" transformations
  # of a given entity regardless of whether the user is in edit mode.
  #
  #
  # Args:
  #
  # Returns:
  # - transform: the current edit Transformation
  #

  # Test the example code that we have in the API documentation.
  def test_edit_transform_api_example
    Sketchup.active_model.start_operation "test_edit_transform_api_example"
    assert_nothing_raised do
      Sketchup.active_model.edit_transform
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_edit_transform_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_edit_transform_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_edit_transform_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.latlong_to_point
  # @file                rmodel.cpp
  #
  # The latlong_to_point method convert a latitude and longitude to a
  # Point3d object in the model.
  #
  #
  # Args:
  # - latlong: A latlong object.
  #
  # Returns:
  # - point: a point3d object if successful, false if
  # unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_latlong_to_point_api_example
    Sketchup.active_model.start_operation "test_latlong_to_point_api_example"
    lat_long_array = [40.01700, 105.28300]
    model = Sketchup.active_model
    assert_nothing_raised do
      point = model.latlong_to_point lat_long_array
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_latlong_to_point_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_latlong_to_point_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_latlong_to_point_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.modified?
  # @file                rmodel.cpp
  #
  # The modified? method determines if the Model has been modified since
  # the last save.
  #
  #
  # Args:
  #
  # Returns:
  # - : status = true if the model has been modified since last
  # save (and requires a save), false if the model has not
  # been modified.
  #

  # Test the example code that we have in the API documentation.
  def test_modified_api_example
    Sketchup.active_model.start_operation "test_modified_api_example"
    model = Sketchup.active_model
    entities = model.active_entities
    # Add a group to force the status return value to be true
    entities.add_group
    assert_nothing_raised do
      status = model.modified?
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_modified_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_modified_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_modified_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.path
  # @file                rmodel.cpp
  #
  # The path method retrieves the path of the file from which the model
  # was opened.
  #
  # An empty string is returned for a new model (one which has not been
  # saved and opened.)
  #
  #
  # Args:
  #
  # Returns:
  # - path: an string containing the path for the currently
  # opened model.
  #

  # Test the example code that we have in the API documentation.
  def test_path_api_example
    Sketchup.active_model.start_operation "test_path_api_example"
    model = Sketchup.active_model
    assert_nothing_raised do
      # Return the current path (empty)
      path = model.path
      UI.messagebox path
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_path_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_path_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_path_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.rendering_options
  # @file                rmodel.cpp
  #
  # The rendering_options method retrieves the RenderingOptions object for
  # this Model.
  #
  #
  # Args:
  #
  # Returns:
  # - renderingoptions: a RenderingOptions object
  #

  # Test the example code that we have in the API documentation.
  def test_rendering_options_api_example
    Sketchup.active_model.start_operation "test_rendering_options_api_example"
    assert_nothing_raised do
      renderingoptions = Sketchup.active_model.rendering_options
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_rendering_options_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_rendering_options_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_rendering_options_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Model.active_entities
  # @file                rmodel.cpp
  #
  # The active_entities method is used to retrieve an Entities object
  # containing all of the entities in the active model or component (if
  # you are within a component)
  #
  #
  # Args:
  #
  # Returns:
  # - entities: an entities object
  #

  # Test the example code that we have in the API documentation.
  def test_active_entities_api_example
    Sketchup.active_model.start_operation "test_active_entities_api_example"
    assert_nothing_raised do
      entities = Sketchup.active_model.active_entities
    end
    Sketchup.active_model.commit_operation
  end

#  # Test edgecases for values passed to this method.
#  def test_active_entities_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_active_entities_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_active_entities_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

end
