# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API SectionPlane object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_SectionPlane contains unit tests for the SectionPlane class.
#
# API Object::       SectionPlane
# C++ File::         rsectionplane.cpp
# Parent Class::     DrawingElement
# Version::          SketchUp 6.0
#
# The SectionPlane class contains methods to get and set the plane for the
# SectionPlane in a model. Note that there is no way to get a SectionPlane
# object using Ruby. You must manually create a section plane with the Section
# Plane Tool in SketchUp and then query the entities array to find the
# SectionPlane object. This class was primarily added for compatibility with a
# third-party software product.
#
class TC_SectionPlane < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    #Assets for this test case
    test_model = 'sectionPlane.skp'
    local_path = __FILE__.slice(0, __FILE__.rindex('.'))
    #puts "path : #{local_path}"
    test_model_path = File.join(local_path, test_model)
    Sketchup.open_file test_model_path

    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    SectionPlane.set_plane
  # @file                rsectionplane.cpp
  #
  # The set_plane method is used to set the plane that the section plane
  # is on.
  #
  #
  # Args:
  # - plane: An array representing the new plane,
  #
  # Returns:
  # - section_plane: the updated SectionPlane.
  #

  # Test the example code that we have in the API documentation.
  def test_set_plane_api_example
    my_plane_array = [0, 0, 1, 0]
    model = Sketchup.active_model
    entities = model.active_entities
    sp = nil
    entities.each do |ent|
      if ent.typename == 'SectionPlane'
        sp = ent
      end
    end
    assert_nothing_raised do
      sp = sp.set_plane my_plane_array
    end
  end

#  # Test edgecases for values passed to this method.
#  def test_set_plane_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_set_plane_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_set_plane_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    SectionPlane.get_plane
  # @file                rsectionplane.cpp
  #
  # The get_plane method is used to retrieve the plane that the section
  # plane is on.
  #
  #
  # Args:
  #
  # Returns:
  # - plane: a plane. See the Geom module and Array class
  # for further information on planes.
  #

  # Test the example code that we have in the API documentation.
  def test_get_plane_api_example
    model = Sketchup.active_model
    entities = model.active_entities
    sp = nil
    entities.each do |ent|
      if ent.typename == 'SectionPlane'
        sp = ent
      end
    end
    assert_nothing_raised do
      plane = sp.get_plane
      if (plane)
        UI.messagebox plane
      else
        UI.messagebox 'Failure'
      end
    end
  end

#  # Test edgecases for values passed to this method.
#  def test_get_plane_edgecases
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_equal('expected', 'result',
#                 'Failed in test_get_plane_edgecases' )
#  end

#  # Test what happens when bad arguments are passed (nil, too few, etc.)
#  def test_get_plane_bad_params
#    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
#    assert_raise RuntimeError do
#      # bad arguments here that should cause errors
#    end
#  end

end
