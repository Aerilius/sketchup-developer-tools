# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
# Author: Simone Nicolo 
#
# Tests the SketchUp Ruby API Set object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Set contains unit tests for the Set class.
#
# API Object::       Set
# C++ File::         rset.cpp
# Parent Class::     Object
# Version::          SketchUp 6.0
#
# The set class represents a collection of unique objects. This class is useful
# for keeping track of a group of related entities, kind of like a selection
# set that stays around for as long as you need it to.
#
class TC_Set < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    # Turn off messageboxes by redirecting them on the standard output (ruby console)
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Set.length
  # @file                rset.cpp
  #
  # The length method is an alias for size. See also Set.size.
  #
  #
  # Args:
  #
  # Returns:
  # - length: the length (number of objects) in the set
  #

  # Test the example code that we have in the API documentation.
  def test_length_api_example
    set = Set.new
    toolbar = UI::Toolbar.new "Test"
    set = set.insert toolbar
    length = set.length
    assert_equal(1, length,
                 'Failed in test_length' )
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Set.delete
  # @file                rset.cpp
  #
  # The delete object is used to delete or remove an object from the set.
  #
  #
  # Args:
  # - object: The object to be deleted.
  #
  # Returns:
  # - object: the object that was deleted.
  #

  # Test the example code that we have in the API documentation.
  def test_delete_api_example
     set = Set.new
     toolbar = UI::Toolbar.new "Test"
     assert_nothing_raised do
       set = set.insert toolbar
       if (set.include? toolbar)
         UI.messagebox "Success: Contains Toolbar Object"
       else
         UI.messagebox "Failure"
       end
       set.delete toolbar
       if (set.include? toolbar)
         UI.messagebox set
       else
         UI.messagebox "Set is empty"
       end
    end
      assert((not (set.include? toolbar)))
  end

  # Test edgecases for values passed to this method.
  def test_delete_edgecases
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_delete_bad_params
    assert_nothing_raised do
     set = Set.new
     set.delete nil
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Set.to_a
  # @file                rset.cpp
  #
  # The to_a method is used to get an Array of the entities in your Set.
  #
  #
  # Args:
  #
  # Returns:
  # - array: The Array of the entities in the Set.
  #

  # Test the example code that we have in the API documentation.
  def test_to_a_api_example
    assert_nothing_raised do
     my_array = Set.to_a
     UI.messagebox my_array
    end
  end

  # Test that the entities method returns an Array object.
  def test_to_a_returns_array
    obj = Set.new
    a = obj.to_a
    result = a.class
    expected = Array
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Set.each
  # @file                rset.cpp
  #
  # The each method is used to iterate through all of the objects in the
  # set.
  #
  #
  # Args:
  #
  # Returns:
  # - item: variables that will hold each object as it is
  # found.
  #

  # Test the example code that we have in the API documentation.
  def test_each_api_example
    assert_nothing_raised do
     set = Set.new
     toolbar = UI::Toolbar.new "Test"
     set.insert toolbar
     set.each { | item | UI.messagebox item }
    end
  end

  # Test that the number of iterations is equal to the reported length.
  def test_each_iterations_matches_length
    collection = Set.new
    count = 0
    collection.each do |obj|
      count = count + 1
    end
    expected = collection.length
    result = count
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Set.new
  # @file                rset.cpp
  #
  # The new method is used to create a new, empty set.
  #
  #
  # Args:
  #
  # Returns:
  # - set: a new Set object if successful.
  #

  # Test the example code that we have in the API documentation.
  def test_new_api_example
    assert_nothing_raised do
     set = Set.new
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Set.clear
  # @file                rset.cpp
  #
  # The clear method is used to clear all objects out of the set.
  #
  #
  # Args:
  #
  # Returns:
  # - set: an empty Set object
  #

  # Test the example code that we have in the API documentation.
  def test_clear_api_example
    set = Set.new
    assert_nothing_raised do
     toolbar = UI::Toolbar.new "Test"
     set = set.insert toolbar
     if (set.include? toolbar)
       UI.messagebox "Success: Contains Toolbar Object"
     else
       UI.messagebox "Failure"
     end
     set = set.clear
     if (set.include? toolbar)
       UI.messagebox set
     else
       UI.messagebox "Set is empty"
     end
    end
    assert(set.empty?)
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Set.size
  # @file                rset.cpp
  #
  # The size method is used to determine the number of objects in the set.
  #
  #
  # Args:
  #
  # Returns:
  # - size: the number of objects in the set
  #

  # Test the example code that we have in the API documentation.
  def test_size_api_example
    set = Set.new
    assert_nothing_raised do
     toolbar = UI::Toolbar.new "Test"
     set = set.insert toolbar
     size = set.size
     if (size)
       UI.messagebox size
     else
       UI.messagebox "Failure"
     end
    end
    assert_equal(1, set.size,
                 'Failed in test_size' )
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Set.include?
  # @file                rset.cpp
  #
  # The include? method is used to determine if the set includes a
  # particular object. This method is the same as the contains? method.
  #
  #
  # Args:
  # - object: A Ruby object of any type.
  #
  # Returns:
  # - status: true if the set contains the object, false if
  # the set does not contain the object.
  #

  # Test the example code that we have in the API documentation.
  def test_include_api_example
    set = Set.new
    toolbar = UI::Toolbar.new "Test"
    assert_nothing_raised do
     set = set.insert toolbar
     if (set.include? toolbar)
       UI.messagebox "Success: Contains Toolbar Object"
     else
       UI.messagebox "Failure"
     end
    end
    status = set.include? toolbar
    assert(status, 'failed in test_include_api_example')
  end

  # Test edgecases for values passed to this method.
  def test_include_edgecases
    set = Set.new
    assert_equal(false, (set.include? nil),
                 'Failed in test_include_edgecases' )
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Set.empty?
  # @file                rset.cpp
  #
  # The empty? method is used to determine whether the set is empty.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if the set is empty, false if it is not
  # empty.
  #

  # Test the example code that we have in the API documentation.
  def test_empty_api_example
    set = Set.new
    assert_nothing_raised do
     toolbar = UI::Toolbar.new "Test"
     set.insert toolbar
     status = set.empty?
     if (status)
       UI.messagebox "Success: Set is Empty"
     else
       UI.messagebox "Failure: Set has an Item"
     end
    end
    assert((not (set.empty?)))
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Set.contains?
  # @file                rset.cpp
  #
  # The contains? method is an alias for include?. See also Set.include?
  #
  #
  # Args:
  # - object: A Ruby object of any type.
  #
  # Returns:
  # - status: true if the set contains the object, false if
  # the set does not contain the object.
  #

  # Test the example code that we have in the API documentation.
  def test_contains_api_example
    set = Set.new
    toolbar = UI::Toolbar.new "Test"
    assert_nothing_raised do
     set.insert toolbar
     if (set.contains? toolbar)
       UI.messagebox "Success: Contains Toolbar Object"
     else
       UI.messagebox "Failure"
     end
    end
    status = set.contains? toolbar
    assert(status, 'failed in test_contains_api_example' )
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_contains_bad_params
    assert_nothing_raised do
      set = Set.new
      set.contains? nil
      set.contains? false
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Set.insert
  # @file                rset.cpp
  #
  # The insert method is used to insert an object into the set.
  #
  #
  # Args:
  # - object: The object to be inserted into the set.
  #
  # Returns:
  # - size: the number of objects in the set
  #

  # Test the example code that we have in the API documentation.
  def test_insert_api_example
     set = Set.new
     toolbar = UI::Toolbar.new "Test"
    assert_nothing_raised do
     set = set.insert toolbar
     if (set.include? toolbar)
       UI.messagebox "Success: Contains Toolbar Object"
     else
       UI.messagebox "Failure"
     end
    end
    status = set.include? toolbar
    assert(status, 'failed in test_insert_api_example')
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_insert_bad_params
    assert_nothing_raised do
     set = Set.new
     set.insert nil
    end
  end

end
