# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Group object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Group contains unit tests for the Group class.
#
# API Object::       Group
# C++ File::         rgroup.cpp
# Parent Class::     Drawingelement
# Version::          SketchUp 6.0
#
# A Group class contains methods for manipulating groups of entities.
#
#
class TC_Group < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end

    entities_to_erase = []
    for entity in Sketchup.active_model.entities
      entities_to_erase.push entity
    end

    for entity in entities_to_erase
      if entity.valid?
        entity.erase!
      end
    end
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    Group.make_unique
  # @file                rgroup.cpp
  #
  # The make_unique method is a deprecated method used to force a group to
  # have a unique definition.
  #
  # Copying a group using the copy tool in SketchUp will create copies of
  # the group that share a common definition until an instance is edited
  # manually or this method is used. If multiple copies are made, all
  # copies share a definition until all copies are edited manually, or all
  # copies have this method used on them. This method ensures that the
  # group uses a unique definition entry in the drawing database.
  #
  #
  # Args:
  #
  # Returns:
  # - : "WARNING: make_unique is a deprecated method of
  # Sketchup:Group", followed by the object ID
  #

  # Test the example code that we have in the API documentation.
  def test_make_unique_api_example
    assert_nothing_raised do
     # Add a group to the model.
     group = Sketchup.active_model.entities.add_group
     group.entities.add_line([0,0,0],[100,100,100])
     group.make_unique
    end
  end

  # Test edgecases for values passed to this method.
  #def test_make_unique_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_make_unique_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_make_unique_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    Group.move!
  # @file                rgroup.cpp
  #
  # The move! method is used to apply a transformation to the group.
  #
  # This method is the same as the transform! method except that it does
  # not record the move in an undo operation. This method is useful for
  # transparently moving things during an animation.
  #
  #
  # Args:
  # - transform: A Transformation object.
  #
  # Returns:
  # - group: the transformed Group object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_move_inplace_api_example
    assert_nothing_raised do
     point = Geom::Point3d.new 500,500,500
     t = Geom::Transformation.new point
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]

     # Add the group to the entities in the model
     group = entities.add_group

     # Get the entities within the group
     entities2 = group.entities

     # Add a face to within the group
     face = entities2.add_face pts
     UI.messagebox "Group before Move"
     group = group.move! t
     if (group)
       UI.messagebox "Group after move"
       UI.messagebox group
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_move_inplace_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_move_inplace_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_move_inplace_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    Group.transformation
  # @file                rgroup.cpp
  #
  # The transformation method is used to retrieve the transformation for
  # the group.
  #
  #
  # Args:
  #
  # Returns:
  # - transformation: a Transformation object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_transformation_api_example
    assert_nothing_raised do
     # Add a group to the model.
     group = Sketchup.active_model.entities.add_group
     group.entities.add_line([0,0,0],[100,100,100])

     trans = group.transformation
    end
  end

  # Test edgecases for values passed to this method.
  #def test_transformation_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_transformation_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_transformation_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # Test that the entities method returns a Transformation object.
  def test_transformation_returns_transformation
    obj = Sketchup.active_model.entities.add_group
    t = obj.transformation
    result = t.class
    expected = Geom::Transformation
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    Group.local_bounds
  # @file                rgroup.cpp
  #
  # The local_bounds method returns the BoundingBox object that defines
  # the size of the group in an untransformed state. Useful for
  # determining the original width, height, and depth of a group
  # regardless of its current position or scale. For components, you can
  # get a similar result by checking my_instance.definition.bounds.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if the component instance is locked.
  # False if the instance is not locked.
  #

  # Test the example code that we have in the API documentation.
  def test_local_bounds_api_example
    assert_nothing_raised do
     # Add a group to the model.
     group = Sketchup.active_model.entities.add_group
     group.entities.add_line([0,0,0],[100,100,100])
     transformation = Geom::Transformation.new([100,0,0])

     # Note that local_bounds_1 and local_bounds_2 will be identical, since
     # they both find the bounding box in group's untransformed state.
     local_bounds_1 = group.local_bounds
     group.transform! transformation
     local_bounds_2 = group.local_bounds
    end
  end

  # Test edgecases for values passed to this method.
  #def test_local_bounds_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_local_bounds_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_local_bounds_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    Group.add_observer
  # @file                rgroup.cpp
  #
  # The add_observer method is used to add an observer to the current
  # object.
  #
  #
  # Args:
  # - observer: An observer.
  #
  # Returns:
  # - : true if successful, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_add_observer_api_example
    observer = Object.new
    assert_nothing_raised do
     # Add a group to the model.
     group = Sketchup.active_model.entities.add_group
     group.entities.add_line([0,0,0],[100,100,100])
     status = group.add_observer observer
    end
  end

  # Test edgecases for values passed to this method.
  #def test_add_observer_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_add_observer_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_add_observer_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    Group.name=
  # @file                rgroup.cpp
  #
  # The name= method is used to set the description for the group.
  #
  #
  # Args:
  # - name: A string name.
  #
  # Returns:
  # - name: a new name if successful
  #

  # Test the example code that we have in the API documentation.
  def test_set_name_api_example
    assert_nothing_raised do
     # Add a group to the model.
     group = Sketchup.active_model.entities.add_group
     group.entities.add_line([0,0,0],[100,100,100])
     group.name = "A Line"
     name = group.name
    end
  end

  # Test edgecases for values passed to this method.
  #def test_set_name_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_set_name_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_set_name_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # Test that the set name method works with strings.
  def test_set_name_works_with_string
    obj = Sketchup.active_model.entities.add_group
    messy_string = 'TestString!@#%^*&(*_[]}{:"":><.,?>/.\|'
    obj.name = messy_string
    result = obj.name
    expected = messy_string
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    Group.transformation=
  # @file                rgroup.cpp
  #
  # The transformation= method is used to set the transformation for the
  # group.
  #
  #
  # Args:
  # - transformation: - a Transformation object if successful
  #
  # Returns:
  # - group: the newly trasformed group
  #

  # Test the example code that we have in the API documentation.
  def test_set_transformation_api_example
    assert_nothing_raised do
     # Add a group to the model.
     group = Sketchup.active_model.entities.add_group
     group.entities.add_line([0,0,0],[100,100,100])

     new_transform = Geom::Transformation.new([100,0,0])
     group.transformation = new_transform
    end
  end

  # Test edgecases for values passed to this method.
  #def test_set_transformation_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_set_transformation_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_set_transformation_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    Group.description=
  # @file                rgroup.cpp
  #
  # The description= method is used to set the description for the group.
  #
  #
  # Args:
  # - description: A string description.
  #
  # Returns:
  # - description: the new description if successful
  #

  # Test the example code that we have in the API documentation.
  def test_set_description_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]

     # Add the group to the entities in the model
     group = entities.add_group

     # Get the entities within the group
     entities2 = group.entities

     # Add a face to within the group
     face = entities2.add_face pts
     group.description = "This is a Group with a 2d Face"
     description = group.description
     if (description)
       UI.messagebox description
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_set_description_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_set_description_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_set_description_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # Test that the set description method works with strings.
  def test_set_description_works_with_string
    obj = Sketchup.active_model.entities.add_group
    messy_string = 'TestString!@#%^*&(*_[]}{:"":><.,?>/.\|'
    obj.description = messy_string
    result = obj.description
    expected = messy_string
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    Group.entities
  # @file                rgroup.cpp
  #
  # The entities method is used to retrieve a collection of entities in
  # the group.
  #
  #
  #
  # Args:
  #
  # Returns:
  # - entities: an Entities object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_entities_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the group to the entities in the model
     group = entities.add_group

     # Get the entities within the group
     entities2 = group.entities

     # Add a face to within the group
     face = entities2.add_face pts
     entities = group.entities
     if (entities)
       UI.messagebox entities
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_entities_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_entities_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_entities_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # Test that the entities method returns an Entities object.
  def test_entities_returns_entities_obj
    obj = Sketchup.active_model.entities.add_group
    ents = obj.entities
    result = ents.class
    expected = Sketchup::Entities
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    Group.remove_observer
  # @file                rgroup.cpp
  #
  # The remove_observer method is used to remove an observer from the
  # current object.
  #
  #
  # Args:
  # - observer: An observer.
  #
  # Returns:
  # - : true if successful, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_remove_observer_api_example
    observer = Object.new
    assert_nothing_raised do
     group = Sketchup.active_model.entities[0]
     if group != nil
       if group.typename == "Group"
         status = group.remove_observer observer
       end
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_remove_observer_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_remove_observer_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_remove_observer_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    Group.description
  # @file                rgroup.cpp
  #
  # The description method is used to retrieve the description for the
  # group.
  #
  #
  # Args:
  #
  # Returns:
  # - description: a string description if successful
  #

  # Test the example code that we have in the API documentation.
  def test_description_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the group to the entities in the model
     group = entities.add_group

     # Get the entities within the group
     entities2 = group.entities

     # Add a face to within the group
     face = entities2.add_face pts
     group.description = "This is a Group with a 2d Face"
     description = group.description
    end
  end

  # Test edgecases for values passed to this method.
  #def test_description_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_description_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_description_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    Group.explode
  # @file                rgroup.cpp
  #
  # The explode method is used to explode the group into individual
  # entities.
  #
  #
  #
  # Args:
  #
  # Returns:
  # - entities: an Entities object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_explode_api_example
    assert_nothing_raised do
     # Add a group to the model.
     group = Sketchup.active_model.entities.add_group
     group.entities.add_line([0,0,0],[100,100,100])

     UI.messagebox "Grouped"
     status = group.explode
     if (status)
       UI.messagebox "Exploded Group"
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_explode_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_explode_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_explode_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    Group.transform
  # @file                rgroup.cpp
  #
  # The transform! method is used to apply a transformation to a group.
  #
  #
  # Args:
  # - transform: A Transformation object.
  #
  # Returns:
  # - group: a transformed group object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_transform_api_example
    assert_nothing_raised do
     point = Geom::Point3d.new 500,500,500
     t = Geom::Transformation.new point
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]

     # Add the group to the entities in the model
     group = entities.add_group

     # Get the entities within the group
     entities2 = group.entities

     # Add a face to within the group
     face = entities2.add_face pts
     UI.messagebox "Group before Move"
     group = group.transform! t
     if (group)
       UI.messagebox "Group after move"
       UI.messagebox group
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_transform_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_transform_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_transform_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    Group.to_component
  # @file                rgroup.cpp
  #
  # The to_component method is used to convert the group to a component.
  #
  #
  # Args:
  # - none: Undefined.
  #
  # Returns:
  # - : a component object
  #

  # Test the example code that we have in the API documentation.
  def test_to_component_api_example
    assert_nothing_raised do
     # Add a group to the model.
     group = Sketchup.active_model.entities.add_group
     group.entities.add_line([0,0,0],[100,100,100])

     # change the group to a component instance
     group.to_component
    end
  end

  # Test edgecases for values passed to this method.
  #def test_to_component_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_to_component_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_to_component_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Group.copy
  # @file                rgroup.cpp
  #
  # The copy method is used to create a new Group object that is a copy of
  # the group.
  #
  #
  # Args:
  #
  # Returns:
  # - group: a new Group object
  #

  # Test the example code that we have in the API documentation.
  def test_copy_api_example
    assert_nothing_raised do
     # Add a group to the model.
     group = Sketchup.active_model.entities.add_group
     group.entities.add_line([0,0,0],[100,100,100])
     group2 = group.copy
    end
  end

  # Test edgecases for values passed to this method.
  #def test_copy_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_copy_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_copy_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    Group.name
  # @file                rgroup.cpp
  #
  # The name method is used to retrieve the name of the group.
  #
  #
  # Args:
  #
  # Returns:
  # - name: The name of the group if successful
  #

  # Test the example code that we have in the API documentation.
  def test_name_api_example
    assert_nothing_raised do
     # Add a group to the model.
     group = Sketchup.active_model.entities.add_group
     group.entities.add_line([0,0,0],[100,100,100])
     group.name = "A Line"
     name = group.name
    end
  end

  # Test edgecases for values passed to this method.
  #def test_name_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_name_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_name_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    Group.locked=
  # @file                rgroup.cpp
  #
  # The locked= method is used to lock a group.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if the is locked. False if the group is
  # not locked.
  #

  # Test the example code that we have in the API documentation.
  def test_set_locked_api_example
    assert_nothing_raised do
     # Add a group to the model.
     group = Sketchup.active_model.entities.add_group
     group.entities.add_line([0,0,0],[100,100,100])
     status = group.locked = true
    end
  end

  # Test edgecases for values passed to this method.
  #def test_set_locked_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_set_locked_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_set_locked_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    Group.locked?
  # @file                rgroup.cpp
  #
  # The locked? method is used to determine if a group is locked.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if the component instance is locked.
  # False if the instance is not locked.
  #

  # Test the example code that we have in the API documentation.
  def test_locked_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]

     # Add the group to the entities in the model
     group = entities.add_group
     status = group.locked?
     UI.messagebox status
    end
  end

  # Test edgecases for values passed to this method.
  #def test_locked_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_locked_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_locked_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Group.transform!
  # @file                rgroup.cpp
  #
  # The transform! method is used to apply a transformation to a group.
  #
  #
  # Args:
  # - transform: A Transformation object.
  #
  # Returns:
  # - group: a transformed group object if successful.
  #

  # Test the example code that we have in the API documentation.
  def test_transform_inplace_api_example
    assert_nothing_raised do
      point = Geom::Point3d.new 500,500,500
      t = Geom::Transformation.new point
      depth = 100
      width = 100
      model = Sketchup.active_model
      entities = model.active_entities
      pts = []
      pts[0] = [0, 0, 0]
      pts[1] = [width, 0, 0]
      pts[2] = [width, depth, 0]
      pts[3] = [0, depth, 0]

      # Add the group to the entities in the model
      group = entities.add_group

      # Get the entities within the group
      entities2 = group.entities

      # Add a face to within the group
      face = entities2.add_face pts
      UI.messagebox "Group before Move"
      group = group.transform! t
      if (group)
       UI.messagebox "Group after move"
       UI.messagebox group
      else
       UI.messagebox "Failure"
      end
    end
  end

  def test_transform_inplace_edgecases
    point = Geom::Point3d.new 0,0,0
    t = Geom::Transformation.new point
    depth = 100
    width = 100
    model = Sketchup.active_model
    entities = model.active_entities
    pts = []
    pts[0] = [0, 0, 0]
    pts[1] = [width, 0, 0]
    pts[2] = [width, depth, 0]
    pts[3] = [0, depth, 0]

    # Add the group to the entities in the model
    group = entities.add_group

    # Get the entities within the group
    entities2 = group.entities

    # Add a face to within the group
    face = entities2.add_face pts
    group = group.transform! t
    assert_not_nil(group)
  end

  def test_transform_inplace_bad_params
    point = Geom::Point3d.new 0,0,0
    t = Geom::Transformation.new point
    depth = 100
    width = 100
    model = Sketchup.active_model
    entities = model.active_entities
    pts = []

    # Add the group to the entities in the model
    group = entities.add_group

    # Get the entities within the group
    entities2 = group.entities

    assert_raise(ArgumentError) do
      group = group.transform! pts
    end

    assert_raise(TypeError) do
      group2 = group.transform! "bad param"
    end
  end

  # ---------------------------------------------------------------------------
  # Solid Tools tests
  # @par Ruby Method:    Group.intersect
  # @file                rgroup.cpp
  #
  # The intersect method is used to compute the boolean intersection of two
  # instances representing manifold solid volumes (this - arg).
  # If the specified objects (this and arg) do not represent manifold volumes,
  # this method fails.

  # @version             SketchUp 8.0
  # @return              the resultant group if the two objects (this and arg)
  #                      represent manifold solids and the operation succeeds
  #                      otherwise Qnil is returned.
  def test_intersect
    model = Sketchup.active_model
    entities = model.entities
    pts = []
    pts[0] = [0, 0, 0]
    pts[1] = [100, 0, 0]
    pts[2] = [100, 100, 0]
    pts[3] = [0, 100, 0]

    #Test group.intersect
    entities.clear!
    group1 = entities.add_group
    # Add the face to the entities in the group
    face = group1.entities.add_face pts
    status = face.pushpull -100, true
    group2 = group1.copy
    point = Geom::Point3d.new 50,50,50
    t = Geom::Transformation.new point
    group2.move! t
    intersection = group1.intersect(group2)
    golden = entities.add_group
    pts1 = []
    pts1[0] = [0, 0, 0]
    pts1[1] = [50, 0, 0]
    pts1[2] = [50, 50, 0]
    pts1[3] = [0, 50, 0]

    # Add the face to the entities in the group
    face = golden.entities.add_face pts1
    status = face.pushpull -50, true
    assert_equal(true, golden.equals?(intersection), 'group.intersect failed' )

  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Group.union
  # @file                rgroup.cpp

  # The union method is used to compute the boolean union of the two instances
  # representing manifold solid volumes (this | arg).
  # If the specified objects (this and arg) do not represent manifold volumes,
  # this method fails.

  # @version             SketchUp 8.0
  # @return              the resultant group if the two objects (this and arg)
  #                      represent manifold solids and the operation succeeds
  #                      otherwise Qnil is returned
  def test_union
    model = Sketchup.active_model
    entities = model.entities
    pts = []
    pts[0] = [0, 0, 0]
    pts[1] = [100, 0, 0]
    pts[2] = [100, 100, 0]
    pts[3] = [0, 100, 0]

    #Test group.union
    entities.clear!
    group1 = entities.add_group
    # Add the face to the entities in the group
    face = group1.entities.add_face pts
    status = face.pushpull -100, true
    group2 = group1.copy
    point = Geom::Point3d.new 50,50,0
    t = Geom::Transformation.new point
    group2.move! t
    union = group1.union(group2)
    golden = entities.add_group
    pts1 = []
    pts1[0] = [0, 0, 0]
    pts1[1] = [100, 0, 0]
    pts1[2] = [100, 50, 0]
    pts1[3] = [150, 50, 0]
    pts1[4] = [150, 150, 0]
    pts1[5] = [50, 150, 0]
    pts1[6] = [50, 100, 0]
    pts1[7] = [0, 100, 0]
    # Add the face to the entities in the group
    face = golden.entities.add_face pts1
    status = face.pushpull -100, true
    assert_equal(true, golden.equals?(union), 'group.union failed' )
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    Group.subtract
  # @file                rgroup.cpp

  # The subtract method is used to compute the boolean difference of the two
  # instances representing manifold solid volumes (this - arg).
  # If the specified objects (this and arg) do not represent manifold volumes,
  # this method fails.

  # @version             SketchUp 8.0
  # @return              the resultant group if the two objects (this and arg)
  #                      represent manifold solids and the operation succeeds
  #                      otherwise nil is returned.
  def test_subtract
    model = Sketchup.active_model
    entities = model.entities
    pts = []
    pts[0] = [0, 0, 0]
    pts[1] = [100, 0, 0]
    pts[2] = [100, 100, 0]
    pts[3] = [0, 100, 0]

    #Test group.subtract
    entities.clear!
    group1 = entities.add_group
    # Add the face to the entities in the group
    face = group1.entities.add_face pts
    status = face.pushpull -100, true
    group2 = group1.copy
    point = Geom::Point3d.new 50,50,0
    t = Geom::Transformation.new point
    group2.move! t
    difference = group2.subtract(group1)
    golden = entities.add_group
    pts1 = []
    pts1[0] = [0, 0, 0]
    pts1[1] = [100, 0, 0]
    pts1[2] = [100, 50, 0]
    pts1[3] = [50, 50, 0]
    pts1[4] = [50, 100, 0]
    pts1[5] = [0, 100, 0]
    # Add the face to the entities in the group
    face = golden.entities.add_face pts1
    status = face.pushpull -100, true
    assert_equal(true, golden.equals?(difference), 'group.subtract failed' )
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Group.trim
  # @file                rgroup.cpp

  # The trim method is used to compute the (non-destructive) boolean
  # difference of the two instances representing manifold solid volumes
  # (this - arg).  If the specified objects (this and arg) do not represent
  # manifold volumes, this method fails.

  # @version             SketchUp 8.0
  # @return              the resultant group if the two objects (this and arg)
  #                      represent manifold solids and the operation succeeds
  #                      otherwise nil is returned.
  def test_trim
    model = Sketchup.active_model
    entities = model.entities
    pts = []
    pts[0] = [0, 0, 0]
    pts[1] = [100, 0, 0]
    pts[2] = [100, 100, 0]
    pts[3] = [0, 100, 0]

    #Test group.trim
    entities.clear!
    group1 = entities.add_group
    # Add the face to the entities in the group
    face = group1.entities.add_face pts
    status = face.pushpull -100, true
    group2 = group1.copy
    point = Geom::Point3d.new 50,50,0
    t = Geom::Transformation.new point
    group2.move! t
    difference = group2.trim(group1)
    golden = entities.add_group
    pts1 = []
    pts1[0] = [0, 0, 0]
    pts1[1] = [100, 0, 0]
    pts1[2] = [100, 50, 0]
    pts1[3] = [50, 50, 0]
    pts1[4] = [50, 100, 0]
    pts1[5] = [0, 100, 0]
    # Add the face to the entities in the group
    face = golden.entities.add_face pts1
    status = face.pushpull -100, true
    assert_equal(true, golden.equals?(difference), 'group.trim failed' )
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    Group.split
  # @file                rgroup.cpp

  # The split method is used to compute the boolean split (map overlay)
  # of the two instances representing manifold solid volumes (this - arg).
  # If the specified objects (this and arg) do not represent manifold volumes,
  # this method fails.

  # @version             SketchUp 8.0
  # @return              a vector (array) of the three resultant groups if the
  #                      two objects (this and arg) represent manifold solids
  #                      and the operation succeeds otherwise nil is returned.
  #
  #                      The 3 groups are as follows:
  #                        The intersection of volume 1 & volume 2
  #                        The difference of volume 1 - volume 2
  #                        The reverse difference of volume 2 - volume 1
  def test_split
    model = Sketchup.active_model
    entities = model.entities
    pts = []
    pts[0] = [0, 0, 0]
    pts[1] = [100, 0, 0]
    pts[2] = [100, 100, 0]
    pts[3] = [0, 100, 0]
    #Test group.split
    entities.clear!
    group1 = entities.add_group
    # Add the face to the entities in the group
    face = group1.entities.add_face pts
    status = face.pushpull -100, true
    group2 = group1.copy
    point = Geom::Point3d.new 50,50,0
    t = Geom::Transformation.new point
    group2.move! t
    split_groups = group1.split(group2)
    golden1 = entities.add_group
    pts1 = []
    pts1[0] = [0, 0, 0]
    pts1[1] = [100, 0, 0]
    pts1[2] = [100, 50, 0]
    pts1[3] = [50, 50, 0]
    pts1[4] = [50, 100, 0]
    pts1[5] = [0, 100, 0]
    # Add the face to the entities in the group
    face = golden1.entities.add_face pts1
    status = face.pushpull -100, true

    golden2 = entities.add_group
    pts2 = []
    pts2[0] = [50, 0, 0]
    pts2[1] = [100, 0, 0]
    pts2[2] = [100, 100, 0]
    pts2[3] = [0, 100, 0]
    pts2[4] = [0, 50, 0]
    pts2[5] = [50, 50, 0]
    # Add the face to the entities in the group
    face = golden2.entities.add_face pts2
    status = face.pushpull -100, true

    golden3 = entities.add_group
    pts3 = []
    pts3[0] = [0, 0, 0]
    pts3[1] = [50, 0, 0]
    pts3[2] = [50, 50, 0]
    pts3[3] = [0, 50, 0]
    # Add the face to the entities in the group
    face = golden3.entities.add_face pts3
    status = face.pushpull -100, true
    # This "if" logic is necessary because the order of the differences is
    # random...
    if(golden1.equals?(split_groups[0]))
      #if golden1 == split_group[0], then golden2 must == split_group[1].
      assert_equal(true, golden2.equals?(split_groups[1]),
                   'group.split(2) failed' )
    else
      #if golden1 != split_group[0], then golden1 must == split_group[1] and
      #   golden2 must == split_group[0].
      assert_equal(true, golden1.equals?(split_groups[1]),
                   'group.split(1) failed' )
      assert_equal(true, golden2.equals?(split_groups[0]),
                   'group.split(2) failed' )
    end
    assert_equal(true, golden3.equals?(split_groups[2]),
                 'group.split(3) failed' )
  end

  # ---------------------------------------------------------------------------
  # @par Ruby Method:    Group.outer_shell
  # @file                rgroup.cpp

  # The outer_shell method is used to compute the outer shell of the two
  # instances representing manifold solid volumes (this || arg).
  # If the specified objects (this and arg) do not represent manifold volumes,
  # this method fails.

  # @version             SketchUp 8.0
  # @return              the resultant group if the two objects (this and arg)
  #                      represent manifold solids and the operation succeeds
  #                      otherwise nil is returned.
 def test_outer_shell
    model = Sketchup.active_model
    entities = model.entities
    pts = []
    pts[0] = [0, 0, 0]
    pts[1] = [100, 0, 0]
    pts[2] = [100, 100, 0]
    pts[3] = [0, 100, 0]

    #Test group.outer_shell
    entities.clear!
    group1 = entities.add_group
    # Add the face to the entities in the group
    face = group1.entities.add_face pts
    status = face.pushpull -100, true
    group2 = group1.copy
    point = Geom::Point3d.new 50,50,0
    t = Geom::Transformation.new point
    group2.move! t
    outer_shell = group1.outer_shell(group2)
    golden = entities.add_group
    pts1 = []
    pts1[0] = [0, 0, 0]
    pts1[1] = [100, 0, 0]
    pts1[2] = [100, 50, 0]
    pts1[3] = [150, 50, 0]
    pts1[4] = [150, 150, 0]
    pts1[5] = [50, 150, 0]
    pts1[6] = [50, 100, 0]
    pts1[7] = [0, 100, 0]
    # Add the face to the entities in the group
    face = golden.entities.add_face pts1
    status = face.pushpull -100, true
    assert_equal(true, golden.equals?(outer_shell), 'group.outer_shell failed')
  end
end
