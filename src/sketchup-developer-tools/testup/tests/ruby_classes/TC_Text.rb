# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Text object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Text contains unit tests for the Text class.
#
# API Object::       Text
# C++ File::         rtext.cpp
# Parent Class::     Drawingelement
# Version::          SketchUp 6.0
#
# The Text class contains method to manipulate a Text entity object.
#
class TC_Text < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Text.point=
  # @file                rtext.cpp
  #
  # The point= method is used to set the point associated with the text.
  #
  #
  # Args:
  # - point3d: A Point3d object.
  #
  # Returns:
  # - status: true if successful, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_get_set_point_api_example
    entities = Sketchup.active_model.active_entities
    entities.clear!

	location = Geom::Point3d.new [0.5, 0.5, 0.5]
	entities.add_text("Blah, blah, blah!", location)
 	the_text = entities[0]
 
    # positive coordinates
    success = the_text.point = [0.5, 1.0, 1.5]
    assert(success, 'Failed test_get_set_point_api_example - Failed setting text location')
    
    location = the_text.point;
    assert_equal(location.x, 0.5, 'Failed test_get_set_point_api_example - Bad X coordinate')
    assert_equal(location.y, 1.0, 'Failed test_get_set_point_api_example - Bad Y coordinate')
    assert_equal(location.z, 1.5, 'Failed test_get_set_point_api_example - Bad Z coordinate')
    
    # negative coordinates
    success = the_text.point = [-0.5, -1.0, -1.5]
    assert(success, 'Failed test_get_set_point_api_example - Failed setting text location')
    
    location = the_text.point;
    assert_equal(location.x, -0.5, 'Failed test_get_set_point_api_example - Bad X coordinate')
    assert_equal(location.y, -1.0, 'Failed test_get_set_point_api_example - Bad Y coordinate')
    assert_equal(location.z, -1.5, 'Failed test_get_set_point_api_example - Bad Z coordinate')
    
    # the origin
    success = the_text.point = [0.0, 0.0, 0.0]
    assert(success, 'Failed setting text location')
    
    location = the_text.point;
    assert_equal(location.x, 0.0, 'Bad X coordinate')
    assert_equal(location.y, 0.0, 'Bad Y coordinate')
    assert_equal(location.z, 0.0, 'Bad Z coordinate')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Text.display_leader=
  # @file                rtext.cpp
  #
  # The display_leader= method accepts true or false for whether to
  # display the leader.
  #
  # Leader text that is not displayed is set to Hidden type.
  #
  #
  # Args:
  # - status: true if you want to display the leader text, false if you do
  # not want to display the leader text.
  #
  # Returns:
  # - status: the status that you set.
  #
  # Test the example code that we have in the API documentation.
  def test_set_display_leader_api_example
    # create the text entity
    entities = Sketchup.active_model.active_entities
    entities.clear!
	entities.add_text "Blah, blah, blah!", [0.5, 0.5, 0.5], [0.2, 0.2, 0.2]
 	the_text = entities[0]
 
	show = the_text.display_leader = true
	assert(show, 'Failed in test_set_display_leader')
	
	show = the_text.display_leader = false
	assert(!show, 'Failed in test_set_display_leader')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Text.display_leader?
  # @file                rtext.cpp
  #
  # The display_leader? method returns the status of the leader.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if the leader is being displayed, false
  # if it is not displayed.
  #

  # Test the example code that we have in the API documentation.
  def test_display_leader_api_example
    # create the text entity
    entities = Sketchup.active_model.active_entities
    entities.clear!
	entities.add_text "Blah, blah, blah!", [0.5, 0.5, 0.5], [0.2, 0.2, 0.2]
 	the_text = entities[0]
 	
	show = the_text.display_leader = true
	is_showing = the_text.display_leader?
	
	assert(is_showing, 'Failed in test_get_display_leader')
	
	show = the_text.display_leader = false
	is_showing = the_text.display_leader?
	assert(!is_showing, 'Failed in test_set_display_leader')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Text.arrow_type=
  # @file                rtext.cpp
  #
  # The arrow_type= method sets the arrow type used for leader text.
  #
  # Valid arrow types are 0 for none, 2 for dot, 3 for closed arrow, 4
  # for open arrow.
  #
  #
  # Args:
  # - type: A numerical representation of the type of arrow to be set.
  #
  # Returns:
  # - arrow: a numerical representation for the type of
  # arrow.
  #

  # Test the example code that we have in the API documentation.
  def test_set_arrow_type_api_example
    # create the text entity
    
    # create the text entity
    entities = Sketchup.active_model.active_entities
    entities.clear!
	entities.add_text "Blah, blah, blah!", [0.5, 0.5, 0.5], [0.2, 0.2, 0.2]
 	the_text = entities[0]
    
    the_text.arrow_type = 0
    arrow_type = the_text.arrow_type
    
    assert_equal(arrow_type, 0 , 'Failed in test_set_arrow_type_api_example')
    
    # type = 1 is the 'magic' dimension line tick arrow type
    arrow_type = the_text.arrow_type = 1
    assert_equal(arrow_type, 1, 'Failed in test_set_arrow_type_api_example')
    arrow_type = the_text.arrow_type
    assert_equal(arrow_type, 1, 'Failed in test_set_arrow_type_api_example')
    
    arrow_type = the_text.arrow_type = 2
    assert_equal(arrow_type, 2, 'Failed in test_set_arrow_type_api_example')
    arrow_type = the_text.arrow_type
    assert_equal(arrow_type, 2, 'Failed in test_set_arrow_type_api_example')
    
    arrow_type = the_text.arrow_type = 3
    assert_equal(arrow_type, 3, 'Failed in test_set_arrow_type_api_example')
    arrow_type = the_text.arrow_type
    assert_equal(arrow_type, 3, 'Failed in test_set_arrow_type_api_example')
    
    arrow_type = the_text.arrow_type = 4
    assert_equal(arrow_type, 4, 'Failed in test_set_arrow_type_api_example')
    arrow_type = the_text.arrow_type
    assert_equal(arrow_type, 4, 'Failed in test_set_arrow_type_api_example')
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_set_arrow_type_bad_params
    # create the text entity
    entities = Sketchup.active_model.active_entities
    entities.clear!
	entities.add_text("Blah, blah, blah!", [0.5, 0.5, 0.5], [0.2, 0.2, 0.2])
 	the_text = entities[0]
    
    assert_raise RangeError do
      arrow_type = the_text.arrow_type = 5
    end
  end

=begin
  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Text.vector
  # @file                rtext.cpp
  #
  # The vector method is used to get the vector associated with the text.
  #
  #
  # Args:
  #
  # Returns:
  # - vector: a Vector3d object.
  #

  # Test the example code that we have in the API documentation.
  def test_vector_api_example
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_nothing_raised do
     vector = text.vector
    end
    assert_equal('expected', 'result',
                 'Failed in test_vector' )
  end

  # Test edgecases for values passed to this method.
  def test_vector_edgecases
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_equal('expected', 'result',
                 'Failed in test_vector_edgecases' )
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_vector_bad_params
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_raise RuntimeError do
      # bad arguments here that should cause errors
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Text.set_text
  # @file                rtext.cpp
  #
  # The set_text method is used to set the text within a Text object
  # without recording an Undo operation.
  #
  #
  # Args:
  # - textstring: The string to be set within the Text object.
  #
  # Returns:
  # - text: the Text object
  #

  # Test the example code that we have in the API documentation.
  def test_set_text_api_example
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_nothing_raised do
     text = text.set_text "This is another text"
    end
    assert_equal('expected', 'result',
                 'Failed in test_set_text' )
  end

  # Test edgecases for values passed to this method.
  def test_set_text_edgecases
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_equal('expected', 'result',
                 'Failed in test_set_text_edgecases' )
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_set_text_bad_params
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_raise RuntimeError do
      # bad arguments here that should cause errors
    end
  end

=end
=begin
  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Text.text=
  # @file                rtext.cpp
  #
  # The text= method is used to set the string version of a Text object.
  #
  #
  # Args:
  #
  # Returns:
  # - textstring: the newly set text
  #

  # Test the example code that we have in the API documentation.
  def test_set_text_api_example
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_nothing_raised do
     textstring = text.text= "text"
    end
    assert_equal('expected', 'result',
                 'Failed in test_set_text' )
  end

  # Test edgecases for values passed to this method.
  def test_set_text_edgecases
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_equal('expected', 'result',
                 'Failed in test_set_text_edgecases' )
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_set_text_bad_params
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_raise RuntimeError do
      # bad arguments here that should cause errors
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Text.line_weight=
  # @file                rtext.cpp
  #
  # The line_weight= method sets the line weight in pixels.
  #
  # Default line weight is 1.
  #
  #
  # Args:
  # - weight: The line weight to be set (in pixels).
  #
  # Returns:
  # - : The line weight that has been set.
  #

  # Test the example code that we have in the API documentation.
  def test_set_line_weight_api_example
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_nothing_raised do
     newweight = text.line_weight = 4
    end
    assert_equal('expected', 'result',
                 'Failed in test_set_line_weight' )
  end

  # Test edgecases for values passed to this method.
  def test_set_line_weight_edgecases
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_equal('expected', 'result',
                 'Failed in test_set_line_weight_edgecases' )
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_set_line_weight_bad_params
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_raise RuntimeError do
      # bad arguments here that should cause errors
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Text.has_leader?
  # @file                rtext.cpp
  #
  # The has_leader method is used to determine if the Text object has a
  # leader.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if the Text object has a leader. False if
  # the Text object does not have a leader.
  #

  # Test the example code that we have in the API documentation.
  def test_has_leader_api_example
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_nothing_raised do
     status = text.has_leader
    end
    assert_equal('expected', 'result',
                 'Failed in test_has_leader' )
  end

  # Test edgecases for values passed to this method.
  def test_has_leader_edgecases
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_equal('expected', 'result',
                 'Failed in test_has_leader_edgecases' )
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_has_leader_bad_params
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_raise RuntimeError do
      # bad arguments here that should cause errors
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Text.line_weight
  # @file                rtext.cpp
  #
  # The line_weight method returns a line weight in number of pixels.
  #
  # Defalt line weight is 1.
  #
  #
  # Args:
  #
  # Returns:
  # - lineweight: the line weight in pixels
  #

  # Test the example code that we have in the API documentation.
  def test_line_weight_api_example
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_nothing_raised do
     weight = text.line_weight
    end
    assert_equal('expected', 'result',
                 'Failed in test_line_weight' )
  end

  # Test edgecases for values passed to this method.
  def test_line_weight_edgecases
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_equal('expected', 'result',
                 'Failed in test_line_weight_edgecases' )
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_line_weight_bad_params
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_raise RuntimeError do
      # bad arguments here that should cause errors
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Text.arrow_type
  # @file                rtext.cpp
  #
  # The arrow_type method retrieves the current arrow type used for the
  # leader text.
  #
  # Valid arrow types are 0 for none, 2 for dot, 3 for closed arrow, 4
  # for open arrow.
  #
  #
  # Args:
  #
  # Returns:
  # - arrow: a numerical representation for the type of
  # arrow.
  #

  # Test the example code that we have in the API documentation.
  def test_arrow_type_api_example
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_nothing_raised do
     type = text.arrow_type=0
    end
    assert_equal('expected', 'result',
                 'Failed in test_arrow_type' )
  end

  # Test edgecases for values passed to this method.
  def test_arrow_type_edgecases
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_equal('expected', 'result',
                 'Failed in test_arrow_type_edgecases' )
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_arrow_type_bad_params
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_raise RuntimeError do
      # bad arguments here that should cause errors
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Text.vector=
  # @file                rtext.cpp
  #
  # The vector= method is used to set the vector associated with the text.
  #
  #
  # Args:
  # - vector: A Vector3d object.
  #
  # Returns:
  # - success: true if successful.
  #

  # Test the example code that we have in the API documentation.
  def test_set_vector_api_example
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_nothing_raised do
     vector = text.vector
    end
    assert_equal('expected', 'result',
                 'Failed in test_set_vector' )
  end

  # Test edgecases for values passed to this method.
  def test_set_vector_edgecases
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_equal('expected', 'result',
                 'Failed in test_set_vector_edgecases' )
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_set_vector_bad_params
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_raise RuntimeError do
      # bad arguments here that should cause errors
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Text.leader_type=
  # @file                rtext.cpp
  #
  # The leader_type = method sets the leader type.
  #
  # Valid leader types are 0 for none, 1 for View based, and 2 for
  # Pushpin
  #
  #
  # Args:
  # - type: A numerical value representing the leader type to be set.
  #
  # Returns:
  # - leader: a numerical value representing the leader type
  # you just set.
  #

  # Test the example code that we have in the API documentation.
  def test_set_leader_type_api_example
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_nothing_raised do
     leader = text.leader_type=1
    end
    assert_equal('expected', 'result',
                 'Failed in test_set_leader_type' )
  end

  # Test edgecases for values passed to this method.
  def test_set_leader_type_edgecases
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_equal('expected', 'result',
                 'Failed in test_set_leader_type_edgecases' )
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_set_leader_type_bad_params
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_raise RuntimeError do
      # bad arguments here that should cause errors
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Text.text
  # @file                rtext.cpp
  #
  # The text method is used to retrieve the string version of a Text
  # object.
  #
  #
  # Args:
  #
  # Returns:
  # - textstring: the string representation of the Text
  # object
  #

  # Test the example code that we have in the API documentation.
  def test_text_api_example
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_nothing_raised do
     textstring = text.text
    end
    assert_equal('expected', 'result',
                 'Failed in test_text' )
  end

  # Test edgecases for values passed to this method.
  def test_text_edgecases
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_equal('expected', 'result',
                 'Failed in test_text_edgecases' )
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_text_bad_params
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_raise RuntimeError do
      # bad arguments here that should cause errors
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Text.leader_type
  # @file                rtext.cpp
  #
  # The leader_type method retrieves the currently set leader type.
  #
  #
  # Args:
  # - leader: A numerical value representing the currently set leader
  # type.
  #
  # Returns:
  # - leader: a numerical value representing the currently
  # set leader type.
  #

  # Test the example code that we have in the API documentation.
  def test_leader_type_api_example
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_nothing_raised do
     leader = text.leader_type
    end
    assert_equal('expected', 'result',
                 'Failed in test_leader_type' )
  end

  # Test edgecases for values passed to this method.
  def test_leader_type_edgecases
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_equal('expected', 'result',
                 'Failed in test_leader_type_edgecases' )
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_leader_type_bad_params
    raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
    assert_raise RuntimeError do
      # bad arguments here that should cause errors
    end
  end
=end
end
