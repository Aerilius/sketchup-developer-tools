# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Length object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Length contains unit tests for the Length class.
#
# API Object::       Length
# C++ File::         runits.cpp
# Parent Class::     Object
# Version::          SketchUp 6.0
#
# Because length units are used so often in SketchUp, a special class has been
# added to make it easier to work with length values. The Length class is
# derived from the Float class. You can use a Length object any place that you
# would use a Float.
#
# Internally, all lengths in SketchUp are stored in inches. The Length class
# stores values in inches. A number of methods have been added to the Ruby
# Numeric class to do units conversions.
#
#
class TC_Length < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Length.>=
  # @file                runits.cpp
  #
  # The >= method is used to see if one length is greater than or equal to
  # another length.
  #
  # For example, if l1 = 1.0.inch and l2 = 1.000001.inch then l1 == l2 so
  # l1 >= l2 should return true. Also L1 <= l2 would return true.
  #
  #
  # Args:
  # - length1: A length value.
  # - length2: A length value.
  #
  # Returns:
  # - status: true if length1 is >= length2; false if
  # length1 is not >= length2
  #

  # Test the example code that we have in the API documentation.
  def test_greaterthanorequal_api_example
    assert_nothing_raised do
     length1 = 11.to_l
     length2 = 12.to_l
     if length2 >= length1
       UI.messagebox "Greater Than or Equal"
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_greaterthanorequal_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_greaterthanorequal_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_greaterthanorequal_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Length.>
  # @file                runits.cpp
  #
  # The > method is used to see if one length is greater than another
  # length.
  #
  # For example, if l1 = 1.0.inch and l2 = 1.000001.inch then l1 == l2 so
  # l1 > l2 should return false.
  #
  #
  # Args:
  # - length1: A length value.
  # - length2: A length value.
  #
  # Returns:
  # - status: true if length1 is > length2; false if length1
  # is not > length2
  #

  # Test the example code that we have in the API documentation.
  def test_greaterthan_api_example
    assert_nothing_raised do
     length1 = 11.to_l
     length2 = 12.to_l
     if length2 > length1
       UI.messagebox "Greater Than"
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_greaterthan_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_greaterthan_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_greaterthan_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Length.==
  # @file                runits.cpp
  #
  # The == method is used to see if one length is equal to another length.
  #
  # The equality comparison on Length values uses the default tolerance
  # that SketchUp uses for comparing lengths.
  #
  #
  # Args:
  # - length1: A length value.
  # - length2: A length value.
  #
  # Returns:
  # - status: true if length1 is == length2; false if
  # length1 is not == length2
  #

  # Test the example code that we have in the API documentation.
  def test_equals_api_example
    assert_nothing_raised do
     length1 = 20.to_l
     length2 = 30.to_l
     status = (length1 == length2)
    end
  end

  # Test edgecases for values passed to this method.
  #def test_equals_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_equals_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_equals_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Length.inspect
  # @file                runits.cpp
  #
  # The inspect method is used to retrieve an unformatted string for the
  # length.
  #
  #
  # Args:
  #
  # Returns:
  # - length: an unformatted length string
  #

  # Test the example code that we have in the API documentation.
  def test_inspect_api_example
    assert_nothing_raised do
     length = 55.to_l
     str = length.inspect
    end
  end

  # Test edgecases for values passed to this method.
  #def test_inspect_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_inspect_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_inspect_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Length.to_s
  # @file                runits.cpp
  #
  # Format a length as a String using the current units formatting
  # settings for the model.
  #
  #
  # Args:
  #
  # Returns:
  # - value: the float length value
  #

  # Test the example code that we have in the API documentation.
  def test_to_s_api_example
    assert_nothing_raised do
     length = 55.to_l
     s = length.to_s
    end
  end

  # Test edgecases for values passed to this method.
  #def test_to_s_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_to_s_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_to_s_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # Test that the entities method returns an Array object.
  def test_to_s_returns_string
    obj = 55.to_l
    s = obj.to_s
    result = s.class
    expected = String
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Length.<=
  # @file                runits.cpp
  #
  # The <= method is used to see if one length is less than or equal to
  # another length.
  #
  #
  # Args:
  # - length1: A length value.
  # - length2: A length value.
  #
  # Returns:
  # - status: true if length1 is <= length2; false if
  # length1 is not <= length2
  #

  # Test the example code that we have in the API documentation.
  def test_lessthanorequal_api_example
    assert_nothing_raised do
     length1 = 11.to_l
     length2 = 12.to_l
     if length2 <= length1
       UI.messagebox "Less Than or Equal"
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_lessthanorequal_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_lessthanorequal_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_lessthanorequal_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Length.<
  # @file                runits.cpp
  #
  # The < method is used to see if one length is less than another length.
  #
  # For example, if l1 = 1.0.inch and l2 = 1.000001.inch then l1 == l2 so
  # l1 < l2 should return false.
  #
  #
  # Args:
  # - length1: A length value.
  # - length2: A length value.
  #
  # Returns:
  # - status: true if length1 is < length2; false if
  # length1 is not < length2
  #

  # Test the example code that we have in the API documentation.
  def test_lessthan_api_example
    assert_nothing_raised do
     length1 = 11.to_l
     length2 = 12.to_l
     if length1 < length2
       UI.messagebox "Less than"
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_lessthan_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_lessthan_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_lessthan_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Length.to_f
  # @file                runits.cpp
  #
  # The to_f method is used to convert a length to a normal float.
  #
  #
  # Args:
  #
  # Returns:
  # - value: the float length value
  #

  # Test the example code that we have in the API documentation.
  def test_to_f_api_example
    assert_nothing_raised do
     length = 45.to_l
     f = length.to_f
    end
  end

  # Test edgecases for values passed to this method.
  #def test_to_f_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_to_f_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_to_f_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Length.<=>
  # @file                runits.cpp
  #
  # The <=> method is used to see if one length is less than equal or
  # greater than another length. Because we change == for Length to do a
  # test based on a tolerance, we also need to change <=> to also take
  # tolerance into account.
  #
  #
  # Args:
  # - length1: A length value.
  # - length2: A length value.
  #
  # Returns:
  # - : status
  #

  # Test the example code that we have in the API documentation.
  def test_sortcallback_api_example
    assert_nothing_raised do
     length1 = 11.to_l
     length2 = 12.to_l
     if length1 <=> length2
       UI.messagebox "Success"
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_sortcallback_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_sortcallback_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_sortcallback_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

end
