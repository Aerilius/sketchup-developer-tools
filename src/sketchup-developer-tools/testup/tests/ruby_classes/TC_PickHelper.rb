# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API PickHelper object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_PickHelper contains unit tests for the PickHelper class.
#
# API Object::       PickHelper
# C++ File::         rpickhelper.cpp
# Parent Class::     Object
# Version::          SketchUp 6.0
#
# The PickHelper class is used to pick entities that reside under the current
# cursor location. PickHelper and InputPoint are similar, but InputPoint also
# uses inferencing. You can retrieve a PickHelper object using the pick_helper
# method on a View object.
#
# Entities that are picked (found under the
# cursor when a mouse or keyboard event occurs), are called Pick Records and
# are placed in an indexed list.
#
class TC_PickHelper < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup

  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PickHelper.picked_edge
  # @file                rpickhelper.cpp
  #
  # The picked_edge method is used to retrieve the "best" Edge picked.
  #
  #
  # Args:
  #
  # Returns:
  # - edge: an Edge object if successful
  #

  

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PickHelper.test_point
  # @file                rpickhelper.cpp
  #
  # The test_point method is used to test a point to see if it would be
  # selected using the default or given pick aperture.
  #
  # In the first form, you must have initialized the PickHelper using the
  # init method. This is more efficient if you want to test a lot of
  # points using the same screen point.
  #
  # In the second and third forms, it initializes the PickHelper using a
  # screen point and an optional pick aperture.
  #
  #
  # Args:
  # - point: Screen point.
  # - x: (optional) x position of pick.
  # - y: (optional) y position of pick.
  # - aperture: (optional) aperture in pixels.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_test_point_api_example
    
    assert_nothing_raised do
     pickhelper = Sketchup.active_model.active_view.pick_helper
     pt = Geom::Point3d.new 0,0,0
     x = 10
     y = 20
     aperture = 10
     ok = pickhelper.test_point(pt)
     ok = pickhelper.test_point pt, x, y
     ok = pickhelper.test_point pt, x, y, aperture
    end
  end



  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PickHelper.transformation_at
  # @file                rpickhelper.cpp
  #
  # The transformation_at method is used to get a transformation at a
  # specific index in the pick helper.
  #
  # The index represents the depth (whether the transformation is
  # encapsulated in a component or group). A depth of 1 represents no
  # encapsulation.
  #
  #
  # Args:
  # - index: The index where the transformation should be retrieved.
  #
  # Returns:
  # - transformation: the transformation found
  #

  # Test the example code that we have in the API documentation.
  def test_transformation_at_api_example
    assert_nothing_raised do
     ph = Sketchup.active_model.active_view.pick_helper
     ph.do_pick 1,1
     t = ph.transformation_at 1
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PickHelper.leaf_at
  # @file                rpickhelper.cpp
  #
  # The leaf_at method retrieves the deepest thing in a pick path.
  #
  # For example, if you have a face that is within a component that is
  # within another component, leaf_at returns the face.
  #
  #
  # Args:
  # - index: A number from 1 to number of items picked.
  #
  # Returns:
  # - entity: the leaf entity
  #

  # Test the example code that we have in the API documentation.
  def test_leaf_at_api_example
    phnew = nil
    assert_nothing_raised do
     ph = Sketchup.active_model.active_view.pick_helper
     # Returns nil
     phnew = ph.leaf_at 1
    end
    assert_equal(nil, phnew,
                 'Failed in test_leaf_at' )
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PickHelper.element_at
  # @file                rpickhelper.cpp
  #
  # The element_at method is used to retrieve a specific entity in the
  # list of picked elements.
  #
  #
  #
  # Args:
  # - index: A number from 0 to number of items picked.
  #
  # Returns:
  # - entity: the entity at the index position in the list
  # of picked entities.
  #

  # Test the example code that we have in the API documentation.
  def test_element_at_api_example
    assert_nothing_raised do
     ph = Sketchup.active_model.active_view.pick_helper
     ph.do_pick 100, 100
     # Returns the element at a specific spot in the list of
     # elements picked.
     element = ph.element_at 0
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PickHelper.do_pick
  # @file                rpickhelper.cpp
  #
  # The do_pick method is used to perform the initial pick. This method is
  # generally called before any other methods in the PickHelper class.
  #
  # Returns the number of entities picked. The x and y values are the
  # screen coordinates of the point at which would want to do a pick.
  #
  #
  # Args:
  # - x: X screen coordinate for the pick.
  # - y: Y screen coordinate for the pick.
  #
  # Returns:
  # - numpicked: the number of entities picked
  #

  # Test the example code that we have in the API documentation.
  def test_do_pick_api_example
    assert_nothing_raised do
     ph = Sketchup.active_model.active_view.pick_helper
     num = ph.do_pick(100, 100)
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PickHelper.view
  # @file                rpickhelper.cpp
  #
  # The view method is used to get the view associated with the
  # PickHelper.
  #
  #
  # Args:
  #
  # Returns:
  # - view: the associated view
  #

  # Test the example code that we have in the API documentation.
  def test_view_api_example
    view = nil
    assert_nothing_raised do
     ph = Sketchup.active_model.active_view.pick_helper
     number = ph.count
     view = ph.view
    end
    assert_equal(view, Sketchup.active_model.active_view,
                 'Failed in test_view_api_example' )
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PickHelper.all_picked
  # @file                rpickhelper.cpp
  #
  # The all_picked method is used to get an array of elements in the pick.
  #
  #
  # Args:
  #
  # Returns:
  # - elements: the array of elements in the pick.
  #

  # Test the example code that we have in the API documentation.
  def test_all_picked_api_example
    t = nil
    assert_nothing_raised do
     ph = Sketchup.active_model.active_view.pick_helper
     ph.do_pick 1,1
     t = ph.all_picked
    end
    assert_equal('Array', t.class.to_s,
                 'Failed in test_all_picked_api_example' )
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PickHelper.depth_at
  # @file                rpickhelper.cpp
  #
  # The depth_at method retrieves the depth of one of the currently picked
  # entities in the list of pick records.
  #
  # Returns 1 if element is outside a component or group.
  #
  #
  # Args:
  # - index: A number from 1 to number of items picked.
  #
  # Returns:
  # - depth: the depth of the entity if successful
  #

  # Test the example code that we have in the API documentation.
  def test_depth_at_api_example
    assert_nothing_raised do
     ph = Sketchup.active_model.active_view.pick_helper
     ph.do_pick 1,1
     depth = ph.depth_at 1
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PickHelper.path_at
  # @file                rpickhelper.cpp
  #
  # The path_at method is used to retrieve the entire path for an entity
  # in the pick list (as an array).
  #
  #
  # Args:
  # - index: A number from 1 to number of items picked.
  #
  # Returns:
  # - array: an array of entities including the leaf
  #

  # Test the example code that we have in the API documentation.
  def test_path_at_api_example
    path = 'foo'
    assert_nothing_raised do
     ph = Sketchup.active_model.active_view.pick_helper
     path = ph.path_at 1
    end
    assert_equal(nil, path,
                 'Failed in test_path_at_api_example' )
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PickHelper.picked_face
  # @file                rpickhelper.cpp
  #
  # The picked_face method is used to retrieve the best face picked.
  #
  # Returns nil if there were no faces picked. You must have called
  # do_pick before calling this method.
  #
  #
  # Args:
  #
  # Returns:
  # - face: a Face object if successful.
  #

  # Test the example code that we have in the API documentation.
  def test_picked_face_api_example
    assert_nothing_raised do
     ph = Sketchup.active_model.active_view.pick_helper
     ph.do_pick 1,1
     best = ph.picked_face
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PickHelper.init
  # @file                rpickhelper.cpp
  #
  # The init method is used to initialize the PickHelper for testing
  # points.
  #
  # You do not normally need to call this method, but you can use this if
  # you want to call test_point on a lot of points.
  #
  # If the optional aperture is given, it is given in pixels.
  #
  #
  # Args:
  # - x: X screen coordinate for the pick.
  # - y: Y screen coordinate for the pick.
  # - aperture: (optional) aperture in pixels.
  #
  # Returns:
  # - pickhelper: a PickHelper object
  #

  # Test the example code that we have in the API documentation.
  def test_init_api_example
    ph = nil
    phnew = nil
    assert_nothing_raised do
     ph = Sketchup.active_model.active_view.pick_helper
     phnew = ph.init 1, 1
    end
    assert_equal(ph, phnew,
                 'Failed in test_init_api_example' )
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PickHelper.pick_segment
  # @file                rpickhelper.cpp
  #
  # The pick_segment method is used to pick a segment of a polyline curve
  # that is defined by an array of points.
  #
  # If you click on a point in a polyline curve, the index of the point
  # in the curve is returned (starting at 0). If you click on a segment in
  # the polyline curve, the index of the segment is returned. Segments
  # start at index -1 (for the segment connecting the first two points)
  # and increase by a factor of -1 (for example, the segment connecting
  # second and third point is -2).
  #
  #
  # Args:
  # - array_or_list: A series of Point3d objects in the polyline as a list
  # of parameters or an array containing Point3d objects.
  # - aperture: (optional) aperture in pixels.
  #
  # Returns:
  # - index: an index of the point in the array if you
  # clicked on a point or an index of a segment if you
  # clicked on a segment (if successful)
  #

  # Test the example code that we have in the API documentation.
  def test_pick_segment_api_example
    assert_nothing_raised do
     point1 = Geom::Point3d.new 0,0,0
     point2 = Geom::Point3d.new 10,0,0
     ph = Sketchup.active_model.active_view.pick_helper  # Returns -1 or 0
     path = ph.pick_segment point1, point2
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PickHelper.count
  # @file                rpickhelper.cpp
  #
  # The count method is used to count the number of entities picked
  # (number of pick records)
  #
  #
  # Args:
  #
  # Returns:
  # - number: the number of entities picked
  #

  # Test the example code that we have in the API documentation.
  def test_count_api_example
    number = nil
    assert_nothing_raised do
     pickhelper = Sketchup.active_model.active_view.pick_helper
     number = pickhelper.count
    end
    assert_equal(0, number,
                 'Failed in test_count_api_example' )
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PickHelper.picked_element
  # @file                rpickhelper.cpp
  #
  # The picked_element method retrieves the best drawing element, that is
  # not an edge or a face, picked.
  #
  # Returns nil if there was nothing picked. You must have called do_pick
  # before calling this method.
  #
  #
  # Args:
  #
  # Returns:
  # - element: a drawing element that is not an edge or face
  # if successful
  #

  # Test the example code that we have in the API documentation.
  def test_picked_element_api_example
    assert_nothing_raised do
     ph = Sketchup.active_model.active_view.pick_helper
     ph.do_pick 1,1
     best = ph.picked_element
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    PickHelper.best_picked
  # @file                rpickhelper.cpp
  #
  # The best_picked method is used to retrieve the "best" entity picked
  # (entity that you would have picked if you were using the select tool).
  #
  # You must have called do_pick prior to calling this method.
  #
  #
  # Args:
  #
  # Returns:
  # - entity: the best picked entity
  #

  # Test the example code that we have in the API documentation.
  def test_best_picked_api_example
    assert_nothing_raised do
     ph = Sketchup.active_model.active_view.pick_helper
     ph.do_pick 1,1
     best = ph.best_picked
    end
  end

end
