# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Numeric object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Numeric contains unit tests for the Numeric class.
#
# API Object::       Numeric
# C++ File::         runits.cpp
# Parent Class::     Object
# Version::          SketchUp 6.0
#
# A number of methods have been added to the Ruby Numeric class to do units
# conversions.
#
#
class TC_Numeric < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Numeric.to_yard
  # @file                runits.cpp
  #
  # The to_yard method is used to convert from inches to yards.
  #
  #
  #
  # Args:
  #
  # Returns:
  # - yards: a value in yards if successful
  #

  # Test the example code that we have in the API documentation.
  def test_to_yard_api_example
    assert_nothing_raised do
     inches = 10000
     yards = inches.to_yard
    end
  end

  # Test edgecases for values passed to this method.
  #def test_to_yard_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_to_yard_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_to_yard_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Numeric.inch
  # @file                runits.cpp
  #
  # The inch method converts a number to a length. This method is
  # functionally identical to the to_l method.
  #
  #
  # Args:
  #
  # Returns:
  # - length: a Length object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_inch_api_example
    assert_nothing_raised do
     length = 100
     inches = length.inch
    end
  end

  # Test edgecases for values passed to this method.
  #def test_inch_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_inch_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_inch_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Numeric.cm
  # @file                runits.cpp
  #
  # The cm method is used to convert from centimeters to inches.
  #
  #
  # Args:
  #
  # Returns:
  # - inches: a value in inches if successful
  #

  # Test the example code that we have in the API documentation.
  def test_cm_api_example
    assert_nothing_raised do
     cm = 10
     inches = cm.cm
    end
  end

  # Test edgecases for values passed to this method.
  #def test_cm_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_cm_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_cm_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Numeric.m
  # @file                runits.cpp
  #
  # The m method is used to convert meters to inches.
  #
  #
  #
  # Args:
  #
  # Returns:
  # - inches: a value in inches if successful
  #

  # Test the example code that we have in the API documentation.
  def test_m_api_example
    assert_nothing_raised do
     meters = 1
     inches = meters.m
    end
  end

  # Test edgecases for values passed to this method.
  #def test_m_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_m_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_m_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Numeric.mm
  # @file                runits.cpp
  #
  # The mm method is used to convert a number to millimeters.
  #
  # It returns a Length value which is the same length as the given
  # value. For example len = 25.4.mm returns 1 inch.
  #
  #
  # Args:
  #
  # Returns:
  # - mm: a value in millimeters if successful
  #

  # Test the example code that we have in the API documentation.
  def test_mm_api_example
    assert_nothing_raised do
     value = 10
     mm = value.mm
    end
  end

  # Test edgecases for values passed to this method.
  #def test_mm_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_mm_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_mm_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Numeric.to_mile
  # @file                runits.cpp
  #
  # The to_mile method is used to convert from inches to miles.
  #
  #
  # Args:
  #
  # Returns:
  # - miles: a value in miles if successful
  #

  # Test the example code that we have in the API documentation.
  def test_to_mile_api_example
    assert_nothing_raised do
     inches = 10000
     miles = inches.to_mile
    end
  end

  # Test edgecases for values passed to this method.
  #def test_to_mile_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_to_mile_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_to_mile_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Numeric.km
  # @file                runits.cpp
  #
  # The km method is used to convert from kilometers to inches.
  #
  #
  # Args:
  #
  # Returns:
  # - inches: a value in inches if successful
  #

  # Test the example code that we have in the API documentation.
  def test_km_api_example
    assert_nothing_raised do
     value = 1
     inches = value.km
    end
  end

  # Test edgecases for values passed to this method.
  #def test_km_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_km_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_km_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Numeric.mile
  # @file                runits.cpp
  #
  # The mile method is used to convert from miles to inches.
  #
  #
  # Args:
  #
  # Returns:
  # - inches: a value in inches if successful
  #

  # Test the example code that we have in the API documentation.
  def test_mile_api_example
    assert_nothing_raised do
     miles = 1
     inches = miles.mile
    end
  end

  # Test edgecases for values passed to this method.
  #def test_mile_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_mile_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_mile_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Numeric.yard
  # @file                runits.cpp
  #
  # The yard method is used to convert from yards to inches.
  #
  #
  # Args:
  #
  # Returns:
  # - inches: a value in inches if successful
  #

  # Test the example code that we have in the API documentation.
  def test_yard_api_example
    assert_nothing_raised do
     yards = 1.to_l
     inches = yards.yard
    end
  end

  # Test edgecases for values passed to this method.
  #def test_yard_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_yard_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_yard_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Numeric.radians
  # @file                runits.cpp
  #
  # The radians method is used to convert from radians to degrees.
  #
  # For example, 1.5707963267949.radians would return 90.0
  #
  #
  # Args:
  #
  # Returns:
  # - degrees: a value in degrees if successful
  #

  # Test the example code that we have in the API documentation.
  def test_radians_api_example
    assert_nothing_raised do
     radians = 1.5707963267949
     degrees = radians.radians
    end
  end

  # Test edgecases for values passed to this method.
  #def test_radians_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_radians_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_radians_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Numeric.degrees
  # @file                runits.cpp
  #
  # The degrees method is used to convert from degrees to radians.
  #
  # For example 90.degrees would return 1.5707963267949
  #
  #
  # Args:
  #
  # Returns:
  # - radians: a value in radians if successful
  #

  # Test the example code that we have in the API documentation.
  def test_degrees_api_example
    assert_nothing_raised do
     degrees = 90
     radians = degrees.degrees
    end
  end

  # Test edgecases for values passed to this method.
  #def test_degrees_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_degrees_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_degrees_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Numeric.to_feet
  # @file                runits.cpp
  #
  # The to_feet method is used to convert from inches to feet.
  #
  #
  # Args:
  #
  # Returns:
  # - feet: a value in feet if successful
  #

  # Test the example code that we have in the API documentation.
  def test_to_feet_api_example
    assert_nothing_raised do
     inches = 12
     feet = inches.to_feet
    end
  end

  # Test edgecases for values passed to this method.
  #def test_to_feet_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_to_feet_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_to_feet_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Numeric.to_inch
  # @file                runits.cpp
  #
  # The to_inch method converts from inches to inches.
  #
  # This does not change the value.
  #
  #
  # Args:
  #
  # Returns:
  # - inches: a value in inches if successful
  #

  # Test the example code that we have in the API documentation.
  def test_to_inch_api_example
    assert_nothing_raised do
     inches = 12
     inches = inches.to_inch
    end
  end

  # Test edgecases for values passed to this method.
  #def test_to_inch_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_to_inch_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_to_inch_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Numeric.to_cm
  # @file                runits.cpp
  #
  # The to_cm method is used to convert from inches to centimeters.
  #
  #
  # Args:
  #
  # Returns:
  # - cm: a value in centimeters if successful
  #

  # Test the example code that we have in the API documentation.
  def test_to_cm_api_example
    assert_nothing_raised do
     inches = 1
     cm = inches.to_cm
    end
  end

  # Test edgecases for values passed to this method.
  #def test_to_cm_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_to_cm_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_to_cm_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Numeric.to_mm
  # @file                runits.cpp
  #
  # The to_mm method is used to convert from inches to millimeters.
  #
  #
  # Args:
  #
  # Returns:
  # - millimeters: a value in millimeters if successful
  #

  # Test the example code that we have in the API documentation.
  def test_to_mm_api_example
    assert_nothing_raised do
     inches = 1
     mm = inches.to_mm
    end
  end

  # Test edgecases for values passed to this method.
  #def test_to_mm_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_to_mm_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_to_mm_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Numeric.feet
  # @file                runits.cpp
  #
  # The feet method is used to convert from feet to inches.
  #
  #
  # Args:
  #
  # Returns:
  # - inches: a value in inches if successful
  #

  # Test the example code that we have in the API documentation.
  def test_feet_api_example
    assert_nothing_raised do
     feet = 1
     inches = feet.feet
    end
  end

  # Test edgecases for values passed to this method.
  #def test_feet_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_feet_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_feet_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Numeric.to_km
  # @file                runits.cpp
  #
  # The to_km method is used to convert from inches to kilometers.
  #
  #
  # Args:
  #
  # Returns:
  # - kilometers: a value in kilometers if successful
  #

  # Test the example code that we have in the API documentation.
  def test_to_km_api_example
    assert_nothing_raised do
     inches = 1
     km = inches.to_km
    end
  end

  # Test edgecases for values passed to this method.
  #def test_to_km_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_to_km_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_to_km_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Numeric.to_l
  # @file                runits.cpp
  #
  # The to_l is used to convert from a number to a length.
  #
  #
  # Args:
  #
  # Returns:
  # - length: a Length object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_to_l_api_example
    assert_nothing_raised do
     number = 12
     length = number.to_l
    end
  end

  # Test edgecases for values passed to this method.
  #def test_to_l_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_to_l_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_to_l_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Numeric.to_m
  # @file                runits.cpp
  #
  # The to_m method is used to convert from inches to meters.
  #
  #
  # Args:
  #
  # Returns:
  # - meters: a value in meters if successful
  #

  # Test the example code that we have in the API documentation.
  def test_to_m_api_example
    assert_nothing_raised do
     inches = 12
     meters = inches.to_m
    end
  end

  # Test edgecases for values passed to this method.
  #def test_to_m_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_to_m_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_to_m_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

end
