# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Layer object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Layer contains unit tests for the Layer class.
#
# API Object::       Layer
# C++ File::         rlayer.cpp
# Parent Class::     Entity
# Version::          SketchUp 6.0
#
# The Layer class contains methods modifying and extracting information for a
# layer.
#
#
class TC_Layer < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Layer.<=>
  # @file                rlayer.cpp
  #
  # The <=> method is used to compare two layers based on their names.
  # This is used for sorting.
  #
  # This is used for sorting.
  #
  #
  # Args:
  # - layer1: A Layer object.
  # - layer2: A Layer object.
  #
  # Returns:
  # - status: -1 if layer 1 is less than layer 2. 1 if layer
  # 2 is less than layer 1. 0 if layer 1 and layer 2 are
  # equal.
  #

  # Test the example code that we have in the API documentation.
  def test_sortcallback_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     layers = model.layers
     status = layers.add "test layer"
     layer1 = layers[0]
     layer2 = layers[1]
     status = layer1 <=> layer2
    end
  end

  # Test edgecases for values passed to this method.
  #def test_sortcallback_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_sortcallback_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_sortcallback_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Layer.==
  # @file                rlayer.cpp
  #
  # The == method is used to determine if two layers are the same.
  #
  #
  # Args:
  # - layer1: A Layer object.
  # - layer2: A Layer object.
  #
  # Returns:
  # - status: true if layer1 and layer2 are equal. false if
  # layer1 and layer2 are not equal.
  #

  # Test the example code that we have in the API documentation.
  def test_equals_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     layers = model.layers
     status = layers.add "test layer"
     layer1 = layers[0]
     layer2 = layers[1]
     status = layer1 == layer2
    end
  end

  # Test edgecases for values passed to this method.
  #def test_equals_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_equals_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_equals_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Layer.visible=
  # @file                rlayer.cpp
  #
  # The visible= method is used to set if the layer is visible.
  #
  #
  # Args:
  # - is_visible: The new visibility setting.
  #
  # Returns:
  #

  # Test the example code that we have in the API documentation.
  def test_set_visible_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     layers = model.layers
     status = layers.add "test layer"
     layer2 = layers[1]

     # Hide the layer.
     layer2.visible = false
    end
  end

  # Test edgecases for values passed to this method.
  #def test_set_visible_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_set_visible_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_set_visible_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Layer.visible?
  # @file                rlayer.cpp
  #
  # The visible? method is used to determine if the layer is visible.
  #
  #
  # Args:
  #
  # Returns:
  # - : true if the layer is visible
  #

  # Test the example code that we have in the API documentation.
  def test_visible_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     layers = model.layers
     status = layers.add "test layer"
     layer2 = layers[1]
     UI.messagebox(layer2.visible?)
    end
  end

  # Test edgecases for values passed to this method.
  #def test_visible_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_visible_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_visible_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Layer.page_behavior=
  # @file                rlayer.cpp
  #
  # The page_behavior= method is used to set the behavior of a layer for
  # newly created pages.
  #
  # You can also set these flags to control the visibility of a layer on
  # newly created pages.
  #
  # LAYER_USES_DEFAULT_VISIBILITY_ON_NEW_PAGES: 0x0000,
  # LAYER_IS_VISIBLE_ON_NEW_PAGES: 0x0010,
  # LAYER_IS_HIDDEN_ON_NEW_PAGES: 0x0020.
  #
  # To create a layer which is only visible on a single page, you can set
  # its page behavior flags to LAYER_HIDDEN_BY_DEFAULT |
  # LAYER_IS_HIDDEN_ON_NEW_PAGES
  #
  # When you Update a page (as opposed to creating a new page) the
  # current visibility of the layer is used.
  #
  # The visible= method is used to set the visibility of the layer.
  #
  #
  # Args:
  # - pagebehavior: Pagebehavior flags.
  #
  # Returns:
  # - pagebehavior: a decimal number representing the
  # current behavior of the layer when a new page is
  # created (see comments).
  #

  # Test the example code that we have in the API documentation.
  def test_set_page_behavior_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     layers = model.layers
     status = layers.add "test layer"
     layer2 = layers[1]
     # Set to LAYER_HIDDEN_BY_DEFAULT
     pb = layer2.page_behavior=(LAYER_HIDDEN_BY_DEFAULT |
       LAYER_IS_HIDDEN_ON_NEW_PAGES)
    end
  end

  # Test edgecases for values passed to this method.
  #def test_set_page_behavior_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_set_page_behavior_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_set_page_behavior_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Layer.name
  # @file                rlayer.cpp
  #
  # The name method is used to retrieve the name of the layer.
  #
  #
  # Args:
  #
  # Returns:
  # - name: the name of the Layer object
  #

  # Test the example code that we have in the API documentation.
  def test_name_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     layers = model.layers
     status = layers.add "test layer"
     layer2 = layers[1]
     name = layer2.name
    end
  end

  # Test edgecases for values passed to this method.
  #def test_name_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_name_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_name_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Layer.page_behavior
  # @file                rlayer.cpp
  #
  # The page_behavior method is used to retrieve the behavior of the layer
  # when new pages are created.
  #
  # These flags define the behavior of a Layer on a page. Currently there
  # are two behaviors defined.
  #
  # A page keeps a list of layers that do not have their default
  # behavior. If a layer is not in that list, then it is set to its
  # default visibility determined by one of these flags:
  #
  # LAYER_VISIBLE_BY_DEFAULT 0x0000,
  # LAYER_HIDDEN_BY_DEFAULT 0x0001.
  #
  #
  # Args:
  #
  # Returns:
  # - pagebehavior: a decimal number representing the
  # current behavior of the layer when a new page is
  # created (see comments).
  #

  # Test the example code that we have in the API documentation.
  def test_page_behavior_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     layers = model.layers
     status = layers.add "test layer"
     layer2 = layers[1]
     # Returns 0 which is LAYER_VISIBLE_BY_DEFAULT
     pb = layer2.page_behavior
    end
  end

  # Test edgecases for values passed to this method.
  #def test_page_behavior_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_page_behavior_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_page_behavior_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Layer.name=
  # @file                rlayer.cpp
  #
  # The name= method is used to set the name of a layer.
  #
  #
  # Args:
  # - name: The new name for the Layer object.
  #
  # Returns:
  # - name: the newly set name
  #

  # Test the example code that we have in the API documentation.
  def test_set_name_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     layers = model.layers
     status = layers.add "test layer"
     layer2 = layers[1]
     name = layer2.name="new test layer"
    end
  end

  # Test edgecases for values passed to this method.
  #def test_set_name_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_set_name_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_set_name_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # Test that the set name method works with strings.
  def test_set_name_works_with_string
    obj = Sketchup.active_model.layers[1]
    messy_string = 'TestString!@#%^*&(*_[]}{:"":><.,?>/.\|'
    obj.name = messy_string
    result = obj.name
    expected = messy_string
    assert_equal(expected, result, 'Expected does not match result.')
  end


end
