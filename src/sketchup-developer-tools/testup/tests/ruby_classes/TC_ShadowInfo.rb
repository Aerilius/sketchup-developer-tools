# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API ShadowInfo object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_ShadowInfo contains unit tests for the ShadowInfo class.
#
# API Object::       ShadowInfo
# C++ File::         rshadowinfo.cpp
# Parent Class::     Entity
# Version::          SketchUp 6.0
#
# The ShadowInfo class contains method to extract the shadow information for a
# model. The majority of the shadow information returned exists in the Model
# Info > Location and Model Info > Shadows section of SketchUp. The following
# shadow information keys are maintained in SketchUp:
#
#   - City (in Model Info > Location -- City is called "Location" in the UI)
#   - Country (in Model Info > Location)
#   - Dark (in Model Info > Shadows)
#   - DaylightSavings
#   - DisplayNorth (in Model Info > Location > Show In Model checkbox)
#   - DisplayOnAllFaces (in Model Info > Shadows)
#   - DisplayOnGroundPlane (in Model Info > Shadows)
#   - DisplayShadows (in Model Info > Shadows)
#   - EdgeCastingShadows (in Model Info > Shadows)
#   - Latitude (in Model Info > Location > Set Custom Location)
#   - Light (in Model Info > Shadows)
#   - Longitude (in Model Info > Location > Set Custom Location)
#   - North Angle (in Model Info > Location)
#   - ShadowTime (in Model Info > Shadows -- In Time section)
#   - SunRise (Generated based on ShadowTime)
#   - SunSet (Generated based on ShadowTime)
#
class TC_ShadowInfo < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ShadowInfo.each
  # @file                rshadowinfo.cpp
  #
  # The each method iterates through all of the shadow information
  # key/value pairs.
  #
  #
  # Args:
  # - key: A variables that will hold each key as it is found.
  # - value: A variables that will hold each value as it is found.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_each_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     shadowinfo = model.shadow_info
     shadowinfo.each { |key, value|
       UI.messagebox(key.to_s + '=' + value.to_s)
     }
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ShadowInfo.each_pair
  # @file                rshadowinfo.cpp
  #
  # An alias for each. See ShadowInfo.each.
  #
  #
  # Args:
  #
  # Returns:
  # - : nil
  #

  

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ShadowInfo.[]
  # @file                rshadowinfo.cpp
  #
  # The [] method retrieves a value from the array of keys
  #
  #
  # Args:
  # - key: The key of the shadowinfo value to retrieve.
  #
  # Returns:
  # - value: the value that is retrieved.
  #

  # Test the example code that we have in the API documentation.
  def test_arrayget_api_example
    shadowinfo = Sketchup.active_model.shadow_info
    assert_nothing_raised do
     value = shadowinfo["Dark"]
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ShadowInfo.each_key
  # @file                rshadowinfo.cpp
  #
  # The each_key method iterates through all of the shadow information
  # keys.
  #
  #
  # Args:
  # - key: Variable to hold each key as they are found.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_each_key_api_example
    shadowinfo = Sketchup.active_model.shadow_info
    assert_nothing_raised do
     shadowinfo.each_key { |key| UI.messagebox(key) }
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ShadowInfo.add_observer
  # @file                rshadowinfo.cpp
  #
  # The add_observer method is used to add an observer to the current
  # object.
  #
  #
  # Args:
  # - observer: An observer.
  #
  # Returns:
  # - : true if successful, false if unsuccessful.
  #


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ShadowInfo.keys
  # @file                rshadowinfo.cpp
  #
  # The keys method is a class method that returns an array with all of
  # the attribute keys
  #
  #
  # Args:
  #
  # Returns:
  # - keys: an array of keys
  #

  # Test the example code that we have in the API documentation.
  def test_keys_api_example
    
    assert_nothing_raised do
     keys = Sketchup::ShadowInfo.keys
    end

  end


  # Test that the entities method returns an Array object.
  def test_keys_returns_array
    obj = Sketchup.active_model.shadow_info
    keys = obj.keys
    result = keys.class
    expected = Array
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ShadowInfo.[]=
  # @file                rshadowinfo.cpp
  #
  # The set value []= method is used to set the value in the array of
  # shadow info options.
  #
  #
  # Args:
  # - key: The key of the shadowinfo value to set.
  # - value: The value to be set.
  #
  # Returns:
  # - value: the value that was set if successful, or false
  # if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_arrayset_api_example
   
    assert_nothing_raised do
     model = Sketchup.active_model
     shadowinfo = model.shadow_info
     value = shadowinfo["City"]
     UI.messagebox value
     value = shadowinfo["City"]="Denver, CO"
     UI.messagebox value
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ShadowInfo.remove_observer
  # @file                rshadowinfo.cpp
  #
  # The remove_observer method is used to remove an observer from the
  # current object.
  #
  #
  # Args:
  # - observer: An observer.
  #
  # Returns:
  # - : true if successful, false if unsuccessful.
  #


end
