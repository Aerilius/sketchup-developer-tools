# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API EdgeUse object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_EdgeUse contains unit tests for the EdgeUse class.
#
# API Object::       EdgeUse
# C++ File::         redgeuse.cpp
# Parent Class::     Entity
# Version::          SketchUp 6.0
#
# The EdgeUse class defines how an Edge is used in the definition of a Face.
#
#
class TC_EdgeUse < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    EdgeUse.face
  # @file                redgeuse.cpp
  #
  # The face method is used to retrieve the face used by this edge use.
  #
  #
  # Args:
  #
  # Returns:
  # - face: a Face object used by this edge use
  #

  # Test the example code that we have in the API documentation.
  def test_face_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     loop = face.outer_loop
     edgeuses = loop.edgeuses
     edgeuse = edgeuses[0]
     face = edgeuse.face
     if (face)
       UI.messagebox face
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_face_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_face_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_face_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    EdgeUse.edge
  # @file                redgeuse.cpp
  #
  # The edge method is used to retrieve the edge for the edge use.
  #
  #
  # Args:
  #
  # Returns:
  # - edge: an Edge object used by this edge use
  #

  # Test the example code that we have in the API documentation.
  def test_edge_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     loop = face.outer_loop
     edgeuses = loop.edgeuses
     edgeuse = edgeuses[0]
     edge = edgeuse.edge
     if (edge)
       UI.messagebox edge
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_edge_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_edge_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_edge_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    EdgeUse.partners
  # @file                redgeuse.cpp
  #
  # The partners method is used to retrieve all of the partner edge uses.
  # This method allows you to find all Faces that use an edge.
  #
  #
  #
  # Args:
  #
  # Returns:
  # - partners: an array of partner Edge Use objects.
  #

  # Test the example code that we have in the API documentation.
  def test_partners_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     pts2 = []
     pts2[0] = [100, 0, 0]
     pts2[1] = [200, 0, 0]
     pts2[2] = [200, 100, 0]
     pts2[3] = [100,100,0]
     # Add the face to the entities in the model
     face2 = entities.add_face pts2
     loop = face.outer_loop
     edgeuses = loop.edgeuses
     edgeuse = edgeuses[1]
     p = edgeuse.partners
     if (p)
       UI.messagebox p
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_partners_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_partners_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_partners_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    EdgeUse.next
  # @file                redgeuse.cpp
  #
  # The next method is used to retrieve the next edge use in a loop.
  #
  #
  # Args:
  #
  # Returns:
  # - next: the next EdgeUse object in a loop
  #

  # Test the example code that we have in the API documentation.
  def test_next_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     loop = face.outer_loop
     edgeuses = loop.edgeuses
     edgeuse = edgeuses[0]
     eunext = edgeuse.next
     if (eunext)
       UI.messagebox eunext
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_next_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_next_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_next_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    EdgeUse.reversed?
  # @file                redgeuse.cpp
  #
  # The reversed? method is used to determine if the edge is reversed in
  # this use.
  #
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if reversed, false if not reversed.
  #

  # Test the example code that we have in the API documentation.
  def test_reversed_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     loop = face.outer_loop
     edgeuses = loop.edgeuses
     edgeuse = edgeuses[0]
     status = edgeuse.reversed?
     if (status)
       UI.messagebox status
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_reversed_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_reversed_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_reversed_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    EdgeUse.end_vertex_normal
  # @file                redgeuse.cpp
  #
  # The end_vertex_normal method is used to retrieve the vertex normal for
  # the end point of this edgeuse.
  #
  #
  # Args:
  #
  # Returns:
  # - vector3D: a vector3d object if successful.
  #

  # Test the example code that we have in the API documentation.
  def test_end_vertex_normal_api_example
    assert_nothing_raised do
       depth = 100
       width = 100
       model = Sketchup.active_model
       entities = model.active_entities
       pts = []
       pts[0] = [0, 0, 0]
       pts[1] = [width, 0, 0]
       pts[2] = [width, depth, 0]
       pts[3] = [0, depth, 0]
       # Add the face to the entities in the model
       face = entities.add_face pts
       loop = face.outer_loop
       edgeuses = loop.edgeuses
       edgeuse = edgeuses[0]
       vector3d = edgeuse.end_vertex_normal
    end
  end

  # Test edgecases for values passed to this method.
  #def test_end_vertex_normal_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_end_vertex_normal_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_end_vertex_normal_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    EdgeUse.loop
  # @file                redgeuse.cpp
  #
  # The loop method is used to retrieve the loop for this edge use.
  #
  #
  # Args:
  #
  # Returns:
  # - loop: a Loop object that contains this edge use.
  #

  # Test the example code that we have in the API documentation.
  def test_loop_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     loop = face.outer_loop
     edgeuses = loop.edgeuses
     edgeuse = edgeuses[0]
     loop = edgeuse.loop
     if (loop)
       UI.messagebox loop
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_loop_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_loop_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_loop_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    EdgeUse.previous
  # @file                redgeuse.cpp
  #
  # The previous method is used to retrieve the previous edge use in a
  # loop.
  #
  #
  # Args:
  #
  # Returns:
  # - edgeuse: the previous Edge Use object in the loop
  #

  # Test the example code that we have in the API documentation.
  def test_previous_api_example
    assert_nothing_raised do
     depth = 100
     width = 100
     model = Sketchup.active_model
     entities = model.active_entities
     pts = []
     pts[0] = [0, 0, 0]
     pts[1] = [width, 0, 0]
     pts[2] = [width, depth, 0]
     pts[3] = [0, depth, 0]
     # Add the face to the entities in the model
     face = entities.add_face pts
     loop = face.outer_loop
     edgeuses = loop.edgeuses
     edgeuse = edgeuses[0]
     euprevious = edgeuse.previous
     if (euprevious)
       UI.messagebox euprevious
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_previous_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_previous_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_previous_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    EdgeUse.start_vertex_normal
  # @file                redgeuse.cpp
  #
  # The start_vertex_normal method is used to retrieve the vertex normal for the
  # start point of this edgeuse.
  #
  #
  # Args:
  #
  # Returns:
  # - vector3D: a vector3d object if successful.
  #

  # Test the example code that we have in the API documentation.
  def test_start_vertex_normal_api_example
    depth = 100
    width = 100
    model = Sketchup.active_model
    entities = model.active_entities
    pts = []
    pts[0] = [0, 0, 0]
    pts[1] = [width, 0, 0]
    pts[2] = [width, depth, 0]
    pts[3] = [0, depth, 0]
    # Add the face to the entities in the model
    face = entities.add_face pts
    loop = face.outer_loop
    edgeuses = loop.edgeuses
    edgeuse = edgeuses[0]
    assert_nothing_raised do
      vector3d = edgeuse.start_vertex_normal
    end
  end
end
