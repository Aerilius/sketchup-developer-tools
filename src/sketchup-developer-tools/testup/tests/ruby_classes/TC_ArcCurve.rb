# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API ArcCurve object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_ArcCurve contains unit tests for the ArcCurve class.
#
# API Object::       ArcCurve
# C++ File::         rcurve.cpp
# Parent Class::     Curve
# Version::          SketchUp 6.0
#
# An ArcCurve is a Curve that makes up part of a circle. This class can be
# treated as though it were a representation of a circle entity
#
#
class TC_ArcCurve < Test::Unit::TestCase

  # Clean up any entities so we don't get overlapping geometry that messes
  # with our results.
  #
  def setup
    erase_all()
  end
 
  # Some of the API examples attempt to draw arcs right on top of
  # each other, which causes validity check errors. So this is a method
  # that can be called at the beginning of a test to avoid that.
  def erase_all
    entities_to_erase = []
    for entity in Sketchup.active_model.entities
      entities_to_erase.push entity
    end

    for entity in entities_to_erase
      if entity.valid?
        entity.erase!
      end
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ArcCurve.plane
  # @file                rcurve.cpp
  #
  # The plane method is used to retrieve the plane of the arc.
  #
  # Refer to the Geom module for instructions to create a plane.
  #
  #
  # Args:
  #
  # Returns:
  # - plane: the plane of the arc if successful
  #

  # Test the example code that we have in the API documentation.
  def test_plane_api_example
    plane = nil
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 10
     edge = edgearray[0]
     arccurve = edge.curve
     plane = arccurve.plane
    end
    expected_plane = [0.0, 0.0, 1.0, 0.0]
    assert_equal(expected_plane, plane,
                 'The plane of the arc curve was not as expected.' )
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ArcCurve.end_angle
  # @file                rcurve.cpp
  #
  # The end_angle method is used to retrieve the angle of the end of the
  # arc measured from the X axis in radians.
  #
  #
  #
  # Args:
  #
  # Returns:
  # - angle: the angle of the end of the arc if successful
  #

  # Test the example code that we have in the API documentation.
  def test_end_angle_api_example
    end_angle = nil
    assert_nothing_raised do
     # Create a 1/2 circle perpendicular to the normal or Z axis
     center = Geom::Point3d.new
     normal = Geom::Vector3d.new 0,0,1
     xaxis = Geom::Vector3d.new 1,0,0
     start_a = 0.0
     end_a = Math::PI
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_arc center, xaxis, normal, 5, start_a, end_a
     edge = edgearray[0]
     arccurve = edge.curve
     end_angle = arccurve.end_angle
    end
    assert_equal(Math::PI, end_angle,
                 'Failed: end_angle != PI' )
  end

  # Test that circles have a consistent end angle of PI*2
  def test_end_angle_on_circle
    end_angle = nil
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 11
     edge = edgearray[0]
     arccurve = edge.curve
     end_angle = arccurve.end_angle
    end
    assert_equal(Math::PI*2, end_angle,
                 'Failed: end_angle != PI*2' )
  end

  # Test that arcs created with end angles so large that they become circles
  # are still reported as having a circle's standard end angle.
  def test_end_angle_large_angle
    end_angle = nil
    assert_nothing_raised do
     # Create a 1/2 circle perpendicular to the normal or Z axis
     center = Geom::Point3d.new 0,0,-30
     normal = Geom::Vector3d.new 0,0,1
     xaxis = Geom::Vector3d.new 1,0,0
     start_a = 0.0
     end_a = 3.0 * Math::PI # Large enough to make a circle
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_arc center, xaxis, normal, 5, start_a, end_a
     edge = edgearray[0]
     arccurve = edge.curve
     end_angle = arccurve.end_angle
    end
    assert_equal(Math::PI*2, end_angle,
                 'Failed: end_angle != PI*2' )
  end


  # Test that negative end angles get reported as negative
  def test_end_angle_negative_stays_negative
    end_angle = nil
    assert_nothing_raised do
     # Create a 1/2 circle perpendicular to the normal or Z axis
     center = Geom::Point3d.new 0,0,40
     normal = Geom::Vector3d.new 0,0,1
     xaxis = Geom::Vector3d.new 1,0,0
     start_a = 0.0
     end_a = -Math::PI
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_arc center, xaxis, normal, 5, start_a, end_a
     edge = edgearray[0]
     arccurve = edge.curve
     end_angle = arccurve.end_angle
    end
    assert_equal(-Math::PI, end_angle,
                 'Failed: end_angle != -PI' )
  end

=begin
  # Test that arcs created with end angles so far in the negative that they
  # become circles have end_angles equal to their creation start_angle.
  def test_end_angle_negative_large_angle
    end_angle = nil
    start_a = nil
    assert_nothing_raised do
     # Create a 1/2 circle perpendicular to the normal or Z axis
     center = Geom::Point3d.new 0,0,-30
     normal = Geom::Vector3d.new 0,0,1
     xaxis = Geom::Vector3d.new 1,0,0
     start_a = 1.0
     end_a = -3.0 * Math::PI # Large enough to make a circle
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_arc center, xaxis, normal, 5, start_a, end_a
     edge = edgearray[0]
     arccurve = edge.curve
     end_angle = arccurve.end_angle
    end
    assert_equal(1.0, end_angle,
                 'Failed: end_angle != PI*2' )
  end
=end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ArcCurve.yaxis
  # @file                rcurve.cpp
  #
  # The yaxis method is used to retrieve the Y axis of the coordinate
  # system for the curve.
  #
  #
  # Args:
  #
  # Returns:
  # - vector: a Vector3d object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_yaxis_api_example
    v = nil
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 10
     edge = edgearray[0]
     arccurve = edge.curve
     v = arccurve.yaxis
    end
    expected_yaxis = Geom::Vector3d.new 0,10,0
    assert_equal(expected_yaxis, v,
                 'Failed in test_yaxis' )
  end

  # Test that the reported yaxis length is equal to the radius of the curve.
  def test_yaxis_length_matches_radius
    axis = nil
    radius = 5
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, radius
     edge = edgearray[0]
     arccurve = edge.curve
     axis = arccurve.yaxis
    end
    assert_equal(radius, axis.length,
                 'Axis length does not match radius' )
  end

  # Test that the yaxis method returns a Vector3d object.
  def test_yaxis_returns_vector3d
    centerpoint = Geom::Point3d.new
    # Create a circle perpendicular to the normal or Z axis
    vector = Geom::Vector3d.new 0,0,1
    vector2 = vector.normalize!
    model = Sketchup.active_model
    entities = model.active_entities
    edgearray = entities.add_circle centerpoint, vector2, 50
    edge = edgearray[0]
    arccurve = edge.curve

    result = arccurve.yaxis.class
    expected = Geom::Vector3d
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ArcCurve.start_angle
  # @file                rcurve.cpp
  #
  # The start_angle method is used to retrieve the angle of the start of
  # the arc, measured from the X axis in radians.
  #
  #
  #
  # Args:
  #
  # Returns:
  # - angle: the angle of the start of the arc if successful
  #

  # Test the example code that we have in the API documentation.
  def test_start_angle_api_example
    start_angle = nil
    assert_nothing_raised do
     # Create a 1/4 circle, radius of 5, normal to the Z axis
     center = Geom::Point3d.new 0, 0, -1
     normal = Geom::Vector3d.new 0,0,1
     xaxis = Geom::Vector3d.new 1,0,0
     start_a = Math::PI/2
     end_a = Math::PI
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_arc center, xaxis, normal, 5, start_a, end_a
     edge = edgearray[0]
     arccurve = edge.curve
     start_angle = arccurve.start_angle
    end
    assert_equal(Math::PI/2, start_angle,
                 'Failed: start_angle != Math::PI/2' )
  end

  # Test that circles have a consistent start angle of 0
  def test_start_angle_on_circle
    start_angle = nil
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 11
     edge = edgearray[0]
     arccurve = edge.curve
     start_angle = arccurve.start_angle
    end
    assert_equal(0.0, start_angle,
                 'Failed: start_angle != PI*2' )
  end

  # Test that arcs created with end angles so large that they become circles
  # are still reported as having the start angle they were created from.
  def test_start_angle_large_angle
    start_angle = nil
    assert_nothing_raised do
     # Create a 1/2 circle perpendicular to the normal or Z axis
     center = Geom::Point3d.new 0,0,-30
     normal = Geom::Vector3d.new 0,0,1
     xaxis = Geom::Vector3d.new 1,0,0
     start_a = 0.5
     end_a = 3.0 * Math::PI # Large enough to make a circle
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_arc center, xaxis, normal, 5, start_a, end_a
     edge = edgearray[0]
     arccurve = edge.curve
     start_angle = arccurve.start_angle
    end
    assert_equal(0.5, start_angle,
                 'Failed: start_angle != 0.0' )
  end


  # Test that negative start angles get reported as negative
  def test_start_angle_negative_stays_negative
    start_angle = nil
    assert_nothing_raised do
     # Create a 1/2 circle perpendicular to the normal or Z axis
     center = Geom::Point3d.new 0,0,40
     normal = Geom::Vector3d.new 0,0,1
     xaxis = Geom::Vector3d.new 1,0,0
     start_a = -Math::PI/2
     end_a = Math::PI
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_arc center, xaxis, normal, 5, start_a, end_a
     edge = edgearray[0]
     arccurve = edge.curve
     start_angle = arccurve.start_angle
    end
    assert_equal(-Math::PI/2, start_angle,
                 'Failed: start_angle != -Math::PI/2' )
  end

=begin
  TODO(scottlininger): Note that this test passes, but that when run
  in SketchUp with validity checking on, illegal geometry is created.

  # Test that arcs created with end angles so far in the negative that they
  # become circles are still reported as having their creation start_angle.
  def test_start_angle_negative_large_angle
    start_angle = nil
    assert_nothing_raised do
     # Create a 1/2 circle perpendicular to the normal or Z axis
     center = Geom::Point3d.new 0,0,-30
     normal = Geom::Vector3d.new 0,0,1
     xaxis = Geom::Vector3d.new 1,0,0
     start_a = -Math::PI/2
     end_a = -4.0 * Math::PI # Large enough to make a circle
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_arc center, xaxis, normal, 5, start_a, end_a
     edge = edgearray[0]
     arccurve = edge.curve
     start_angle = arccurve.start_angle
    end
    assert_equal(-Math::PI/2, start_angle,
                 'Failed: start_angle != 0.0' )
  end
=end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ArcCurve.normal
  # @file                rcurve.cpp
  #
  # The normal method retrieves a Vector3d that is perpendicular to the
  # plane of the arc.
  #
  #
  # Args:
  #
  # Returns:
  # - vector: a Vector3d object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_normal_api_example
    erase_all()
    v = nil
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 10
     edge = edgearray[0]
     arccurve = edge.curve
     v = arccurve.normal
    end
    expected_normal = Geom::Vector3d.new 0,0,1
    assert_equal(expected_normal, v,
                 'Failed in test_normal' )
  end

  # Test that the normal is always reported with a length of 1 regardless of
  # radius.
  def test_normal_stays_with_length_1_regardless_of_radius
    erase_all()
    v = nil
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 100
     edge = edgearray[0]
     arccurve = edge.curve
     v = arccurve.normal
    end
    expected_normal = Geom::Vector3d.new 0,0,1
    assert_equal(expected_normal, v,
                 'Normal length != 1.0' )
  end

  # Test that the normal is always reported with a length of 1 regardless of
  # arc vs. circle
  def test_normal_stays_with_length_1_in_arcs
    erase_all()
    v = nil
    assert_nothing_raised do
     # Create a 1/2 circle perpendicular to the normal or Z axis
     center = Geom::Point3d.new 0,0,-30
     normal = Geom::Vector3d.new 0,0,1
     xaxis = Geom::Vector3d.new 1,0,0
     start_a = -Math::PI/2
     end_a = 4.0 * Math::PI # Large enough to make a circle
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_arc center, xaxis, normal, 5, start_a, end_a
     edge = edgearray[0]
     arccurve = edge.curve
     v = arccurve.normal
    end
    expected_normal = Geom::Vector3d.new 0,0,1
    assert_equal(expected_normal, v,
                 'Normal length != 1.0' )
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ArcCurve.radius
  # @file                rcurve.cpp
  #
  # The radius method is used to retrieve the radius of the arc.
  #
  #
  # Args:
  #
  # Returns:
  # - radius: the radius of the arc if successful
  #

  # Test the example code that we have in the API documentation.
  def test_radius_api_example
    radius = nil
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 10
     edge = edgearray[0]
     arccurve = edge.curve
     radius = arccurve.radius
    end
    assert_equal(10, radius,
                 'Failed in test_radius' )
  end

  # Test that arcs return the correct radius.
  def test_radius_in_arcs
    radius = nil
    assert_nothing_raised do
     # Create a 1/2 circle perpendicular to the normal or Z axis
     center = Geom::Point3d.new 0,0,-30
     normal = Geom::Vector3d.new 0,0,1
     xaxis = Geom::Vector3d.new 1,0,0
     start_a = -Math::PI/2
     end_a = 4.0 * Math::PI # Large enough to make a circle
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_arc center, xaxis, normal, 5, start_a, end_a
     edge = edgearray[0]
     arccurve = edge.curve
     radius = arccurve.radius
    end
    assert_equal(5, radius,
                 'Failed in test_radius' )
  end

  # Test that negative radiuses work.
  def test_arc_radius_after_creation_with_negative_radius
    radius = nil
    assert_nothing_raised do
     # Create a 1/2 circle perpendicular to the normal or Z axis
     center = Geom::Point3d.new 0,0,-30
     normal = Geom::Vector3d.new 0,0,1
     xaxis = Geom::Vector3d.new 1,0,0
     start_a = -Math::PI/2
     end_a = 4.0 * Math::PI # Large enough to make a circle
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_arc center, xaxis, normal, -5, start_a, end_a
     edge = edgearray[0]
     arccurve = edge.curve
     radius = arccurve.radius
    end
    assert_equal(5, radius,
                 'Failed in test_radius' )
  end

  # Test the radius is positive after creating a negative radius.
  def test_circle_radius_after_creation_with_negative_radius
    radius = nil
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, -10
     edge = edgearray[0]
     arccurve = edge.curve
     radius = arccurve.radius
    end
    assert_equal(10, radius,
                 'Failed in test_radius' )
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ArcCurve.xaxis
  # @file                rcurve.cpp
  #
  # The xaxis method is used to retrieve the X axis of the coordinate
  # system for the curve.
  #
  #
  # Args:
  #
  # Returns:
  # - vector: a Vector3d object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_xaxis_api_example
    v = nil
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 10
     edge = edgearray[0]
     arccurve = edge.curve
     v = arccurve.xaxis
    end
    expected_vector = Geom::Vector3d.new 10,0,0
    assert_equal(expected_vector, v,
                 'Failed in test_xaxis' )
  end

  # Test that the reported xaxis length is equal to the radius of the curve.
  def test_xaxis_length_matches_radius
    axis = nil
    radius = 5
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, radius
     edge = edgearray[0]
     arccurve = edge.curve
     axis = arccurve.xaxis
    end
    assert_equal(radius, axis.length,
                 'Axis length does not match radius' )
  end

  # Test that the yaxis method returns a Vector3d object.
  def test_xaxis_returns_vector3d
    centerpoint = Geom::Point3d.new
    # Create a circle perpendicular to the normal or Z axis
    vector = Geom::Vector3d.new 0,0,1
    vector2 = vector.normalize!
    model = Sketchup.active_model
    entities = model.active_entities
    edgearray = entities.add_circle centerpoint, vector2, 50
    edge = edgearray[0]
    arccurve = edge.curve

    result = arccurve.xaxis.class
    expected = Geom::Vector3d
    assert_equal(expected, result, 'Expected does not match result.')
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ArcCurve.center
  # @file                rcurve.cpp
  #
  # The center method is used to retrieve the Point3d that is at the
  # center of the circular arc.
  #
  #
  #
  # Args:
  #
  # Returns:
  # - point: a Point3d at the center of the arc if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_center_api_example
    point = nil
    assert_nothing_raised do
     centerpoint = Geom::Point3d.new 100.5,20,-100
     # Create a circle perpendicular to the normal or Z axis
     vector = Geom::Vector3d.new 0,0,1
     vector2 = vector.normalize!
     model = Sketchup.active_model
     entities = model.active_entities
     edgearray = entities.add_circle centerpoint, vector2, 10
     edge = edgearray[0]
     arccurve = edge.curve
     point = arccurve.center
    end
    expected_point = Geom::Point3d.new 100.5,20,-100
    assert_equal(expected_point, point,
                 'Failed in test_center' )
  end

  # Tests the is_polygon? method with a circle entity
  #
  def test_is_polygon_with_circle
    m = Sketchup.active_model
    ents = m.entities

    # Create a circle
    center = [0, 0, 0]
    normal = [0, 0, 1]
    radius = 20
    ents.add_circle center, normal, radius

    # Check circle edges
    m.entities.each do |e|
      if e.is_a? Sketchup::Edge and e.curve.respond_to? 'is_polygon?'
        assert_equal(false, e.curve.is_polygon?,
                     'Curve of circle edge should not be polygon.')
      end
    end
  end

  # Tests the is_polygon? method with a polygon entity
  #
  def test_is_polygon_with_polygon
    m = Sketchup.active_model
    ents = m.entities

    # Create a polygon
    center = [0, 0, 0]
    normal = [0, 0, 1]
    radius = 20
    nsides = 8
    ents.add_ngon center, normal, radius, nsides

    # Check poly edges
    m.entities.each do |e|
      if e.is_a? Sketchup::Edge and e.curve.respond_to? 'is_polygon?'
        assert_equal(true, e.curve.is_polygon?,
                     'Curve of polygon edge should be polygon.')
      end
    end
  end

  # Tests the is_polygon? method with a arc entity
  #
  def test_is_polygon_with_arc
    m = Sketchup.active_model
    ents = m.entities

    # Create an arc
    center = [0, 0, 0]
    xaxis = [1, 0, 0]
    normal = [0, 0, 1]
    radius = 20
    start_angle = 0
    end_angle = 180
    nsides = 6
    ents.add_arc center, xaxis, normal, radius, start_angle, end_angle, nsides

    # Check arc edges
    m.entities.each do |e|
      if e.is_a? Sketchup::Edge and e.curve.respond_to? 'is_polygon?'
        assert_equal(false, e.curve.is_polygon?,
                     'Curve of arc edge should not be polygon.')
      end
    end
  end

  # Tests the is_polygon? method with a curve entity
  #
  def test_is_polygon_with_curve
    m = Sketchup.active_model
    ents = m.entities

    # Create a curve
    pts = []
    pts.push [1, 4, 0]
    pts.push [3, 3, 0]
    pts.push [2, 3, 0]
    pts.push [0, 4, 0]
    pts.push [3, 2, 0]
    pts.push [3, -2, 0]
    pts.push [3, -3, 0]
    pts.push [2, -4, 0]
    pts.push [1, -4, 0]
    ents.add_curve pts

    # Check curve edges
    m.entities.each do |e|
      if e.is_a? Sketchup::Edge and e.curve.respond_to? 'is_polygon?'
        assert_equal(false, e.curve.is_polygon?,
                     'Curve of curve edge should not be polygon.')
      end
    end
  end

  # Tests the is_polygon? api documentation example
  #
  def test_is_polygon_api_example
    # For backwards compatibility, only run test if curve instance has
    # is_polygon? method
    if Sketchup::Curve.new().public_methods.include? 'is_polygon?'
      assert_nothing_raised do
        # Create a polygon and check its edge
        ents = Sketchup.active_model.entities
        ents.add_ngon [0, 0, 0], [0, 0, 1], 10, 6
        curve = nil
        ents.each { |e| curve = e.curve if e.is_a? Sketchup::Edge }
        is_poly = curve.is_polygon?
      end
    end
  end
end
