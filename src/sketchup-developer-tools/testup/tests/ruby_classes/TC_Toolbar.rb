# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Toolbar object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Toolbar contains unit tests for the Toolbar class.
#
# API Object::       Toolbar
# C++ File::         rtoolbar.cpp
# Parent Class::     Object
# Version::          SketchUp 6.0
#
# The Toolbar class contains methods to create and manipulate SketchUp
# toolbars in Ruby. Also see the Command object for details on creating
# "commands" which can be called from your toolbars.
#
class TC_Toolbar < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Toolbar.visible?
  # @file                rtoolbar.cpp
  #
  # The visible? method is used to find out if a toolbar is currently
  # visible.
  #
  #
  # Args:
  #
  # Returns:
  # - : true if visible
  #

  # Test the example code that we have in the API documentation.
  def test_visible_api_example
    visible = nil
    assert_nothing_raised do
      toolbar = UI::Toolbar.new "Test"
      visible = toolbar.visible?
    end
    assert_equal(true, visible, 'Failed in test_visible_api_example')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Toolbar.add_separator
  # @file                rtoolbar.cpp
  #
  # The add_separator method is used to add a line separator to the
  # toolbar.
  #
  #
  # Args:
  #
  # Returns:
  # - toolbar: the toolbar where the line separator was just
  # added
  #

  # Test the example code that we have in the API documentation.
  def test_add_separator_api_example
    toolbar = nil
    assert_nothing_raised do
      toolbar = UI::Toolbar.new "Test"
      toolbar = toolbar.add_separator
    end
    assert_not_nil(toolbar)
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Toolbar.new
  # @file                rtoolbar.cpp
  #
  # The new method creates a new Toolbar object.
  #
  #
  # Args:
  # - toolbarname: The name for the new toolbar.
  #
  # Returns:
  # - toolbar: the newly created toolbar object
  #

  # Test the example code that we have in the API documentation.
  def test_new_api_example
    toolbar = nil
    assert_nothing_raised do
      toolbar = UI::Toolbar.new "Test"
    end
    assert_not_nil(toolbar, 'Failed in test_new_api_example')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Toolbar.get_last_state
  # @file                rtoolbar.cpp
  #
  # The get_last_state method is used to determine if the toolbar is
  # hidden or visible in the user interface.
  #
  # Valid states are 1 for visible, 0 for hidden, -1 for never shown.
  #
  #
  # Args:
  #
  # Returns:
  # - state: the last state of the toolbar (see comments)
  #

  # Test the example code that we have in the API documentation.
  def test_get_last_state_api_example
    assert_nothing_raised do
      toolbar = UI::Toolbar.new "TestUsingUniqueName - #{Time.now}"
      state = toolbar.get_last_state
      # This is a new toolbar that has never been saved to the registry,
      # so we expect to get back a -1
      assert_equal(-1, state, 'Failed in test_get_last_state_api_example')
    end
  end

  # Test a boundary case. When bug 3221793 is fixed this test case will fail,
  # and will need to be fixed.
  def test_get_last_state_edgecase
      tb_1 = UI::Toolbar.new "TestUsingDupName"
      tb_2 = UI::Toolbar.new "TestUsingDupName"
      tb_1.hide
      assert_equal(tb_1.get_last_state, tb_2.get_last_state,
                   "failed in test_get_last_state_edgecase")
      tb_2.show
      assert_equal(tb_1.get_last_state, tb_2.get_last_state,
                   "failed in test_get_last_state_edgecase")
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Toolbar.restore
  # @file                rtoolbar.cpp
  #
  # The restore method is used to reposition the toolbar to its previous
  # location and show if not hidden.
  #
  #
  # Args:
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_restore_api_example
    assert_nothing_raised do
      toolbar = UI::Toolbar.new "Test"
      toolbar.restore
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Toolbar.show
  # @file                rtoolbar.cpp
  #
  # The show method is used to display the toolbar in the user interface.
  #
  #
  # Args:
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_show_api_example
    assert_nothing_raised do
     toolbar = UI::Toolbar.new "Test"
     # This toolbar icon simply displays Hello World on the screen
     cmd = UI::Command.new("Test") {
       UI.messagebox "Hello World"
     }
     cmd.small_icon = "ToolPencilSmall.png"
     cmd.large_icon = "ToolPencilLarge.png"
     cmd.tooltip = "Test Toolbars"
     cmd.status_bar_text = "Testing the toolbars class"
     cmd.menu_text = "Test"
     toolbar = toolbar.add_item cmd
     toolbar.show
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Toolbar.add_item
  # @file                rtoolbar.cpp
  #
  # The add_item method is used to add an item to the toolbar.
  #
  #
  # Args:
  # - command: A Command object representing the command to add to the
  # toolbar.
  #
  # Returns:
  # - toolbar: the toolbar where the command was just added
  #

  # Test the example code that we have in the API documentation.
  def test_add_item_api_example
    assert_nothing_raised do
      toolbar = UI::Toolbar.new "Test"
      # This toolbar icon simply displays Hello World on the screen
      command = UI::Command.new("Test") {
        UI.messagebox "Hello World"
      }
      toolbar = toolbar.add_item command
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Toolbar.hide
  # @file                rtoolbar.cpp
  #
  # The hide method is used to hide the toolbar on the user interface.
  #
  #
  # Args:
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_hide_api_example
    assert_nothing_raised do
     toolbar = UI::Toolbar.new "Test"
     # This toolbar icon simply displays Hello World on the screen
     cmd = UI::Command.new("Test") {
       UI.messagebox "Hello World"
     }
     cmd.small_icon = "ToolPencilSmall.png"
     cmd.large_icon = "ToolPencilLarge.png"
     cmd.tooltip = "Test Toolbars"
     cmd.status_bar_text = "Testing the toolbars class"
     cmd.menu_text = "Test"
     toolbar = toolbar.add_item cmd
     toolbar.show
     UI.messagebox "Toolbar Showing"
     toolbar.hide
     UI.messagebox "Toolbar Hidden"
    end
  end

  def test_get_name
    assert_nothing_raised do
      toolbar = UI::Toolbar.new "Test"
      name = toolbar.name
      assert_equal('Test', name, 'Failed in test_get_name')
    end
  end

end
