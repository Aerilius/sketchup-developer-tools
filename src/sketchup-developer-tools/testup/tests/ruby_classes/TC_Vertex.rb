# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Vertex object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Vertex contains unit tests for the Vertex class.
#
# API Object::       Vertex
# C++ File::         rvertex.cpp
# Parent Class::     Entity
# Version::          SketchUp 6.0
#
# A Vertex. A Vertex represents the end of an Edge or a point inside a Face.
#
class TC_Vertex < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vertex.common_edge
  # @file                rvertex.cpp
  #
  # The common_edge method is used to find a common edge that is defined
  # by this vertex and another vertex
  #
  #
  # Args:
  # - vertex2: A Vertex object.
  #
  # Returns:
  # - edge: an Edge object common to both vertices if
  # successful. Returns nil if there is no edge between the
  # two vertices.
  #

  # Test the example code that we have in the API documentation.
  def test_common_edge_api_example
    
    assert_nothing_raised do
    
     edge = Sketchup.active_model.entities.add_line([0,0,0],[1,0,0])
     # returns array of vertices that make up the line
     vertices = edge.vertices
     vertex1 = vertices[0]
     vertex2 = vertices[1]
     edge = vertex1.common_edge vertex2
     if (edge)
       UI.messagebox edge
     else
       UI.messagebox "Failure"
     end
    end
  end

  

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vertex.faces
  # @file                rvertex.cpp
  #
  # The faces method is used to retrieve an Array of faces that use the
  # vertex.
  #
  #
  # Args:
  #
  # Returns:
  # - faces: an Array of faces that use the vertex if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_faces_api_example
    
    assert_nothing_raised do
     edge = Sketchup.active_model.entities.add_line([0,0,0],[1,0,0])
     # Returns array of vertices that make up the line.
     vertices = edge.vertices
     vertex1 = vertices[0]
     faces = vertex1.faces
    end

  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vertex.edges
  # @file                rvertex.cpp
  #
  # The edges method is used to retrieve an Array of edges that use the
  # Vertex.
  #
  #
  # Args:
  #
  # Returns:
  # - edges: an Array of edge objects if successful
  #

  # Test the example code that we have in the API documentation.
  def test_edges_api_example
    assert_nothing_raised do
     edge = Sketchup.active_model.entities.add_line([0,0,0],[1,0,0])
     # Returns array of vertices that make up the line.
     vertices = edge.vertices
     vertex1 = vertices[0]
     edges = vertex1.edges
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vertex.curve_interior?
  # @file                rvertex.cpp
  #
  # The curve_interior? method is used to determine if this vertex is on
  # the interior of a Curve.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if it is used by exactly two edges which
  # are both part of the same curve.
  #

  # Test the example code that we have in the API documentation.
  def test_curve_interior_api_example

    assert_nothing_raised do
     edge = Sketchup.active_model.entities.add_line([0,0,0],[1,0,0])
     # returns array of vertices that make up the line
     vertices = edge.vertices
     vertex1 = vertices[0]
     status = vertex1.curve_interior?
     if (status)
       UI.messagebox status
     else
       #returns nil if vertex is not on interior of a Curve
       UI.messagebox "Failure"
     end
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vertex.used_by?
  # @file                rvertex.cpp
  #
  # The used_by? method is used to determine if the Vertex is used by a
  # given Edge or Face.
  #
  #
  # Args:
  # - face_or_edge: A Face or Edge ot test against.
  #
  # Returns:
  # - used: true if the Vertex is used in the given entity.
  #

  # Test the example code that we have in the API documentation.
  def test_used_by_api_example

    model = Sketchup.active_model
    entities = model.active_entities
    pts = []
    pts[0] = [0, 0, 0]
    pts[1] = [9, 0, 0]
    pts[2] = [9, 9, 0]
    pts[3] = [0, 9, 0]

    # Add the face to the entities in the model
    my_face = entities.add_face pts
    edge = Sketchup.active_model.entities.add_line([0,0,0],[1,0,0])

    assert_nothing_raised do
     vertex1 = edge.vertices[1]
     used = vertex1.used_by? my_face
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vertex.loops
  # @file                rvertex.cpp
  #
  # The loops method is used to retrieve an Array of loops that use the
  # vertex.
  #
  #
  # Args:
  #
  # Returns:
  # - loops: an Array of loops that use the vertex if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_loops_api_example
    assert_nothing_raised do
     edge = Sketchup.active_model.entities.add_line([0,0,0],[1,0,0])
     # Returns array of vertices that make up the line.
     vertices = edge.vertices
     vertex1 = vertices[0]
     loops = vertex1.loops
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vertex.position
  # @file                rvertex.cpp
  #
  # The position method is used to retrieve the Point3d position of a
  # vertex.
  #
  #
  # Args:
  #
  # Returns:
  # - point: a Point3d object representing the position of
  # the vertex if successful
  #

  # Test the example code that we have in the API documentation.
  def test_position_api_example

    assert_nothing_raised do
     edge = Sketchup.active_model.entities.add_line([0,0,0],[1,0,0])
     # Returns array of vertices that make up the line.
     vertices = edge.vertices
     vertex1 = vertices[0]
     position = vertex1.position
    end
  end


end
