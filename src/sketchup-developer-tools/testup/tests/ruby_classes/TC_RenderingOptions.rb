# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API RenderingOptions object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_RenderingOptions contains unit tests for the RenderingOptions class.
#
# API Object::       RenderingOptions
# C++ File::         rrenderingoptions.cpp
# Parent Class::     Object
# Version::          SketchUp 6.0
#
# The RenderingOptions class contains method to extract the rendering
# information for a model. The majority of the rendering information returned
# exists in the Model Info > Display section of SketchUp. The following
# rendering information keys are maintained in SketchUp:
#
#   - BackgroundColor
#   - BandColor
#   - ConstructionColor
#   - DisplayColorbyLayer
#   - DisplayFog
#   - DisplayFogEdges
#   - DisplayInstanceAxes
#   - DrawGround
#   - DrawHidden
#   - DrawHorizon
#   - DrawSilhouettes
#   - EdgeColorMode
#   - EdgeDisplayMode
#   - ExtendLines
#   - FaceBackColor (in Model Info > Colors)
#   - FaceColorMode
#   - FaceFrontColor (in Model Info > Colors)
#   - FogColor
#   - FogDensity
#   - FogEnd
#   - FogStart
#   - FogType
#   - FogUseBkColor
#   - ForegroundColor
#   - GroundColor (in Model Info > Colors)
#   - GroundTransparency (in Model Info > Colors)
#   - HighlightColor
#   - HorizonColor
#   - InactiveHidden
#   - InstanceHidden
#   - JitterEdges (in Model Info > Display)
#   - LineExtension (in Model Info > Display)
#   - MaterialTransparency (in Materials Browser)
#   - ModelTransparency
#   - RenderMode
#   - SectionActiveColor (in Model Info > Sections)
#   - SectionCutWidth (in Model Info > Sections)
#   - SectionDefaultCutColor (in Model Info > Sections)
#   - SectionInactiveColor (in Model Info > Sections)
#   - SilhouetteWidth
#   - SkyColor (in Model Info > Colors)
#   - Texture (in Materials Browser)
#   - TransparencySort
#
class TC_RenderingOptions < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    RenderingOptions.each_key
  # @file                rrenderingoptions.cpp
  #
  # The each_key method iterates through all of the rendering options
  # keys.
  #
  #
  #
  # Args:
  # - key: Variable to hold each key as they are found.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_each_key_api_example
    renderingoptions = Sketchup.active_model.rendering_options
    assert_nothing_raised do
     renderingoptions.each_key { | key |
       UI.messagebox key
     }
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    RenderingOptions.[]=
  # @file                rrenderingoptions.cpp
  #
  # The set value []= method is used to set the value in the array of
  # rendering options.
  #
  #
  # Args:
  # - key: The key of the rendering option value to set.
  # - value: The value to be set.
  #
  # Returns:
  # - value: the value that was set if successful, or false
  # if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_arrayset_api_example
    
    assert_nothing_raised do
     model = Sketchup.active_model
     renderingoptions = model.rendering_options
     value = renderingoptions["DisplayInstanceAxes"]
     UI.messagebox value
     value = renderingoptions["DisplayInstanceAxes"] = true
     UI.messagebox value
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    RenderingOptions.add_observer
  # @file                rrenderingoptions.cpp
  #
  # The add_observer method is used to add an observer to the current
  # object.
  #
  #
  #
  # Args:
  # - observer: An observer.
  #
  # Returns:
  # - : true if successful, false if unsuccessful.
  #

  

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    RenderingOptions.keys
  # @file                rrenderingoptions.cpp
  #
  # The keys method returns an array with all of the attribute keys.
  #
  #
  # Args:
  #
  # Returns:
  # - keys: an array of keys
  #

  # Test the example code that we have in the API documentation.
  def test_keys_api_example
    
    assert_nothing_raised do
     model = Sketchup.active_model
     renderingoptions = model.rendering_options
     keys = renderingoptions.keys
     key = keys[0]
     UI.messagebox key
    end

  end


  # Test that the entities method returns an Array object.
  def test_keys_returns_array
    obj = Sketchup.active_model.rendering_options
    keys = obj.keys
    result = keys.class
    expected = Array
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    RenderingOptions.each
  # @file                rrenderingoptions.cpp
  #
  # The each method iterates through all of the rendering options
  # key/value pairs.
  #
  #
  # Args:
  # - key: The key of each pair found.
  # - value: The value of each pair found.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_each_api_example
    
    assert_nothing_raised do
     model = Sketchup.active_model
     renderingoptions = model.rendering_options
     renderingoptions.each { | key, value | UI.messagebox key }
     renderingoptions.each { | key, value | UI.messagebox value }
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    RenderingOptions.[]
  # @file                rrenderingoptions.cpp
  #
  # The set value [] method is used to get the value in the array of
  # rendering options.
  #
  #
  # Args:
  # - key: The key of the rendering option value to set.
  #
  # Returns:
  # - value: the value that was found.
  #

  # Test the example code that we have in the API documentation.
  def test_arrayget_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     renderingoptions = model.rendering_options
     value = renderingoptions["DisplayInstanceAxes"]
     UI.messagebox value
    end
  end


  # Test that nil is returned if there is a non-existent index requested.
  # We use the length of the collection to our non-existent index.
  def test_arrayget_nil_on_nonexistent_index
    collection = Sketchup.active_model.rendering_options
    expected = nil
    result = collection['foobar']
    assert_equal(expected, result,
                 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    RenderingOptions.remove_observer
  # @file                rrenderingoptions.cpp
  #
  # The remove_observer method is used to remove an observer from the
  # current object.
  #
  #
  # Args:
  # - observer: An observer.
  #
  # Returns:
  # - : true if successful, false if unsuccessful.
  #



  # ----------------------------------------------------------------------------
  # @par Ruby Method:    RenderingOptions.each_pair
  # @file                rrenderingoptions.cpp
  #
  # An alias for each. See RenderingOptions.each.
  #
  #
  # Args:
  #
  # Returns:
  # - : nil
  #

  

end
