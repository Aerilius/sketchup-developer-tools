# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Vector3d object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Vector3d contains unit tests for the Vector3d class.
#
# API Object::       Vector3d
# C++ File::         rvector3d.cpp
# Parent Class::     Object
# Version::          SketchUp 6.0
#
# The Vector3d class is used to manipulate vectors in a 3 dimensional space.
# 3d Vectors are essentially that combination of 3 numbers allowing you to
# find points in line in 3d space. For example a vector of 3,2,1 in 3d space
# suggests you have to go 3 points in the x direction, 2 points in the y
# direction, and 1 point in the z direction to find points from other points
# along the same line.
#
class TC_Vector3d < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    # Turn off messageboxes by redirecting them on the
    # standard output (ruby console)
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.valid?
  # @file                rvector3d.cpp
  #
  # The valid? method is used to verify if a vector is valid. A vector is
  # valid if its length is not zero.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if the vector is valid. false if the
  # vector is not valid.
  #

  # Test the example code that we have in the API documentation.
  def test_valid_api_example
    # A zero length vector will be invalid
    vector = Geom::Vector3d.new 0,0,0
    status = vector.valid?
    assert_equal(false, status, 'Expected an invalid vector')
    # A non-zero length vector is valid
    vector = Geom::Vector3d.new 0,0,1
    status = vector.valid?
    assert_equal(true, status, 'Expected a valid vector')
  end

  # Test that the valid? method returns true if it's a valid object.
  def test_valid_returns_true_if_valid_object
    obj = Geom::Vector3d.new 0,0,1
    result = obj.valid?
    expected = true
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.%
  # @file                rvector3d.cpp
  #
  # The % method is used to compute the dot product between two vectors.
  # This is an alias of the dot method.
  #
  #
  # Args:
  # - vector2: A Vector3d object.
  #
  # Returns:
  # - d: the dot product of vector1 and vector2
  #

  # Test the example code that we have in the API documentation.
  def test_modulo_api_example
    assert_nothing_raised do
      vector = Geom::Vector3d.new 0,0,1
      vector2 = Geom::Vector3d.new 0,1,0
      d = vector.dot vector2
    end
  end

  # Test edgecases for values passed to this method.
  def test_modulo_edgecases_ninety
    vector = Geom::Vector3d.new 0,0,1
    vector2 = Geom::Vector3d.new 0,1,0
    expected = 0
    result = vector.dot vector2
    assert_equal(expected, result,
                 'Failed in test_modulo_edgecases' )
  end

  def test_modulo_edgecases_zero
    vector = Geom::Vector3d.new 0,1,0
    vector2 = Geom::Vector3d.new 0,1,0
    expected = 1
    result = vector.dot vector2
    assert_equal(expected, result,
                 'Failed in test_modulo_edgecases' )
  end

  def test_modulo_edgecases_one_eighty
    vector = Geom::Vector3d.new 0,1,0
    vector2 = Geom::Vector3d.new 0,-1,0
    expected = -1
    result = vector.dot vector2
    assert_equal(expected, result,
                 'Failed in test_modulo_edgecases' )
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_modulo_bad_params
    assert_raise ArgumentError do
      vector = Geom::Vector3d.new 0,1,0
      result = vector.dot nil
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.length
  # @file                rvector3d.cpp
  #
  # The length method is used to retrieve the length of the vector.
  #
  #
  # Args:
  #
  # Returns:
  # - length: the length of the vector
  #

  # Test the example code that we have in the API documentation.
  def test_length_api_example
    assert_nothing_raised do
     vector = Geom::Vector3d.new 0,0,1
     l = vector.length
    end
  end

  # Test edgecases for values passed to this method.
  def test_length_edgecases_zero_length
    expected = 0
    vector = Geom::Vector3d.new 0,0,0
    result = vector.length
    assert_equal(expected, result, 'The expected result for length (#{expected}) does not match the actual result (#{result})')
  end

  def test_length_edgecases_one_length
    expected = 1
    vector = Geom::Vector3d.new 0,0,1
    result = vector.length
    assert_equal(expected, result, 'The expected result for length (#{expected}) does not match the actual result (#{result})')
  end

  def test_length_edgecases_sqrt_3_length
    expected = Math.sqrt(3)
    vector = Geom::Vector3d.new 1,1,1
    result = vector.length
    assert_in_delta(1.732, result, 0.001, 'The expected result for length (#{expected}) does not match the actual result (#{result})')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.z
  # @file                rvector3d.cpp
  #
  # Get the z coordinate of the vector.
  #
  #
  # Args:
  #
  # Returns:
  # - z: the z coordinate of the vector
  #

  # Test the example code that we have in the API documentation.
  def test_z_api_example
    assert_nothing_raised do
     vector = Geom::Vector3d.new 1,2,3
     z = vector.z
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.samedirection?
  # @file                rvector3d.cpp
  #
  # The samedirection? method is used to determine if this vector is
  # parallel to and in the same direction as another vector to within
  # tolerance.
  #
  #
  # Args:
  # - vector2: A Vector3D object.
  #
  # Returns:
  # - status: true if vector and vector2 are in the same
  # direction. False if they are not in the same direction.
  #

  # Test the example code that we have in the API documentation.
  def test_samedirection_api_example
    assert_nothing_raised do
     vector = Geom::Vector3d.new 0,0,1
     vector2 = Geom::Vector3d.new 0,1,0
     status = vector.samedirection? vector2
    end
  end

  # Test edgecases for values passed to this method.
  def test_samedirection_edgecases_ninety
     vector = Geom::Vector3d.new 0,0,1
     vector2 = Geom::Vector3d.new 0,1,0
     result = vector.samedirection? vector2
     assert_equal(false, result, 'Failure in test_samedirection_edgecases')
  end

  def test_samedirection_edgecases_zero
     vector = Geom::Vector3d.new 0,0,1
     vector2 = Geom::Vector3d.new 0,0,1
     result = vector.samedirection? vector2
     assert_equal(true, result, 'Failure in test_samedirection_edgecases')
  end

  def test_samedirection_edgecases_one_eighty
     vector = Geom::Vector3d.new 0,0,1
     vector2 = Geom::Vector3d.new 0,0,-1
     result = vector.samedirection? vector2
     assert_equal(false, result, 'Failure in test_samedirection_edgecases')
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_samedirection_bad_params
    assert_raise ArgumentError do
      vector = Geom::Vector3d.new 0,0,1
      result = vector.samedirection? nil
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.unitvector?
  # @file                rvector3d.cpp
  #
  # The unitvector? method is used to see if the vector is a unit vector.
  #
  # This is equivalent to vec.length == 1.0
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if the vector is a unit vector. False if
  # the vector is not a unit vector.
  #

  # Test the example code that we have in the API documentation.
  def test_unitvector_api_example
    status = true
    assert_nothing_raised do
     vector = Geom::Vector3d.new 0,0,1
     status = vector.unitvector?
    end
    assert_equal(true, status,
                 'Failed in test_unitvector_api_example' )
  end

  # Test edgecases for values passed to this method.
  def test_unitvector_edgecases_not_one
    vector = Geom::Vector3d.new 0,0,1.01
    status = vector.unitvector?
    assert_equal(false, status,
                 'Failed in test_unitvector_edgecases' )
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.normalize
  # @file                rvector3d.cpp
  #
  # The normalize method is used to return a vector that is a unit vector
  # of another.
  #
  #
  # Args:
  #
  # Returns:
  # - vector2: a normalized Vector3d object
  #

  # Test the example code that we have in the API documentation.
  def test_normalize_api_example
    length = 2
    vector2 = Geom::Vector3d.new
    assert_nothing_raised do
     vector = Geom::Vector3d.new 0,0,2
     vector2 = vector.normalize
    end
    expected = 1
    length = vector2.length
    assert_equal(expected, length,
                 'Failed in test_normalize_api_example' )
  end

  # Test edgecases for values passed to this method.
  def test_normalize_edgecases_zero_length
    vector = Geom::Vector3d.new 0,0,0
    vector2 = vector.normalize
    # Normalize on a 0-length vector is expected to return a 0-length vector
    expected = 0
    length = vector2.length
    assert_equal(expected, length,
                 'Failed in test_normalize_edgecases_zero_length' )
  end

  def test_normalize_edgecases_small_length
    vector = Geom::Vector3d.new 0,0,0.1
    vector2 = vector.normalize
    expected = 1
    length = vector2.length
    assert_equal(expected, length,
                 'Failed in test_normalize_edgecases_small_length' )
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.set
  # @file                rvector3d.cpp
  #
  #
  #
  # Args:
  # - x: The x value for the vector.
  # - y: The y value for the vector.
  # - z: The z value for the vector.
  # - vector2: A Vector3D object.
  #
  # Returns:
  # - vector: The newly set Vector3D object
  #

  # Test the example code that we have in the API documentation.
  def test_set_api_example
    assert_nothing_raised do
     vector = Geom::Vector3d.new 0,0,1
     vector.set! 1,0,0
    end
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_set_bad_params_nil
    assert_raise TypeError do
     vector = Geom::Vector3d.new 0,0,1
     vector.set! nil
    end
  end
  
  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.parallel?
  # @file                rvector3d.cpp
  #
  # The parallel method is used to determine if this vector is parallel to
  # another vector to within tolerance.
  #
  #
  # Args:
  # - vector2: A Vector3d object.
  #
  # Returns:
  # - status: true if vector and vector2 are parallel. False
  # if they are not parallel.
  #

  # Test the example code that we have in the API documentation.
  def test_parallel_api_example
    expected = true
    status = true
    assert_nothing_raised do
     vector = Geom::Vector3d.new 0,0,1
     vector2 = Geom::Vector3d.new 0,0,1
     status = vector.parallel? vector2
    end
    assert_equal(expected, status,
                 'Failed in test_parallel_api_example' )
  end

  # Test edgecases for values passed to this method.
  def test_parallel_edgecases_within_tolerance
    expected = true
    status = true
    vector = Geom::Vector3d.new 0,0,1
    vector2 = Geom::Vector3d.new 0.001,0,1
    status = vector.parallel? vector2
    assert_equal(expected, status,
                 'Failed in test_parallel_edgecases_within_tolerance' )
  end

  def test_parallel_edgecases_past_tolerance
    expected = false
    status = true
    vector = Geom::Vector3d.new 0,0,1
    vector2 = Geom::Vector3d.new 0.0015,0,1
    status = vector.parallel? vector2
    assert_equal(expected, status,
                 'Failed in test_parallel_edgecases_past_tolerance' )
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_parallel_bad_params_nil
    assert_raise ArgumentError do
      vector = Geom::Vector3d.new 0,0,1
      status = vector.parallel? nil
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.angle_between
  # @file                rvector3d.cpp
  #
  # The angle_between method is used to compute the angle (in radians)
  # between this vector and another vector.
  #
  #
  # Args:
  # - vector2: A Vector3d object.
  #
  # Returns:
  # - angle: an angle (in radians)
  #

  # Test the example code that we have in the API documentation.
  def test_angle_between_api_example
    angle = 0
    assert_nothing_raised do
      vector1 = Geom::Vector3d.new 1,0,0
      vector2 = Geom::Vector3d.new 0,1,0
      angle = vector1.angle_between vector2
    end
    expected = Math::PI / 2
    assert_in_delta(expected, angle, 0.001,
                    'Unexpected angle_between result' )
  end

  # Test edgecases for values passed to this method.
  def test_angle_between_edgecase_zero
    vector1 = Geom::Vector3d.new 0,1,0
    vector2 = Geom::Vector3d.new 0,1,0
    angle = vector1.angle_between vector2
    expected = 0
    assert_in_delta(expected, angle, 0.001,
                    'Unexpected angle_between result' )
  end

  def test_angle_between_edgecase_pi
    vector1 = Geom::Vector3d.new 0,1,0
    vector2 = Geom::Vector3d.new 0,-1,0
    angle = vector1.angle_between vector2
    expected = Math::PI
    assert_in_delta(expected, angle, 0.001,
                    'Unexpected angle_between result' )
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_angle_between_bad_param_nil
    assert_raise ArgumentError do
      vector1 = Geom::Vector3d.new 0,1,0
      angle = vector1.angle_between nil
    end
  end
  
  def test_angle_between_bad_param_wrong_number
    assert_raise ArgumentError do
      vector1 = Geom::Vector3d.new 0,1,0
      angle = vector1.angle_between 1
    end
  end
  
  def test_angle_between_bad_param_wrong_number_four
    assert_raise ArgumentError do
      vector1 = Geom::Vector3d.new 0,1,0
      angle = vector1.angle_between 1,1,1,1
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.<
  # @file                rvector3d.cpp
  #
  # The < method is used to determine if a vector is less than another.
  #
  #
  # Args:
  # - vector2: A Vector3d object.
  #
  # Returns:
  # - : true if it is less
  #

  # Test the example code that we have in the API documentation.
  def test_lessthan_api_example
    expected = true
    lt = false
    assert_nothing_raised do
     vector = Geom::Vector3d.new 0,0,2
     vector2 = Geom::Vector3d.new 0,1,0
     lt = vector < vector2
    end
    assert_equal(expected, lt,
                 'Failed in test_lessthan_api_example' )
  end

  # Test edgecases for values passed to this method.
  def test_lessthan_edgecases_zero_vectors
    expected = false
    vector = Geom::Vector3d.new 0,0,0
    vector2 = Geom::Vector3d.new 0,0,0
    lt = vector < vector2
    assert_equal(expected, lt,
                 'Failed in test_lessthan_edgecases_zero_vectors' )
  end

  # Test edgecases for values passed to this method.
  def test_lessthan_edgecases_x_greater
    expected = false
    vector = Geom::Vector3d.new 1,0,0
    vector2 = Geom::Vector3d.new 0,0,0
    lt = vector < vector2
    assert_equal(expected, lt,
                 'Failed in test_lessthan_edgecases_x_greater' )
  end

  def test_lessthan_edgecases_y_greater
    expected = false
    vector = Geom::Vector3d.new 0,1,0
    vector2 = Geom::Vector3d.new 0,0,0
    lt = vector < vector2
    assert_equal(expected, lt,
                 'Failed in test_lessthan_edgecases_y_greater' )
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_lessthan_bad_params_nil
    assert_raise ArgumentError do
      vector = Geom::Vector3d.new 0,1,0
      lt = vector < nil
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.to_s
  # @file                rvector3d.cpp
  #
  # The to_s method is used to format the vector as a String.
  #
  #
  # Args:
  #
  # Returns:
  # - s: a string representation of vector
  #

  # Test the example code that we have in the API documentation.
  def test_to_s_api_example
    expected = '(0.0, 0.0, 1.0)'
    out_string = 'blah'
    assert_nothing_raised do
     vector = Geom::Vector3d.new 0,0,1
     out_string = vector.to_s
     puts out_string
    end
    assert_equal(expected, out_string,
                 'Failed in test_to_s_api_example' )
  end

  # Test that the entities method returns an Array object.
  def test_to_s_returns_string
    obj = Geom::Vector3d.new
    s = obj.to_s
    result = s.class
    expected = String
    assert_equal(expected, result, 'Failed in test_to_s_returns_string')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.normalize!
  # @file                rvector3d.cpp
  #
  # The normalize! method is used to convert a vector into a unit vector,
  # in place.
  #
  # Another way to do this is vec.length = 1
  #
  #
  # Args:
  #
  # Returns:
  # - vector2: a normalized Vector3d object
  #

  # Test the example code that we have in the API documentation.
  def test_normalize_inplace_api_example
    length = 2
    vector = nil
    assert_nothing_raised do
     vector = Geom::Vector3d.new 0,0,2
     vector.normalize!
    end
    expected = 1
    length = vector.length
    assert_equal(expected, length,
                 'Failed in test_normalize_inplace_api_example' )
  end

  # Test edgecases for values passed to this method.
  def test_normalize_inplace_edgecases_zero_length
    vector = Geom::Vector3d.new 0,0,0
    vector.normalize!
    expected = 0
    length = vector.length
    assert_equal(expected, length,
                 'Failed in test_normalize_inplace_api_example' )
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.==
  # @file                rvector3d.cpp
  #
  # The == method is used to determine if two vectors are equal to within
  # tolerance.
  #
  #
  # Args:
  # - vector1: A Vector3d object.
  # - vector2: A Vector3d object.
  #
  # Returns:
  # - status: true if vector1 is equal to vector 2. False if
  # they are not equal.
  #

  # Test the example code that we have in the API documentation.
  def test_equals_api_example
    expected = false
    status = nil
    assert_nothing_raised do
     vector = Geom::Vector3d.new 1,0,0
     vector2 = Geom::Vector3d.new 0,1,0
     status = vector == vector2
     # Returns false
     UI.messagebox status
    end
    assert_equal(expected, status,
                 'Failed in test_equals_api_example' )
  end

  # Test edgecases for values passed to this method.
  def test_equals_edgecases_equal
    expected = true
    vector = Geom::Vector3d.new 1,1,1
    vector2 = Geom::Vector3d.new 1,1,1
    status = vector == vector2
    assert_equal(expected, status,
                 'Failed in test_equals_edgecases_equal' )
  end

  def test_equals_edgecases_equal_within_tol
    expected = true
    vector = Geom::Vector3d.new 1,1,1.001
    vector2 = Geom::Vector3d.new 1,1,1
    status = vector == vector2
    assert_equal(expected, status,
                 'Failed in test_equals_edgecases_equal_within_tol' )
  end
  
  def test_equals_edgecases_equal_outside_tol
    expected = false
    vector = Geom::Vector3d.new 1,1,1.002
    vector2 = Geom::Vector3d.new 1,1,1
    status = vector == vector2
    assert_equal(expected, status,
                 'Failed in test_equals_edgecases_equal_outside_tol' )
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.inspect
  # @file                rvector3d.cpp
  #
  # The inspect method is used to inspect the contents of a vector as a
  # friendly string.
  #
  #
  # Args:
  #
  # Returns:
  # - vector: the Vector3d object
  #

  # Test the example code that we have in the API documentation.
  def test_inspect_api_example
    expected = 'Vector3d(0, 0, 1)'
    out_string = nil
    assert_nothing_raised do
      vector = Geom::Vector3d.new 0,0,1
      out_string = vector.inspect
      puts out_string
    end
    assert_equal(expected, out_string,
                 'Failed in test_inspect_api_example' )
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.*
  # @file                rvector3d.cpp
  #
  # The * method is used to compute the cross product between two vectors.
  #
  # The cross product, also called the vector product, is an operation on
  # two vectors. The cross product of two vectors produces a third vector
  # which is perpendicular to the plane in which the first two lie.
  #
  # This is an alias of the cross method.
  #
  #
  # Args:
  # - vector1: A Vector3d object.
  # - vector2: A Vector3d object.
  #
  # Returns:
  # - vector: a Vector3d object if successful
  #

  

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.[]=
  # @file                rvector3d.cpp
  #
  # The []= method is used to set the coordinates of a vector as if it was
  # an Array. The value of i must be 0, 1 or 2.
  #
  #
  # Args:
  # - coordinate: The value for the x, y, or z coordinate.
  #
  # Returns:
  # - value: the newly set coordinate value
  #

  # Test the example code that we have in the API documentation.
  def test_arrayset_api_example
    vector = Geom::Vector3d.new(0,0,1)
    assert_nothing_raised do
     value = vector[0] = 3
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.to_a
  # @file                rvector3d.cpp
  #
  # The to_a method retrieves the coordinates of the vector in an Array
  # [x, y, z].
  #
  #
  # Args:
  #
  # Returns:
  # - a: the coordinates of the vector in an array
  #

  # Test the example code that we have in the API documentation.
  def test_to_a_api_example
    vector = Geom::Vector3d.new(0,0,1)
    assert_nothing_raised do
     a = vector.to_a
    end
  end


  # Test that the entities method returns an Array object.
  def test_to_a_returns_array
    obj = Geom::Vector3d.new
    a = obj.to_a
    result = a.class
    expected = Array
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.+
  # @file                rvector3d.cpp
  #
  # The - method is used to add a vector to this one.
  #
  #
  # Args:
  # - vector2: A Vector3d object.
  #
  # Returns:
  # - vector: the new vector.
  #

  # Test the example code that we have in the API documentation.
  def test_plus_api_example
    assert_nothing_raised do
     vector = Geom::Vector3d.new 0,0,2
     vector2 = Geom::Vector3d.new 0,1,0
     new_vector = vector + vector2
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.[]
  # @file                rvector3d.cpp
  #
  #
  #
  # Args:
  # - i: An index into an array of three coordinates.
  #
  # Returns:
  # - coordinate: the value for the x, y, or z coordinate.
  #

  # Test the example code that we have in the API documentation.
  def test_arrayget_api_example
    assert_nothing_raised do
     vector = Geom::Vector3d.new 1,0,0
     value = vector[0]
     if (value)
       UI.messagebox value
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_arrayget_bad_params_nil
    assert_raise TypeError do
      vector = Geom::Vector3d.new 1,0,0
      result = vector[nil]
    end
  end

  # Test that nil is returned if there is a negative index requested.
  def test_arrayget_error_on_negative_index
    collection = Geom::Vector3d.new
    assert_raise IndexError do
       result = collection[-4]
    end
  end

  # Test that nil is returned if there is a non-existent index requested.
  # We use the length of the collection to our non-existent index.
  def test_arrayget_error_on_nonexistent_index
    collection = Geom::Vector3d.new
    assert_raise IndexError do
       result = collection[10]
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.reverse!
  # @file                rvector3d.cpp
  #
  # The reverse! method is used to return a new vector that is the reverse
  # of this vector, while leaving the original unchanged.
  #
  #
  # Args:
  #
  # Returns:
  # - vector2: a Vector3d object that is the reverse of
  # vector
  #

  # Test the example code that we have in the API documentation.
  def test_reverse_inplace_api_example
    vector = Geom::Vector3d.new(0,0,1)
    assert_nothing_raised do
     vector2 = vector.reverse!
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.length=
  # @file                rvector3d.cpp
  #
  # The length= method is used to set the length of the vector. The length
  # must be greater than 0.
  #
  #
  # Args:
  # - length: A length for the vector.
  #
  # Returns:
  # - length: a newly set length
  #

  # Test the example code that we have in the API documentation.
  def test_set_length_api_example
    
    assert_nothing_raised do
     vector = Geom::Vector3d.new 0,0,1
     len = vector.length
     UI.messagebox len
     newl = vector.length = 2
    end
    
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.z=
  # @file                rvector3d.cpp
  #
  # Set the z coordinate of the vector.
  #
  #
  # Args:
  # - z: The z coordinate for the vector.
  #
  # Returns:
  # - z: the newly set z coordinate for the vector
  #

  # Test the example code that we have in the API documentation.
  def test_set_z_api_example
    
    assert_nothing_raised do
     vector = Geom::Vector3d.new 1,2,3
     z = vector.z = 10
    end
  end

  # Test that the z= method successfully sets a float value.
  def test_set_z_as_float
    obj = Geom::Vector3d.new
    obj.z = 1000.0
    result = obj.z
    expected = 1000.0
    assert_equal(expected, result, 'expected does not match result.')
  end

  # Test that the z= method successfully sets a fiznum value.
  def test_set_z_as_fixnum
    obj = Geom::Vector3d.new
    obj.z = 1000
    result = obj.z
    expected = 1000
    assert_equal(expected, result, 'expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.clone
  # @file                rvector3d.cpp
  #
  # The clone method is used to make a copy of a vector.
  #
  # This method is equivalent to vec2 = Geom::Vector3d.new(vec)
  #
  #
  # Args:
  #
  # Returns:
  # - vector2: a Vector3d object which is the clone of
  # vector
  #

  # Test the example code that we have in the API documentation.
  def test_clone_api_example
    
    assert_nothing_raised do
     vector = Geom::Vector3d.new 1,0,0
     vector2 = vector.clone
    end


  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.transform!
  # @file                rvector3d.cpp
  #
  # Apply a Transformation to a vector. The vector itself is modified.
  #
  #
  # Args:
  # - transform: A Transformation object to apply to the vector.
  #
  # Returns:
  # - vector2: the newly transformed vector
  #

  # Test the example code that we have in the API documentation.
  def test_transform_inplace_api_example
    vector = Geom::Vector3d.new(0,0,1)
    transformation = Geom::Transformation.new
    assert_nothing_raised do
     vector2 = vector.transform! transformation
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.dot
  # @file                rvector3d.cpp
  #
  # The dot method is used to compute the dot product between two vectors.
  #
  #
  # Args:
  # - vector2: A Vector3d object.
  #
  # Returns:
  # - d: the dot product of vector1 and vector2
  #

  # Test the example code that we have in the API documentation.
  def test_dot_api_example
    
    assert_nothing_raised do
     vector = Geom::Vector3d.new 0,0,1
     vector2 = Geom::Vector3d.new 0,1,0
     d = vector.dot vector2
    end

  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.-
  # @file                rvector3d.cpp
  #
  # The - method is used to subtract a vector from this one.
  #
  #
  # Args:
  # - vector2: A Vector3d object.
  #
  # Returns:
  # - vector: the new vector.
  #

  # Test the example code that we have in the API documentation.
  def test_minus_api_example
    
    assert_nothing_raised do
     vector = Geom::Vector3d.new 0,0,2
     vector2 = Geom::Vector3d.new 0,1,0
     new_vector = vector - vector2
    end

  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.y=
  # @file                rvector3d.cpp
  #
  # Set the y coordinate of the vector.
  #
  #
  # Args:
  # - y: The y coordinate for the vector.
  #
  # Returns:
  # - y: the newly set y coordinate for the vector
  #

  # Test the example code that we have in the API documentation.
  def test_set_y_api_example
    
    assert_nothing_raised do
     vector = Geom::Vector3d.new 1,2,3
     y = vector.y = 10
    end

  end


  # Test that the y= method successfully sets a float value.
  def test_set_y_as_float
    obj = Geom::Vector3d.new
    obj.y = 1000.0
    result = obj.y
    expected = 1000.0
    assert_equal(expected, result, 'expected does not match result.')
  end

  # Test that the y= method successfully sets a fiynum value.
  def test_set_y_as_fixnum
    obj = Geom::Vector3d.new
    obj.y = 1000
    result = obj.y
    expected = 1000
    assert_equal(expected, result, 'expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.x
  # @file                rvector3d.cpp
  #
  # The x method is used to retrieve the x coordinate of the vector.
  #
  #
  # Args:
  #
  # Returns:
  # - x: the x coordinate of the vector
  #

  # Test the example code that we have in the API documentation.
  def test_x_api_example
    vector = Geom::Vector3d.new(0,0,1)
    assert_nothing_raised do
     x = vector.x
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.perpendicular?
  # @file                rvector3d.cpp
  #
  # The perpendicular? method is used to determine if this vector is
  # perpendicular to another vector to within tolerance.
  #
  #
  # Args:
  # - vector2: A Vector3d object.
  #
  # Returns:
  # - status: true if vector and vector2 are parallel. False
  # if they are not parallel.
  #

  # Test the example code that we have in the API documentation.
  def test_perpendicular_api_example
   
    assert_nothing_raised do
     vector = Geom::Vector3d.new 0,0,1
     vector2 = Geom::Vector3d.new 0,1,0
     status = vector.perpendicular? vector2
    end

  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.linear_combination
  # @file                rvector3d.cpp
  #
  #
  #
  # Args:
  # - weight1: A weight or percentage.
  # - vector1: The first vector.
  # - weight2: A weight or percentage.
  # - vector2: The end point of the line.
  #
  # Returns:
  # - vector: a Vector3d object
  #

 

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.axes
  # @file                rvector3d.cpp
  #
  # The axes method is used to compute an arbitrary set of axes with the
  # given vector as the z-axis direction.
  #
  # Returns an Array of three vectors [xaxis, yaxis, zaxis]
  #
  #
  # Args:
  #
  # Returns:
  # - a: an Array object containing three Vector3d objects
  #

  # Test the example code that we have in the API documentation.
  def test_axes_api_example
    
    assert_nothing_raised do
     vector = Geom::Vector3d.new 1,0,0
     a = vector.axes
    end

  end

  

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.y
  # @file                rvector3d.cpp
  #
  # The y method is used to retrieve the y coordinate of the vector.
  #
  #
  # Args:
  #
  # Returns:
  # - y: the y coordinate of the vector
  #

  # Test the example code that we have in the API documentation.
  def test_y_api_example
  
    assert_nothing_raised do
     vector = Geom::Vector3d.new 1,2,3
     y = vector.y
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.x=
  # @file                rvector3d.cpp
  #
  # The x= method is used to set the x coordinate of the vector.
  #
  #
  # Args:
  # - x: The x coordinate for the vector.
  #
  # Returns:
  # - x: the newly set x coordinate for the vector
  #

  # Test the example code that we have in the API documentation.
  def test_set_x_api_example
    
    assert_nothing_raised do
     vector = Geom::Vector3d.new 1,2,3
     x = vector.x = 10
    end
  end

  
  # Test that the x= method successfully sets a float value.
  def test_set_x_as_float
    obj = Geom::Vector3d.new
    obj.x = 1000.0
    result = obj.x
    expected = 1000.0
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # Test that the x= method successfully sets a fixnum value.
  def test_set_x_as_fixnum
    obj = Geom::Vector3d.new
    obj.x = 1000
    result = obj.x
    expected = 1000
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.cross
  # @file                rvector3d.cpp
  #
  # The cross method is used to compute the cross product between two
  # vectors.
  #
  # The cross product, also called the vector product, is an operation on
  # two vectors. The cross product of two vectors produces a third vector
  # which is perpendicular to the plane in which the first two lie.
  #
  #
  # Args:
  # - vector2: A Vector3d object.
  #
  # Returns:
  # - vector: the cross of vector1 and vector2
  #

  # Test the example code that we have in the API documentation.
  def test_cross_api_example
    
    assert_nothing_raised do
     vector = Geom::Vector3d.new 1,0,0
     vector2 = Geom::Vector3d.new 0,1,0
     v = vector.cross vector2
    end
  end



  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Vector3d.new
  # @file                rvector3d.cpp
  #
  #
  #
  # Args:
  # - x: A X value.
  # - y: A Y value.
  # - z: A Z value.
  # - vector2: A Vector3d object.
  #
  # Returns:
  # - vector: a vector3d object
  #

  # Test the example code that we have in the API documentation.
  def test_new_api_example
    
    assert_nothing_raised do
     # A vector that runs up the Z axis.
     vector = Geom::Vector3d.new 0,0,1
     if (vector)
       UI.messagebox vector
     else
       UI.messagebox "Failure"
     end
    end
  end

  
end
