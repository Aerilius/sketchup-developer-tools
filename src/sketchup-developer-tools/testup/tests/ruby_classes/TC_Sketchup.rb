# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Sketchup object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Sketchup contains unit tests for the Sketchup class.
#
# API Object::       Sketchup
# C++ File::         rsketchup.cpp
# Parent Class::     N/A
# Version::          SketchUp 6.0
#
# The Sketchup module contains number of important utility methods for use in
# your Ruby scripts.
#
class TC_Sketchup < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.is_valid_filename?
  # @file                rsketchup.cpp
  #
  # The is_valid_filename? method is used to determine whether a filename
  # contains illegal characters.
  #
  #
  # Args:
  # - filename: A filename string.
  #
  # Returns:
  # - status: true if filename is valid, false if filename
  # is invalid (contains illegal characters).
  #

  # Test the example code that we have in the API documentation.
  def test_is_valid_filename_api_example
    filename = '/*.'
    status = nil
    assert_nothing_raised do
     status = Sketchup.is_valid_filename? filename
    end
    assert_equal(false, status,
                 'Failed in test_is_valid_filename' )
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.register_importer
  # @file                rsketchup.cpp
  #
  # The register_importer method is used to register an importer with
  # SketchUp.
  #
  #
  # Args:
  # - importer: An Importer object representing the importer.
  #
  # Returns:
  # - status: true if successful, false if unsuccessful.
  #

  

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.format_length
  # @file                rsketchup.cpp
  #
  # The format_length method formats a number as a length using the
  # current units settings.
  #
  # The default unit setting is inches. For example, 10 becomes 10".
  #
  #
  # Args:
  # - number: A number to be formatted.
  #
  # Returns:
  # - length: length if successful, false if unsuccessful
  #

  # Test the example code that we have in the API documentation.
  def test_format_length_api_example
    
    assert_nothing_raised do
     length = Sketchup.format_area 10
     if (length)
       UI.messagebox length
     end
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.set_status_text
  # @file                rsketchup.cpp
  #
  # The set_status_text method is used to set the text appearing on the
  # status bar within the drawing window.
  #
  # If no arguments are passed, the status bar content is cleared. Valid
  # POSITIONs are:
  #
  # - SB_PROMPT - the text will appear at the left-side of the status bar
  # - SB_VCB_LABEL - the text will appear in place of the VCB label
  # - SB_VCB_VALUE - the text will appear in the VCB
  #
  #
  # Args:
  # - status: text (optional) the status text that will appear.
  # - position: (optional) the position where the text will appear.
  #
  # Returns:
  # - result: true if successful, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_set_status_text_api_example
    
    assert_nothing_raised do
     result = Sketchup.set_status_text "This is a Test", SB_VCB_VALUE
     if (result)
       #code to do something if set_status_text is successful
     end
    end

  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.require
  # @file                rsketchup.cpp
  #
  # The require method is used to include encrypted and nonencrypted ruby
  # files.
  #
  # You do not need to include the file extension on the path. This
  # method will look for .rb first (unencrypted) and then .rbs
  # (encrypted). The scrambler application used to encrypt SketchUp ruby
  # scripts is available in the SketchUp SDK.
  #
  #
  # Args:
  # - path: The path, including the filename, to the file you want to
  # require.
  #
  # Returns:
  # - status: True if the file is included. False if the
  # file is not included.
  #

  # Test the example code that we have in the API documentation.
  def test_require_api_example
    path = 'sketchup.rb'
    assert_nothing_raised do
     status = Sketchup.require path
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.create_texture_writer
  # @file                rsketchup.cpp
  #
  # The create_texture_writer method is used to create a TextureWriter
  # object.
  #
  #
  # Args:
  #
  # Returns:
  # - texturewriter: a texturewriter object if successful.
  #

  # Test the example code that we have in the API documentation.
  def test_create_texture_writer_api_example
    
    assert_nothing_raised do
     texturewriter = Sketchup.create_texture_writer
    end

  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.os_language
  # @file                rsketchup.cpp
  #
  # The os_language method is used to retrieve a two character code
  # representing the os language. This is an alias for the get_locale
  # method.
  #
  # Valid return values are: EN, QE, DE, FR, JP, ES, and IT.
  #
  #
  # Args:
  #
  # Returns:
  # - language: a two character code representing the os
  # language. For example, EN represents English.
  #

  # Test the example code that we have in the API documentation.
  def test_os_language_api_example
    
    assert_nothing_raised do
     language = Sketchup.os_language
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.find_support_files
  # @file                rsketchup.cpp
  #
  # The find_support_files method is used to retrieve the relative path
  # and name of all matching files within the SketchUp installation
  # directory.
  #
  # Forward slashes must be used to delimit between directory names.
  #
  #
  # Args:
  # - filename: Name of the filename you want to find.
  # - directory: (optional) directory relative to the SketchUp
  # installation directory.
  #
  # Returns:
  # - array: an array of files. If unsuccessful, the method
  # returns false.
  #

  # Test the example code that we have in the API documentation.
  def test_find_support_files_api_example
    assert_nothing_raised do
     array = Sketchup.find_support_files "filename", "directory"
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.active_model
  # @file                rsketchup.cpp
  #
  # The active_model method returns the currently active SketchUp model.
  # On the PC, this is the only model that one can have access to via the
  # API, but Macintosh versions of SketchUp can have multiple models open
  # at once, in which case the method will return the model that the user
  # currently has focused.
  #
  #
  # Args:
  #
  # Returns:
  # - model: active model object if successful, false if
  # unsuccessful
  #

  # Test the example code that we have in the API documentation.
  def test_active_model_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     if (! model)
       UI.messagebox "Failure"
     else
       # code acting on the model
     end
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.load
  # @file                rsketchup.cpp
  #
  # The load method is used to include encrypted and nonencrypted ruby
  # files.
  #
  # You do not need to include the file extension on the path. This
  # method will look for .rb first (unencrypted) and then .rbs
  # (encrypted). The scrambler application used to encrypt SketchUp ruby
  # scripts is available in the SketchUp SDK.
  #
  #
  # Args:
  # - path: The path, including the filename, to the file you want to
  # require.
  #
  # Returns:
  # - status: True if the file is included. False if the
  # file is not included.
  #

  # Test the example code that we have in the API documentation.
  def test_load_api_example
    path = 'sketchup.rb'
    assert_nothing_raised do
     status = Sketchup.load path
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.break_edges=
  # @file                rsketchup.cpp
  #
  # The break_edges= method can be used to disable or enable the break
  # edges feature. Break edges is the SketchUp 7 feature that
  # automatically splits edges that the user draws which cross over one
  # another.
  #
  # This feature is always on by default and cannot be disabled by the
  # user via the user interface, but you can call this method to disable
  # it. Be cautious in doing so, however, as the resulting model could
  # then be altered when the user later draws lines into it with the break
  # edges feature reactivated.
  #
  #
  # Args:
  # - enabled: If true, break edges will be turned on. If false, it will
  # be deactivated.
  #
  # Returns:
  # - setting: true if break edges was turned on.
  #

  # Test the example code that we have in the API documentation.
  def test_set_break_edges_api_example
   
    assert_nothing_raised do
     is_on = Sketchup.break_edges?
    end

  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.open_file
  # @file                rsketchup.cpp
  #
  # The open_file method is used to open a file.
  #
  #
  # Args:
  # - filename: The path and filename to open.
  #
  # Returns:
  # - file: a file
  #


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.format_area
  # @file                rsketchup.cpp
  #
  # The format_area method formats a number as an area using the current
  # units settings.
  #
  # The default unit setting is inches. For example, 10 becomes 10 inches
  # squared.
  #
  #
  # Args:
  # - number: A number to be formatted.
  #
  # Returns:
  # - area: an area if successful, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_format_area_api_example
    number = 100
    assert_nothing_raised do
     area = Sketchup.format_area number
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.parse_length
  # @file                rsketchup.cpp
  #
  # The parse_length method parses a string as a length.
  #
  # For example, "200" becomes 200.0.
  #
  #
  # Args:
  # - stringnumber: The string to be parsed as a number.
  #
  # Returns:
  # - length: the numerical representation of the string if
  # successful, or false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_parse_length_api_example
   
    assert_nothing_raised do
     length = Sketchup.parse_length "23.4"
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.undo
  # @file                rsketchup.cpp
  #
  # The undo method is used undo the last transaction on the undo stack.
  #
  #
  # Args:
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_undo_api_example
   
    assert_nothing_raised do
     Sketchup.undo
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.write_default
  # @file                rsketchup.cpp
  #
  # The write_defaults method is used to set the string associated with a
  # value within the specified sub-section section of a .INI file or
  # registry (within the Software > @Last Software > SketchUp section).
  #
  #
  # Args:
  # - section: A section in an .INI or registry.
  # - variable: A variable within the section.
  # - value: The value to store.
  #
  # Returns:
  # - value: the value that was set.
  #

  # Test the example code that we have in the API documentation.
  def test_write_default_api_example
    
    assert_nothing_raised do
     result = Sketchup.write_default "section",
       "variable", "my_value"
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.find_support_file
  # @file                rsketchup.cpp
  #
  # The find_support_files method is used to retrieve the relative path
  # and name of a file within the SketchUp installation directory.
  #
  # Forward slashes must be used to delimit between directory names.
  #
  #
  # Args:
  # - filename: Name of the filename you want to find.
  # - directory: (optional) directory relative to the SketchUp
  # installation directory.
  #
  # Returns:
  # - path: the entire path if successful. If unsuccessful,
  # the method returns false.
  #

  # Test the example code that we have in the API documentation.
  def test_find_support_file_api_example
    assert_nothing_raised do
     help_file = Sketchup.find_support_file "help.html", "Plugins/"
     if (help_file)
       # Print out the help_file full path
       UI.messagebox help_file

       # Open the help_file in a web browser
       UI.openURL "file://" + help_file
     else
       UI.messagebox "Failure"
     end
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.template_dir
  # @file                rsketchup.cpp
  #
  # The template_dir is used to retrieve the directory where templates are
  # stored by the SketchUp install. Templates are the .skp files that are
  # loaded when the user select File > New.
  #
  #
  # Args:
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_template_dir_api_example
    assert_nothing_raised do
     directory = Sketchup.template_dir
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.is_pro?
  # @file                rsketchup.cpp
  #
  # Returns a boolean flag indicating whether the application is SketchUp
  # Pro. Note that after the free trial period, SketchUp Pro will revert
  # to regular SketchUp and this method will return false until the user
  # registers the product.
  #
  #
  # Args:
  #
  # Returns:
  # - is_pro: true if the user is using SketchUp Pro
  #

  # Test the example code that we have in the API documentation.
  def test_is_pro_api_example
    
    assert_nothing_raised do
     if (Sketchup.is_pro?)
       UI.messagebox "You are running SU Pro."
     end
    end
    
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.break_edges?
  # @file                rsketchup.cpp
  #
  # The break_edges? method indicates whether the break edges feature is
  # currently turned on. Break edges is the SketchUp 7 feature that
  # automatically splits edges that the user draws which cross over one
  # another. This feature is always on by default and cannot be disabled
  # by the user via the user interface.
  #
  #
  # Args:
  #
  # Returns:
  # - break_edges: true if the feature is on.
  #

  # Test the example code that we have in the API documentation.
  def test_break_edges_api_example
    
    assert_nothing_raised do
     is_on = Sketchup.break_edges?
    end
    
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.is_online
  # @file                rsketchup.cpp
  #
  # The is_online method is used to verify a connection to the Internet.
  # This method can take some time to execute, so be careful not to call
  # it more often than you need.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if successful, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_is_online_api_example
    
    assert_nothing_raised do
     status = Sketchup.is_online
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.template
  # @file                rsketchup.cpp
  #
  # The template method is used to get the file name of the current
  # template. Templates are the .skp files that are loaded when the user
  # select File > New.
  #
  #
  # Args:
  #
  # Returns:
  # - name: the current template
  #

  # Test the example code that we have in the API documentation.
  def test_template_api_example
    
    assert_nothing_raised do
     name = Sketchup.template
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.display_name_from_action
  # @file                rsketchup.cpp
  #
  # The display_name_from_action method is used to gets a user-friendly
  # name from an action string. See Sketchup.send_action for a list of
  # valid action strings.
  #
  #
  # Args:
  # - action_name: An action string.
  #
  # Returns:
  # - : friendly_name = a friendly name.
  #

  # Test the example code that we have in the API documentation.
  def test_display_name_from_action_api_example
    
    assert_nothing_raised do
     Sketchup.display_name_from_action("viewRight:")
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.version_number
  # @file                rsketchup.cpp
  #
  # Get the current version of sketchup as a whole number for comparisons.
  #
  #
  # Args:
  #
  # Returns:
  # - version: the whole number form of the version
  #

  # Test the example code that we have in the API documentation.
  def test_version_number_api_example
    
    assert_nothing_raised do
     version = Sketchup.version_number
     if (version)
       UI.messagebox version
     end
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.app_name
  # @file                rsketchup.cpp
  #
  # The app_name method is used to retrieve the current application name.
  #
  #
  # Args:
  #
  # Returns:
  # - name: the name of the application, either "Google
  # SketchUp Pro" or "Google SketchUp"
  #

  # Test the example code that we have in the API documentation.
  def test_app_name_api_example
    
    assert_nothing_raised do
     name = Sketchup.app_name
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.template=
  # @file                rsketchup.cpp
  #
  # The template= method is used to set the file name of the current
  # template. Templates are the .skp files that are loaded when the user
  # select File > New.
  #
  #
  # Args:
  # - filename: The name of the template to set.
  #
  # Returns:
  # - status: true if successful, false if unsuccessful.
  #



  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.get_shortcuts
  # @file                rsketchup.cpp
  #
  # The get_shortcuts method retrieves an array of all keyboard shortcuts
  # currently registered with SketchUp.
  #
  #
  # Args:
  #
  # Returns:
  # - shortcuts: an array of shortcut strings.
  #

  # Test the example code that we have in the API documentation.
  def test_get_shortcuts_api_example
    
    assert_nothing_raised do
     shortcuts = Sketchup.get_shortcuts
    end

  end

  

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.format_angle
  # @file                rsketchup.cpp
  #
  # The format_angle method formats a number as an angle (in radians)
  # using the current units settings. For example, 10 becomes 573 or 10 x
  # 180/pi.
  #
  #
  # Args:
  # - number: A number to be formatted.
  #
  # Returns:
  # - radians: an angle in radians if successful, false if
  # unsuccessful
  #

  # Test the example code that we have in the API documentation.
  def test_format_angle_api_example
    number = 100.0
    assert_nothing_raised do
     radians = Sketchup.format_angle number
    end
  end



  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.file_new
  # @file                rsketchup.cpp
  #
  # The file_new method is used to create a new file.
  #
  #
  # Args:
  #
  # Returns:
  # - Sketchup: a Sketchup object if successful.
  #

  # Test the example code that we have in the API documentation.
  def test_file_new_api_example
    
    assert_nothing_raised do
     new_sketchup = Sketchup.file_new
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.add_observer
  # @file                rsketchup.cpp
  #
  # The add_observer method is used to add an observer to the current
  # object.
  #
  #
  # Args:
  # - observer: An observer.
  #
  # Returns:
  # - status: true if successful, false if unsuccessful.
  #



  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.read_default
  # @file                rsketchup.cpp
  #
  # The read_defaults method is used to retrieve the string associated
  # with a value within the specified sub-section section of a .INI file
  # or registry (within the Software > @Last Software > SketchUp section).
  #
  #
  # Args:
  # - section: A section in an .INI or registry.
  # - variable: A variable within the section.
  # - default: (optional) A default value if the value is not found.
  #
  # Returns:
  # - result: True if successful, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_read_default_api_example
    
    assert_nothing_raised do
     result = Sketchup.read_default "section",
       "variable", "default"
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.get_datfile_info
  # @file                rsketchup.cpp
  #
  # The get_datfile_info method is used to retrieve the value for the
  # given key from Sketchup.dat.
  #
  # If the key is not found, default_value is returned.
  #
  #
  # Args:
  # - key: The key whose value you want to retrieve.
  # - default_value: The default value you want returned if key is not
  # available.
  #
  # Returns:
  # - value: a string value if successful.
  #

  # Test the example code that we have in the API documentation.
  def test_get_datfile_info_api_example
    assert_nothing_raised do
     value = Sketchup.get_datfile_info('key', 'default_value')
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.save_thumbnail
  # @file                rsketchup.cpp
  #
  # The save_thumbnail method is used to generate a thumbnail for any SKP
  # file - not necessarily the loaded model.
  #
  #
  # Args:
  # - skp_filename: The name of the SketchUp file whose model you want
  # represented in the thumbnail.
  # - img_filename: he name of the file where the thumbnail will be saved.
  #
  # Returns:
  # - status: true if successful, false if unsuccessful.
  #


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.remove_observer
  # @file                rsketchup.cpp
  #
  # The remove_observer method is used to remove an observer from the
  # current object.
  #
  #
  # Args:
  # - observer: An observer.
  #
  # Returns:
  # - : true if successful, false if unsuccessful.
  #


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.register_extension
  # @file                rsketchup.cpp
  #
  # The register_extension method is used to register an extension with
  # SketchUp's extension manager (in SketchUp preferences).
  #
  #
  # Args:
  # - extension: A SketchupExtension object.
  # - registered: true if extension should be automatically loaded the
  # first time it is registered.
  #
  # Returns:
  # - status: true if extension registered properly
  #

  # Test the example code that we have in the API documentation.
  def test_register_extension_api_example
    
    assert_nothing_raised do
     utilitiesExtension = SketchupExtension.new "Utilities Tools",
       "Utilities/utilitiesTools.rb"

     utilitiesExtension.description = "Adds Tools->Utilities to the " +
       "SketchUp inteface. The Utilities submenu contains two tools: " +
       "Create Face and Query Tool."

     Sketchup.register_extension utilitiesExtension, false
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.get_resource_path
  # @file                rsketchup.cpp
  #
  # The get_resource_path is used to retrieve the directory where
  # "resource" files are stored by SketchUp. Resource files include things
  # like language localization files.
  #
  #
  # Args:
  #
  # Returns:
  # - path: the directory path to the resources folder.
  #

  # Test the example code that we have in the API documentation.
  def test_get_resource_path_api_example
    
    assert_nothing_raised do
     directory = Sketchup.get_resource_path "Components.strings"
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.get_locale
  # @file                rsketchup.cpp
  #
  # The get_locale method returns the locale for the machine where
  # SketchUp is installed.
  #
  # Valid return values are: EN, QE, DE, FR, JP, ES, and IT.
  #
  #
  # Args:
  #
  # Returns:
  # - locale: a two character locale (see comments)
  #

  # Test the example code that we have in the API documentation.
  def test_get_locale_api_example
    assert_nothing_raised do
     locale = Sketchup.get_locale
     if (locale)
       UI.messagebox locale
     end
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.send_action
  # @file                rsketchup.cpp
  #
  # The send_action method sends a message to the message queue to perform
  # some action asynchronously.
  #
  # Valid actions are:
  # - showRubyPanel:
  # - viewBack:
  # - viewBottom:
  # - viewFront:
  # - viewIso:
  # - viewLeft:
  # - viewRight:
  # - viewTop:
  # - viewPerspective:
  # - viewShowAxes:
  # - viewShowHidden:
  # - viewZoomExtents:
  # - viewZoomToSelection:
  # - viewUndo:
  # - selectOrbitTool:
  # - selectPositionCameraTool:
  # - selectDollyTool:
  # - selectTurnTool:
  # - selectWalkTool:
  # - selectZoomTool:
  # - selectFieldOfViewTool:
  # - selectZoomWindowTool:
  # - pageAdd:
  # - pageDelete:
  # - pageUpdate:
  # - pageNext:
  # - pagePrevious:
  # - renderWireframe:
  # - renderHiddenLine:
  # - renderMonochrome:
  # - renderShaded:
  # - renderTextures:
  # - selectArcTool:
  # - selectAxisTool:
  # - selectCircleTool:
  # - selectEraseTool:
  # - selectFreehandTool:
  # - selectLineTool:
  # - selectMeasureTool:
  # - selectMoveTool:
  # - selectOffsetTool:
  # - selectPaintTool:
  # - selectPolygonTool:
  # - selectProtractorTool:
  # - selectPushPullTool:
  # - selectRectangleTool:
  # - selectRotateTool:
  # - selectScaleTool:
  # - selectSectionPlaneTool:
  # - selectTextTool:
  # - selectDimensionTool:
  # - selectExtrudeTool:
  # - selectSelectionTool:
  # - editUndo:
  # - editRedo:
  # - editHide:
  # - editUnhide:
  # - fixNonPlanarFaces:
  #
  #
  # Args:
  # - action: The action to be performed.
  #
  # Returns:
  # - result: true if successful, false if unsuccessful
  #

  # Test the example code that we have in the API documentation.
  def test_send_action_api_example
    assert_nothing_raised do
     result = Sketchup.send_action "selectSelectionTool:"
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.format_degrees
  # @file                rsketchup.cpp
  #
  # The format_degrees method formats a number as an angle given in
  # degrees. For example, 10 becomes 10.0 degrees.
  #
  #
  # Args:
  # - number: A number to be formatted.
  #
  # Returns:
  # - degrees: degrees if successful, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_format_degrees_api_example
    number = 100.0
    assert_nothing_raised do
     degrees = Sketchup.format_degrees number
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Sketchup.version
  # @file                rsketchup.cpp
  #
  # Gets the current version of sketchup in decimal form.
  #
  #
  # Args:
  #
  # Returns:
  # - version: the decimal form of the version
  #

  # Test the example code that we have in the API documentation.
  def test_version_api_example
    
    assert_nothing_raised do
     version = Sketchup.version
     if (version)
       UI.messagebox version
     end
    end
    
  end


end
