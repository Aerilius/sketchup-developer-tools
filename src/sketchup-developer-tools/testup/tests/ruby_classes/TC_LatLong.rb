# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API LatLong object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_LatLong contains unit tests for the LatLong class.
#
# API Object::       LatLong
# C++ File::         rlatlong.cpp
# Parent Class::     Object
# Version::          SketchUp 6.0
#
# The LatLong class contains various methods for creating and manipulating
# latitude and longitude coordinates.
#
#
class TC_LatLong < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    LatLong.to_utm
  # @file                rlatlong.cpp
  #
  # The to_utm method converts a LatLong object to an array of two values.
  #
  #
  # Args:
  #
  # Returns:
  # - array: an array of two values: latitude and longitude
  #

  # Test the example code that we have in the API documentation.
  def test_to_utm_api_example
    assert_nothing_raised do
     ll = [40.01700, 105.28300]
     latlong = Geom::LatLong.new(ll)
     utm = latlong.to_utm
     if (utm)
       UI.messagebox utm
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_to_utm_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_to_utm_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_to_utm_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    LatLong.new
  # @file                rlatlong.cpp
  #
  # The new method creates a LatLong object.
  #
  #
  # Args:
  # - latlong: A latitude and longitude coordinate set as an Array.
  #
  # Returns:
  # - latlong: a LatLong object
  #

  # Test the example code that we have in the API documentation.
  def test_new_api_example
    assert_nothing_raised do
     ll = [40.01700, 105.28300]
     latlong = Geom::LatLong.new(ll)
     if (latlong)
       UI.messagebox latlong
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_new_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_new_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_new_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    LatLong.longitude
  # @file                rlatlong.cpp
  #
  # The Latitude method retrieves the longitude coordinate from a LatLong
  # object.
  #
  #
  # Args:
  #
  # Returns:
  # - longitude: a latitude coordinate value
  #

  # Test the example code that we have in the API documentation.
  def test_longitude_api_example
    assert_nothing_raised do
     ll = [40.01700, 105.28300]
     latlong = Geom::LatLong.new(ll)
     longitude = latlong.longitude
     if (longitude)
       UI.messagebox longitude
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_longitude_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_longitude_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_longitude_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    LatLong.to_s
  # @file                rlatlong.cpp
  #
  # The to_a method converts a LatLong object to a string.
  #
  #
  # Args:
  #
  # Returns:
  # - string: a string representation of a LatLong object
  #

  # Test the example code that we have in the API documentation.
  def test_to_s_api_example
    assert_nothing_raised do
     ll = [40.01700, 105.28300]
     latlong = Geom::LatLong.new(ll)
     s = latlong.to_s
     if (s)
       UI.messagebox s
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_to_s_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_to_s_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_to_s_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # Test that the entities method returns an Array object.
  def test_to_s_returns_string
    obj = Geom::LatLong.new([40.01700, 105.28300])
    s = obj.to_s
    result = s.class
    expected = String
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    LatLong.latitude
  # @file                rlatlong.cpp
  #
  # The Latitude method retrieves the latitude coordinate from a LatLong
  # object.
  #
  #
  # Args:
  #
  # Returns:
  # - latitude: a latitude coordinate value
  #

  # Test the example code that we have in the API documentation.
  def test_latitude_api_example
    assert_nothing_raised do
     ll = [40.01700, 105.28300]
     latlong = Geom::LatLong.new(ll)
     latitude = latlong.latitude
     if (latitude)
       UI.messagebox latitude
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_latitude_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_latitude_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_latitude_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    LatLong.to_a
  # @file                rlatlong.cpp
  #
  # The to_a method converts a LatLong object to an array of two values.
  #
  #
  # Args:
  #
  # Returns:
  # - array: an array of two values: latitude and longitude
  #

  # Test the example code that we have in the API documentation.
  def test_to_a_api_example
    assert_nothing_raised do
     ll = [40.01700, 105.28300]
     latlong = Geom::LatLong.new(ll)
     a = latlong.to_a
     if (a)
       UI.messagebox a
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_to_a_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_to_a_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_to_a_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # Test that the entities method returns an Array object.
  def test_to_a_returns_array
    obj = Geom::LatLong.new([40.01700, 105.28300])
    a = obj.to_a
    result = a.class
    expected = Array
    assert_equal(expected, result, 'Expected does not match result.')
  end

end
