# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API ComponentDefinition object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_ComponentDefinition contains unit tests for the ComponentDefinition class.
#
# API Object::       ComponentDefinition
# C++ File::         rcomponentdefinition.cpp
# Parent Class::     Drawingelement
# Version::          SketchUp 6.0
#
# The ComponentDefinition class is used to define the contents for a component
# (the entities contained within a component). The ComponentDefinition can be
# thought of as the class used to represent components in the SketchUp
# Component Browser.
#
#
class TC_ComponentDefinition < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.instances
  # @file                rcomponentdefinition.cpp
  #
  # The instances method is used to return any array of
  # ComponentInstancesfor this ComponentDefinition.
  #
  #
  # Args:
  #
  # Returns:
  # - instances: an array of ComponentInstances (if
  # successful)
  #

  # Test the example code that we have in the API documentation.
  def test_instances_api_example
    assert_nothing_raised do
     componentdefinition = Sketchup.active_model.definitions[0]
     instances = componentdefinition.instances
    end
  end

  # Test edgecases for values passed to this method.
  #def test_instances_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_instances_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_instances_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.guid
  # @file                rcomponentdefinition.cpp
  #
  # The guid method is used to retrieve the unique identifier of this
  # component definition.
  #
  #
  # Args:
  #
  # Returns:
  # - guid: a string guid if successful
  #

  # Test the example code that we have in the API documentation.
  def test_guid_api_example
    assert_nothing_raised do
     componentdefinition = Sketchup.active_model.definitions[0]
     guid = componentdefinition.guid
    end
  end

  # Test edgecases for values passed to this method.
  #def test_guid_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_guid_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_guid_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.hidden?
  # @file                rcomponentdefinition.cpp
  #
  # The hidden method is used to determine if this component definition
  # should be hidden on the component browser.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if the definition should be hidden, false
  # if the definition should not be hidden
  #

  # Test the example code that we have in the API documentation.
  def test_hidden_api_example
    assert_nothing_raised do
     componentdefinition = Sketchup.active_model.definitions[0]
     status = componentdefinition.hidden?
    end
  end

  # Test edgecases for values passed to this method.
  #def test_hidden_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_hidden_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_hidden_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.insertion_point
  # @file                rcomponentdefinition.cpp
  #
  # The insertion_point method is used to retrieve the Point3d object
  # where the component was inserted.
  #
  #
  # Args:
  #
  # Returns:
  # - point: the Point3d where the component was inserted if
  # successful. False if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_insertion_point_api_example
    assert_nothing_raised do
     point = Geom::Point3d.new 10,20,30
     transform = Geom::Transformation.new point
     model = Sketchup.active_model
     entities = model.active_entities
     path = Sketchup.find_support_file "Bed.skp",
       "Components/Components Sampler/"
     definitions = model.definitions
     componentdefinition = definitions.load path
     instance = entities.add_instance componentdefinition, transform
     point = componentdefinition.insertion_point
    end
  end

  # Test edgecases for values passed to this method.
  #def test_insertion_point_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_insertion_point_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_insertion_point_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.name
  # @file                rcomponentdefinition.cpp
  #
  # The name method retrieves the name of the component definition.
  #
  #
  # Args:
  #
  # Returns:
  # - name: the component definition's name if successful
  #

  # Test the example code that we have in the API documentation.
  def test_name_api_example
    assert_nothing_raised do
     path = Sketchup.find_support_file "Bed.skp",
       "Components/Components Sampler/"
     model = Sketchup.active_model
     definitions = model.definitions
     componentdefinition = definitions.load path
     name = componentdefinition.name
    end
  end

  # Test edgecases for values passed to this method.
  #def test_name_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_name_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_name_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.entities
  # @file                rcomponentdefinition.cpp
  #
  # The entities method retrieves a collection of all the entities in the
  # component definition
  #
  #
  # Args:
  #
  # Returns:
  # - entities: an Entities object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_entities_api_example
    assert_nothing_raised do
     componentdefinition = Sketchup.active_model.definitions[0]
     entities = componentdefinition.entities
    end
  end

  # Test edgecases for values passed to this method.
  #def test_entities_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_entities_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_entities_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # Test that the entities method returns an Entities object.
  def test_entities_returns_entities_obj
    obj = Sketchup.active_model.definitions.add 'testup_definition'
    ents = obj.entities
    result = ents.class
    expected = Sketchup::Entities
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.load_from_url
  # @file                rcomponentdefinition.cpp
  #
  # The load_from_url method loads a component from a location specified
  # by string url. Returns the Sketchup::ComponentDefinition object that
  # is loaded. This method throws an exception if an url string is not
  # given, or an error occurs during retrieval from url and a load_handler
  # was not given. Optional second parameter load_handler can be used to
  # pass in a ruby object that responds to the following methods:
  #
  # cancelled?(a_boolean)
  # onPercentChange(a_float)
  # onSuccess()
  # onFailure(message_string)
  #
  #
  # Args:
  # - url: URL to load a .skp file from.
  # - load_handler: (optional) Ruby object that has methods defined as
  # described in the load_from_url details.
  #
  # Returns:
  # - : true if successful
  #

  # Test the example code that we have in the API documentation.
  def test_load_from_url_api_example
    assert_nothing_raised do
     # Need ruby code example here.
    end
  end

  # Test edgecases for values passed to this method.
  #def test_load_from_url_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_load_from_url_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_load_from_url_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.path
  # @file                rcomponentdefinition.cpp
  #
  # The path method is used to retrieve the path where the component was
  # loaded.
  #
  # Returns nil if it is an internal component.
  #
  #
  # Args:
  #
  # Returns:
  # - path: a valid path if successful, false if
  # unsuccessful
  #

  # Test the example code that we have in the API documentation.
  def test_path_api_example
    assert_nothing_raised do
     path = Sketchup.find_support_file "Bed.skp",
       "Components/Components Sampler/"
     model = Sketchup.active_model
     definitions = model.definitions
     componentdefinition = definitions.load path
     path = componentdefinition.path
    end
  end

  # Test edgecases for values passed to this method.
  #def test_path_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_path_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_path_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.save_as
  # @file                rcomponentdefinition.cpp
  #
  # The save_as method is used to save your definition as a SketchUp file
  # at the specified file destination.
  #
  #
  # Args:
  # - file_path: Local file path to save the .skp file to.
  #
  # Returns:
  # - : true if successful
  #

  # Test the example code that we have in the API documentation.
  def test_save_as_api_example
    assert_nothing_raised do
     my_definition = Sketchup.active_model.definitions[0]
     success = my_definition.save_as "c:\\myComponent.skp"
    end
  end

  # Test edgecases for values passed to this method.
  #def test_save_as_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_save_as_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_save_as_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.internal?
  # @file                rcomponentdefinition.cpp
  #
  # The internal? method is used to determine if the component definition
  # is internal to the Component Browser
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if the component definition is internal
  # to SketchUp's Component Browser. False if the
  # component definition is not internal to SketchUp.
  #

  # Test the example code that we have in the API documentation.
  def test_internal_api_example
    assert_nothing_raised do
     point = Geom::Point3d.new 10,20,30
     transform = Geom::Transformation.new point
     model = Sketchup.active_model
     entities = model.active_entities
     path = Sketchup.find_support_file "Bed.skp",
       "Components/Components Sampler/"
     definitions = model.definitions
     componentdefinition = definitions.load path
     status = componentdefinition.internal?
    end
  end

  # Test edgecases for values passed to this method.
  #def test_internal_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_internal_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_internal_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.count_instances
  # @file                rcomponentdefinition.cpp
  #
  # The count_instances method is used to count the number of component
  # instances in a model using this component definition.
  #
  #
  # Args:
  #
  # Returns:
  # - count: the number of component instances of this
  # component definition (if successful)
  #

  # Test the example code that we have in the API documentation.
  def test_count_instances_api_example
    assert_nothing_raised do
     path = Sketchup.find_support_file "Bed.skp",
       "Components/Components Sampler/"
     model = Sketchup.active_model
     definitions = model.definitions
     componentdefinition = definitions.load path
     number = componentdefinition.count_instances
     if (number)
       UI.messagebox number.to_s
     else
       UI.messagebox "Failure"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_count_instances_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_count_instances_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_count_instances_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.insertion_point=
  # @file                rcomponentdefinition.cpp
  #
  # Sets the insertion point of your definition.
  #
  #
  # Args:
  # - new_point: The Point3d object to use as the insertion point.
  #
  # Returns:
  # - definition: the updated ComponentDefinition
  # object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_set_insertion_point_api_example
    assert_nothing_raised do
     some_point3d = Geom::Point3d.new(1,0,0)
     componentdefinition = Sketchup.active_model.definitions[0]
     componentdefinition.insertion_point = some_point3d
    end
  end

  # Test edgecases for values passed to this method.
  #def test_set_insertion_point_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_set_insertion_point_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_set_insertion_point_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.invalidate_bounds
  # @file                rcomponentdefinition.cpp
  #
  # Invalidates the bounding box of your definition. This command forces
  # the update of the bounding box of definition while inside an
  # operation. See Model.start_operation for how to start an operation.
  #
  # This method is useful if you make changes to your geometry using the
  # Ruby API and then need to know your bounding box size. This method
  # forces SketchUp to recalucalte the definition's bounding box when you
  # choose.
  #
  #
  # Args:
  #
  # Returns:
  # - : true if successful
  #

  # Test the example code that we have in the API documentation.
  def test_invalidate_bounds_api_example
    assert_nothing_raised do
     componentdefinition = Sketchup.active_model.definitions[0]
     componentdefinition.invalidate_bounds
    end
  end

  # Test edgecases for values passed to this method.
  #def test_invalidate_bounds_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_invalidate_bounds_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_invalidate_bounds_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.image?
  # @file                rcomponentdefinition.cpp
  #
  # The image? method is used to determine if this component definition is
  # used to define an image.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if the component definition defines an
  # image, false if the component definition does not
  # define an image.
  #

  # Test the example code that we have in the API documentation.
  def test_image_api_example
    assert_nothing_raised do
     componentdefinition = Sketchup.active_model.definitions[0]
     status = componentdefinition.image?
     if (status)
       UI.messagebox "Component definition defines an image"
     else
       UI.messagebox status.to_s
       UI.messagebox "Component definition does not define an image"
     end
    end
  end

  # Test edgecases for values passed to this method.
  #def test_image_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_image_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_image_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.add_observer
  # @file                rcomponentdefinition.cpp
  #
  # The add_observer method is used to add an observer to the current
  # object.
  #
  #
  #
  # Args:
  # - observer: An observer.
  #
  # Returns:
  # - : true if successful, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_add_observer_api_example
    observer = Object.new
    assert_nothing_raised do
     componentdefinition = Sketchup.active_model.definitions[0]
     status = componentdefinition.add_observer observer
    end
  end

  # Test edgecases for values passed to this method.
  #def test_add_observer_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_add_observer_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_add_observer_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.remove_observer
  # @file                rcomponentdefinition.cpp
  #
  # The remove_observer method is used to remove an observer from the
  # current object.
  #
  #
  # Args:
  # - observer: An observer.
  #
  # Returns:
  # - : true if successful, false if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_remove_observer_api_example
    observer = Object.new
    assert_nothing_raised do
     componentdefinition = Sketchup.active_model.definitions[0]
     status = componentdefinition.remove_observer observer
    end
  end

  # Test edgecases for values passed to this method.
  #def test_remove_observer_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_remove_observer_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_remove_observer_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.group?
  # @file                rcomponentdefinition.cpp
  #
  # The group? method is used to determine if this component definition is
  # used to hold the elements of a group.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if the definition is used to hold a
  # group, false if the definition does not hold a group.
  #

  # Test the example code that we have in the API documentation.
  def test_group_api_example
    assert_nothing_raised do
     path = Sketchup.find_support_file "Bed.skp",
       "Components/Components Sampler/"
     model = Sketchup.active_model
     definitions = model.definitions
     componentdefinition = definitions.load path
     status = componentdefinition.group?
    end
  end

  # Test edgecases for values passed to this method.
  #def test_group_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_group_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_group_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.description
  # @file                rcomponentdefinition.cpp
  #
  # The description method is used to retrieve the description of the
  # component definition.
  #
  # Component definitions do not have a description, by default.
  #
  #
  # Args:
  #
  # Returns:
  # - description: the description of the component
  # definition if successful
  #

  # Test the example code that we have in the API documentation.
  def test_description_api_example
    assert_nothing_raised do
     # Get the description
     componentdefinition = Sketchup.active_model.definitions[0]
     description = componentdefinition.description
    end
  end

  # Test edgecases for values passed to this method.
  #def test_description_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_description_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_description_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.==
  # @file                rcomponentdefinition.cpp
  #
  # The == method is used to test if two ComponentDefinition objects are
  # the same (based on their address in memory).
  #
  #
  #
  # Args:
  # - compdef1: The first component definition in the comparison.
  # - compdef2: The second component definition in the comparison.
  #
  # Returns:
  # - status: true if the ComponentDefinition objects are
  # the same object. False if the objects are not the same.
  #

  # Test the example code that we have in the API documentation.
  def test_equals_api_example
    assert_nothing_raised do
     c1=Sketchup.find_support_file "Bed.skp",
       "Components/Components Sampler/"
     c2=Sketchup.find_support_file "Fence.skp",
       "Components/Components Sampler/"
       # Need example ruby code here.
    end
  end

  # Test edgecases for values passed to this method.
  #def test_equals_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_equals_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_equals_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.behavior
  # @file                rcomponentdefinition.cpp
  #
  # The behavior method is used to retrieve the Behavior object associated
  # with a component definition.
  #
  #
  # Args:
  #
  # Returns:
  # - behavior: a Behavior object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_behavior_api_example
    assert_nothing_raised do
     path = Sketchup.find_support_file "Bed.skp",
       "Components/Components Sampler/"
     model = Sketchup.active_model
     definitions = model.definitions
     componentdefinition = definitions.load path
     behavior = componentdefinition.behavior
    end
  end

  # Test edgecases for values passed to this method.
  #def test_behavior_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_behavior_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_behavior_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.description=
  # @file                rcomponentdefinition.cpp
  #
  # The description= method is used to set the description for the
  # component definition.
  #
  #
  # Args:
  #
  # Returns:
  # - status: the description if successful, false if
  # unsuccessful
  #

  # Test the example code that we have in the API documentation.
  def test_set_description_api_example
    assert_nothing_raised do
     componentdefinition = Sketchup.active_model.definitions[0]
     componentdefinition.description = "This is a traditional bed"
     description = componentdefinition.description
    end
  end

  # Test edgecases for values passed to this method.
  #def test_set_description_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_set_description_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_set_description_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # Test that the set description method works with strings.
  def test_set_description_works_with_string
    obj = Sketchup.active_model.definitions.add 'testup_definition'
    messy_string = 'TestString!@#%^*&(*_[]}{:"":><.,?>/.\|'
    obj.description = messy_string
    result = obj.description
    expected = messy_string
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.<=>
  # @file                rcomponentdefinition.cpp
  #
  # The <=> method is used to compare two ComponentDefinition objects for
  # sorting. The comparison is done based on the component name.
  #
  #
  # Args:
  # - compdeft1: The first component definition in the comparison.
  # - compdef2: The second component definition in the comparison.
  #
  # Returns:
  # - status: a -1 if component1 is less then component2. A
  # 1 if component1 greater than component2
  #

  # Test the example code that we have in the API documentation.
  def test_sortcallback_api_example
    assert_nothing_raised do
     # Need example ruby code here.
    end
  end

  # Test edgecases for values passed to this method.
  #def test_sortcallback_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_sortcallback_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_sortcallback_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    ComponentDefinition.name=
  # @file                rcomponentdefinition.cpp
  #
  # The name= method is used to set the name of the component definition.
  #
  #
  # Args:
  #
  # Returns:
  # - name: the name assigned to the component definition if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_set_name_api_example
    assert_nothing_raised do
     path = Sketchup.find_support_file "Bed.skp",
       "Components/Components Sampler/"
     model = Sketchup.active_model
     definitions = model.definitions
     componentdefinition = definitions.load path
     name = componentdefinition.name="Bed"
    end
  end

  # Test edgecases for values passed to this method.
  #def test_set_name_edgecases
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_equal('expected', 'result',
  #               'Failed in test_set_name_edgecases' )
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_set_name_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # Test that the set name method works with strings.
  def test_set_name_works_with_string
    obj = Sketchup.active_model.definitions.add 'testup_definition'
    messy_string = 'TestString!@#%^*&(*_[]}{:"":><.,?>/.\|'
    obj.name = messy_string
    result = obj.name
    expected = messy_string
    assert_equal(expected, result, 'Expected does not match result.')
  end

end
