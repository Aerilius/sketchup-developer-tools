# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API AttributeDictionary object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_AttributeDictionary contains unit tests for the AttributeDictionary class.
#
# API Object::       AttributeDictionary
# C++ File::         rattribute.cpp
# Parent Class::     Object
# Version::          SketchUp 6.0
#
# The AttributeDictionary class allows you to attach arbitrary collections of
# attributes to a SketchUp entity. The attributes are defined by key/value
# pairs where the keys are strings.  An Entity or Model object can have any
# number of AttributeDictionaries.
#
#
class TC_AttributeDictionary < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  def setup
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    AttributeDictionary.each_key
  # @file                rattribute.cpp
  #
  # The each_key method is used to iterate through all of the attribute
  # keys. This is the same method as AttributeDictionary.each.
  #
  # Throws an exception if there are no keys.
  #
  #
  # Args:
  # - key: A variable that will hold each key as they are found.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_each_key_api_example
    assert_nothing_raised do
     create_if_nil = true
     model = Sketchup.active_model
     attrdict = model.attribute_dictionary "test_dict", create_if_nil
     attrdict["attr_one"] = "one"
     attrdict["attr_two"] = "two"

     # iterates through all attributes and prints the key to the screen
     attrdict = model.attribute_dictionaries['test_dict']
     attrdict.each_key { | key | UI.messagebox key }
    end
  end

  # Test to make sure that an empty attribute dictionary is not iterated over.
  def test_each_key_when_empty
    count = 0
    assert_nothing_raised do
     create_if_nil = true
     model = Sketchup.active_model
     attrdict = model.attribute_dictionary "each_key_test", create_if_nil

     # iterates through all attributes
     attrdict.each_key { | key | count = count + 1 }
    end
    expected_count = 0
    assert_equal(expected_count, count,
                 'Failed in test_each_key_when_empty' )
  end


  # Test that the number of iterations is equal to the reported length.
  def test_each_key_iterations_matches_length
    model = Sketchup.active_model
    attrdict = model.attribute_dictionary "testup", true
    attrdict["attr_one"] = "one"
    collection = Sketchup.active_model.attribute_dictionary 'testup', true
    count = 0
    collection.each_key do |key|
      count = count + 1
    end
    expected = collection.length
    result = count
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    AttributeDictionary.each
  # @file                rattribute.cpp
  #
  # The each method is used to iterate through all of the attributes.
  #
  # Throws an exception if there are no keys.
  #
  #
  # Args:
  # - key,: value Variables that will hold each key and value as they are
  # found.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_each_api_example
    assert_nothing_raised do
      create_if_nil = true
      model = Sketchup.active_model
      attrdict = model.attribute_dictionary "test_dict", create_if_nil
      attrdict["attr_one"] = "one"
      attrdict["attr_two"] = "two"

      # iterates through all attributes and prints the key to the screen
      attrdict = model.attribute_dictionaries['test_dict']
      attrdict.each do |name, attr|
        UI.messagebox("#{name}, #{attr}")
      end
    end
  end

  # Test that the number of iterations is equal to the reported length.
  def test_each_iterations_matches_length
    model = Sketchup.active_model
    attrdict = model.attribute_dictionary "testup", true
    attrdict["attr_one"] = "one"
    collection = Sketchup.active_model.attribute_dictionary 'testup', true
    count = 0
    collection.each do |name, attr|
      count = count + 1
    end
    expected = collection.length
    result = count
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    AttributeDictionary.size
  # @file                rattribute.cpp
  #
  # The length method is used to retrieve the size (number of elements) of
  # an attribute dictionary.
  #
  #
  # Args:
  #
  # Returns:
  # - size: the size of the attribute dictionary if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_size_api_example
    attrdict = nil
    assert_nothing_raised do
     create_if_nil = true
     model = Sketchup.active_model
     attrdict = model.attribute_dictionary "test_dict", create_if_nil
     attrdict["attr_one"] = "one"
     attrdict["attr_two"] = "two"

     # Show the length.
     attrdict = model.attribute_dictionaries['test_dict']
     UI.messagebox attrdict.size
    end
    size = attrdict.size
    expected_size = 2
    assert_equal(expected_size, size,
                 'Failed in test_size' )
  end

  # Test edgecases for values passed to this method.
  def test_size_when_empty
    attrdict = nil
    assert_nothing_raised do
     create_if_nil = true
     model = Sketchup.active_model
     attrdict = model.attribute_dictionary "size_test", create_if_nil
    end
    attrdict.size
    expected_count = 0
    assert_equal(expected_count, attrdict.size,
                 'Failed in test_each_key_when_empty' )
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    AttributeDictionary.name
  # @file                rattribute.cpp
  #
  # The name method is used to retrieve the name of an attribute
  # dictionary.
  #
  #
  #
  # Args:
  #
  # Returns:
  # - name: the name of the attribute dictionary if
  # successful
  #

  # Test the example code that we have in the API documentation.
  def test_name_api_example
    attrdict = nil
    assert_nothing_raised do
     create_if_nil = true
     model = Sketchup.active_model
     attrdict = model.attribute_dictionary "test_dict", create_if_nil
     attrdict["attr_one"] = "one"
     attrdict["attr_two"] = "two"

     # Show the name.
     UI.messagebox attrdict.name
    end
    expected_name = "test_dict"
    assert_equal(expected_name, attrdict.name,
                 'Failed in test_name' )
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    AttributeDictionary.keys
  # @file                rattribute.cpp
  #
  # The keys method is used to retrieve an array with all of the attribute
  # keys.
  #
  #
  # Args:
  #
  # Returns:
  # - keys: an array of keys within the attribute dictionary
  # if successful
  #

  # Test the example code that we have in the API documentation.
  def test_keys_api_example
    assert_nothing_raised do
     create_if_nil = true
     model = Sketchup.active_model
     attrdict = model.attribute_dictionary "test_dict", create_if_nil
     attrdict["attr_one"] = "one"
     attrdict["attr_two"] = "two"

     # Gets an array of keys
     attrdict = model.attribute_dictionaries['test_dict']
     keys = attrdict.keys
    end
  end

  # Test to make sure that an empty attribute dictionary returns empty array.
  def test_keys_when_empty

    create_if_nil = true
    model = Sketchup.active_model
    attrdict = model.attribute_dictionary "keys_test", create_if_nil
    a = attrdict.keys
    result = a.class
    expected = Array
    assert_equal(expected, result, 'Expected does not match result.')

    expected_length = 0
    assert_equal(expected_length, a.length,
                 'Failed in test_keys_when_empty' )
  end

  # Test that the entities method returns an Array object.
  def test_keys_returns_array
    obj = Sketchup.active_model.attribute_dictionary 'testup', true
    keys = obj.keys
    result = keys.class
    expected = Array
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    AttributeDictionary.length
  # @file                rattribute.cpp
  #
  # An alias for size. See AttributeDictionary.size.
  #
  #
  #
  # Args:
  #
  # Returns:
  # - length: the length (size) of the attribute dictionary.
  #

  # Test the example code that we have in the API documentation.
  def test_length_api_example
    attrdict = nil
    assert_nothing_raised do
     create_if_nil = true
     model = Sketchup.active_model
     attrdict = model.attribute_dictionary "test_dict", create_if_nil
     attrdict["attr_one"] = "one"
     attrdict["attr_two"] = "two"

     # Show the length.
     attrdict = model.attribute_dictionaries['test_dict']
     UI.messagebox attrdict.length
    end
    length = attrdict.length
    expected_length = 2
    assert_equal(expected_length, length,
                 'Failed in test_length' )
  end

  # Test edgecases for values passed to this method.
  def test_length_when_empty
    attrdict = nil
    assert_nothing_raised do
     create_if_nil = true
     model = Sketchup.active_model
     attrdict = model.attribute_dictionary "length_test", create_if_nil
    end
    attrdict.length
    expected_count = 0
    assert_equal(expected_count, attrdict.length,
                 'Failed in test_each_key_when_empty' )
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    AttributeDictionary.delete_key
  # @file                rattribute.cpp
  #
  # The delete_key method is used to delete an attribute with a given key.
  #
  #
  # Args:
  # - key: The key to be deleted.
  #
  # Returns:
  # - value: the value of the key
  #

  # Test the example code that we have in the API documentation.
  def test_delete_key_api_example
    attrdict = nil
    assert_nothing_raised do
     create_if_nil = true
     model = Sketchup.active_model
     attrdict = model.attribute_dictionary "test_dict", create_if_nil
     attrdict["attr_one"] = "one"
     attrdict["attr_two"] = "two"

     # Gets an array of values
     attrdict = model.attribute_dictionaries['test_dict']
     value = attrdict.delete_key("attr_one")
    end
    expected_size = 1

    assert_equal(expected_size, attrdict.size,
                 'Failed in test_delete_key' )
  end

  # Test edgecases for values passed to this method.
  def test_delete_key_when_does_not_exist
    value = nil
    assert_nothing_raised do
     create_if_nil = true
     model = Sketchup.active_model
     attrdict = model.attribute_dictionary "test_delete_key", create_if_nil

     # Gets an array of values
     attrdict = model.attribute_dictionaries['test_delete_key']
     value = attrdict.delete_key("nonexistent_key")
    end
    expected_value = nil
    assert_equal(expected_value, value,
                 'Failed in test_delete_key_when_does_not_exist' )
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    AttributeDictionary.values
  # @file                rattribute.cpp
  #
  # The values method is used to retrieve an array with all of the
  # attribute values.
  #
  #
  # Args:
  #
  # Returns:
  # - keys: an array of keys within the attribute dictionary
  # if successful
  #

  # Test the example code that we have in the API documentation.
  def test_values_api_example
    assert_nothing_raised do
     create_if_nil = true
     model = Sketchup.active_model
     attrdict = model.attribute_dictionary "test_dict", create_if_nil
     attrdict["attr_one"] = "one"
     attrdict["attr_two"] = "two"

     # Gets an array of values
     attrdict = model.attribute_dictionaries['test_dict']
     values = attrdict.values
    end
  end

  # Test to make sure that an empty attribute dictionary returns empty array.
  def test_values_when_empty

    create_if_nil = true
    model = Sketchup.active_model
    attrdict = model.attribute_dictionary "values_test", create_if_nil
    a = attrdict.values
    result = a.class
    expected = Array
    assert_equal(expected, result, 'Expected does not match result.')

    expected_length = 0
    assert_equal(expected_length, a.length,
                 'Failed in test_values_when_empty' )
  end

  # Test that the entities method returns an Array object.
  def test_values_returns_array
    obj = Sketchup.active_model.attribute_dictionary 'testup', true
    values = obj.values
    result = values.class
    expected = Array
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    AttributeDictionary.[]
  # @file                rattribute.cpp
  #
  # The get value method is used to retrieve the attribute with a given
  # key.
  #
  #
  # Args:
  # - key: The name of the attribute.
  #
  # Returns:
  # - attribute: the attribute stored under your key, or
  # nil if not found
  #

  # Test the example code that we have in the API documentation.
  def test_arrayget_api_example
    value = nil
    assert_nothing_raised do
     model = Sketchup.active_model
     value = model.set_attribute "testdictionary", "test", 115
     attrdicts = model.attribute_dictionaries
     attrdict = attrdicts["testdictionary"]

     # value will contain 115
     value = attrdict["test"]
    end
    expected_value = 115
    assert_equal(expected_value, value,
                 'Failed in test_arrayget' )
  end

  # Test that nil is returned if there is a negative index requested.
  def test_arrayget_nil_on_negative_index
    model = Sketchup.active_model
    attrdict = model.attribute_dictionary "testup", true
    attrdict["attr_one"] = "one"
    collection = Sketchup.active_model.attribute_dictionary 'testup', true
    expected = nil
    result = collection[-1]
    assert_equal(expected, result,
                 'Expected does not match result.')
  end

  # Test that nil is returned if there is a non-existent index requested.
  # We use the length of the collection to our non-existent index.
  def test_arrayget_nil_on_nonexistent_index
    model = Sketchup.active_model
    attrdict = model.attribute_dictionary "testup", true
    attrdict["attr_one"] = "one"
    collection = Sketchup.active_model.attribute_dictionary 'testup', true
    expected = nil
    result = collection[collection.length]
    assert_equal(expected, result,
                 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    AttributeDictionary.[]=
  # @file                rattribute.cpp
  #
  # The set value ([]=) method is used to set the value of an attribute
  # with a given key.
  #
  # Creates a new attribute for the given key if needed.
  #
  #
  # Args:
  # - key: The valid key.
  # - value: The value to be set.
  #
  # Returns:
  # - value: the value that was set if successful, or false
  # if unsuccessful.
  #

  # Test the example code that we have in the API documentation.
  def test_arrayset_api_example
    value = nil
    assert_nothing_raised do
     model = Sketchup.active_model
     value = model.set_attribute "testdictionary", "test", 110
     attrdicts = model.attribute_dictionaries
     attrdict = attrdicts["testdictionary"]
     value = attrdict["test2"] = 120
     if (value)
       UI.messagebox value
     end
    end
    expected_value = 120
    assert_equal(expected_value, value,
                 'Failed in test_arrayset' )
  end

  # Test setting to nil.
  def test_arrayset_to_nil
    value = nil
    assert_nothing_raised do
     model = Sketchup.active_model
     value = model.set_attribute "testdictionary", "test", 110
     attrdicts = model.attribute_dictionaries
     attrdict = attrdicts["testdictionary"]
     value = attrdict["test2"] = 120
     value = attrdict["test2"] = nil
     if (value)
       UI.messagebox value
     end
    end
    expected_value = nil
    assert_equal(expected_value, value,
                 'Failed in test_arrayset' )
  end

  # Test setting to float.
  def test_arrayset_to_float
    value = nil
    assert_nothing_raised do
     model = Sketchup.active_model
     value = model.set_attribute "testdictionary", "test", 110
     attrdicts = model.attribute_dictionaries
     attrdict = attrdicts["testdictionary"]
     value = attrdict["test2"] = 120.12345
     if (value)
       UI.messagebox value
     end
    end
    expected_value = 120.12345
    assert_equal(expected_value, value,
                 'Failed in test_arrayset' )
  end


  # Test setting to string.
  def test_arrayset_to_string
    value = nil
    assert_nothing_raised do
     model = Sketchup.active_model
     value = model.set_attribute "testdictionary", "test", 110
     attrdicts = model.attribute_dictionaries
     attrdict = attrdicts["testdictionary"]
     value = attrdict["test2"] = "string"
     if (value)
       UI.messagebox value
     end
    end
    expected_value = "string"
    assert_equal(expected_value, value,
                 'Failed in test_arrayset' )
  end

  # Test setting to entity.
  def test_arrayset_to_entity
    value = nil
    assert_nothing_raised do
     model = Sketchup.active_model
     value = model.set_attribute "testdictionary", "test", 110
     attrdicts = model.attribute_dictionaries
     attrdict = attrdicts["testdictionary"]
     value = attrdict["test2"] = Sketchup.active_model
     if (value)
       UI.messagebox value
     end
    end
    expected_value = Sketchup.active_model
    assert_equal(expected_value, value,
                 'Failed in test_arrayset' )
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    AttributeDictionary.each_pair
  # @file                rattribute.cpp
  #
  # An alias for each. See AttributeDictionary.each.
  #
  # Throws an exception if there are no keys.
  #
  #
  # Args:
  # - key,: value Variables that will hold each key and value as they are
  # found.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_each_pair_api_example
    assert_nothing_raised do
     create_if_nil = true
     model = Sketchup.active_model
     attrdict = model.attribute_dictionary "test_dict", create_if_nil
     attrdict["attr_one"] = "one"
     attrdict["attr_two"] = "two"

     # iterates through all attributes and prints the key to the screen
     attrdict = model.attribute_dictionaries['test_dict']
     attrdict.each_pair { | key, value |
       UI.messagebox key.to_s + '=' + value.to_s
     }
    end
  end

  # Test to make sure that an empty attribute dictionary is not iterated over.
  def test_each_pair_when_empty
    count = 0
    assert_nothing_raised do
     create_if_nil = true
     model = Sketchup.active_model
     attrdict = model.attribute_dictionary "each_pair_test", create_if_nil

     # iterates through all attributes
     attrdict.each_pair { |key, value| count = count + 1 }
    end
    expected_count = 0
    assert_equal(expected_count, count,
                 'Failed in test_each_pair_when_empty' )
  end


  # Test that the number of iterations is equal to the reported length.
  def test_each_pair_iterations_matches_length
    model = Sketchup.active_model
    attrdict = model.attribute_dictionary "testup", true
    attrdict["attr_one"] = "one"
    collection = Sketchup.active_model.attribute_dictionary 'testup', true
    count = 0
    collection.each_pair do |key,value|
      count = count + 1
    end
    expected = collection.length
    result = count
    assert_equal(expected, result, 'Expected does not match result.')
  end

end
