# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Page object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Page contains unit tests for the Page class.
#
# API Object::       Page
# C++ File::         rpage.cpp
# Parent Class::     Pages
# Version::          SketchUp 6.0
#
# The Page class contains methods to extract information and modify the
# properties of an individual page.
#
# Note that inside the SketchUp user interfaces calls pages "Scenes". These
# are the same entity just with different names.
#
class TC_Page < Test::Unit::TestCase

  # Setup for test cases, if required.
  #
  #def setup
  #  model = Sketchup.active_model
  #  pages = model.pages
  #  @setup_page = pages.add "Setup Page"
  #end

  #def teardown
  #  model = Sketchup.active_model
  #  model.pages.each do |page|
  #    model.pages.erase page
  #  end 
  #end

  #@setup_page

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.use_hidden_layers=
  # @file                rpage.cpp
  #
  # The use_hidden_layers= method sets the page to store the hidden layers
  # property.
  #
  #
  # Args:
  # - setting: true if you want your page to save this property, false if
  # you do not want your page to save this property.
  #
  # Returns:
  # - status: true if you are saving the property, false if
  # you are not saving the property.
  #

  # Test the example code that we have in the API documentation.
  def test_set_use_hidden_layers_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      page = pages.add "My Page"
      status = page.use_hidden_layers = false
    end
  end

  # Test edgecases for values passed to this method.
  def test_set_use_hidden_layers_edgecases
    model = Sketchup.active_model
    pages = model.pages
    page = pages.add "My Page"

    status = page.use_hidden_layers = false
    assert_equal(false, status)
    assert_equal(false, page.use_hidden_layers?)

    status = page.use_hidden_layers = true
    assert_equal(true, status)
    assert_equal(true, page.use_hidden_layers?)
  end

  
  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.layers
  # @file                rpage.cpp
  #
  # The layers method retrieves the layers associated with a page.
  #
  #
  # Args:
  #
  # Returns:
  # - : layers = an array with zero or more Layers objects.
  #

  # Test the example code that we have in the API documentation.
  def test_layers_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     pages = model.pages
     page = pages.add "My Page"
     layers = page.layers
    end
  end

  # Test that the entities method returns an Array object.
  def test_layers_returns_layers_obj
    obj = Sketchup.active_model.pages.add 'Testup Page'
    layers_obj = obj.layers
    result = layers_obj.class
    expected = Array
    assert_equal(expected, result, 'Expected does not match result.')
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.hidden_entities
  # @file                rpage.cpp
  #
  # The hidden_entities method retrieves all hidden entities within a
  # page.
  #
  #
  # Args:
  #
  # Returns:
  # - entities: an Entities object containing hidden
  # entities on the page.
  #

  # Test the example code that we have in the API documentation.
  def test_hidden_entities_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      page = pages.add "My Page"
      entities = page.hidden_entities
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.use_axes=
  # @file                rpage.cpp
  #
  # The use_axes= method sets the page to store the axes property.
  #
  #
  # Args:
  # - pagesetting: true if you want your page to save this property, false
  # if you do not want your page to save this property.
  #
  # Returns:
  # - status: true if you are saving the property, false if
  # you are not saving the property.
  #

  # Test the example code that we have in the API documentation.
  def test_set_use_axes_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     pages = model.pages
     page = pages.add "My Page"
     # Set use_axes to false
     status = page.use_axes=false
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.use_camera=
  # @file                rpage.cpp
  #
  # The use_camera= method sets the page to store the camera property.
  #
  #
  # Args:
  # - setting: true if you want your page to save this property, false if
  # you do not want your page to save this property.
  #
  # Returns:
  # - status: true if you are saving the property, false if
  # you are not saving the property.
  #

  # Test the example code that we have in the API documentation.
  def test_set_use_camera_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      page = pages.add "My Page"
      status = page.use_camera = true
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.name=
  # @file                rpage.cpp
  #
  # The name= method sets the name for a page's tab.
  #
  #
  # Args:
  # - name: The name of the page to be set.
  #
  # Returns:
  # - name: the name that you have set
  #

  # Test the example code that we have in the API documentation.
  def test_set_name_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      page = pages.add "My Page"
      name = page.name = "Page Name"
    end
  end


  # Test that the set name method works with strings.
  def test_set_name_works_with_string
    obj = Sketchup.active_model.pages.add 'Testup Page'
    messy_string = 'TestString!@#%^*&(*_[]}{:"":><.,?>/.\|'
    obj.name = messy_string
    result = obj.name
    expected = messy_string
    assert_equal(expected, result, 'Expected does not match result.')
  end



  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.use_hidden_layers?
  # @file                rpage.cpp
  #
  # The use_hidden_layers? method determines whether you are storing the
  # hidden layers property with the page.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if you are storing the this property with
  # the page, false if you are not storing this property
  # with the page.
  #

  # Test the example code that we have in the API documentation.
  def test_use_hidden_layers_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     pages = model.pages
     page = pages.add "My Page"
     status = page.use_hidden_layers?
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.use_rendering_options=
  # @file                rpage.cpp
  #
  # The use_rendering_optoins= method sets the page to store the display
  # settings property.
  #
  #
  # Args:
  # - setting: true if you want your page to save this property, false if
  # you do not want your page to save this property.
  #
  # Returns:
  # - status: true if you are saving the property, false
  # if you are not saving the property.
  #

  # Test the example code that we have in the API documentation.
  def test_set_use_rendering_options_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     pages = model.pages
     page = pages.add "My Page"
     status = page.use_rendering_options=false
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.set_visibility
  # @file                rpage.cpp
  #
  # The set_visibility method sets the visibility for a layer on a page.
  #
  #
  # Args:
  # - layer: The layer whose visibility you are setting.
  # - visibility: true if you want items on the layer to be visible, false
  # if you do not want items visible.
  #
  # Returns:
  # - page: the page whose visibility was set.
  #

  # Test the example code that we have in the API documentation.
  def test_set_visibility_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      page = pages.add "My Page"
      layer = page.layers[0]
      visibility = true
      page = page.set_visibility layer, visibility
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.shadow_info
  # @file                rpage.cpp
  #
  # The shadow_info method retrieves the ShadowInfo object for the page.
  #
  #
  # Args:
  #
  # Returns:
  # - shadowinfo: a ShadowInfo object if successful, nil if
  # the page does not save shadow information
  #

  # Test the example code that we have in the API documentation.
  def test_shadow_info_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     pages = model.pages
     page = pages.add "My Page"
     shadowinfo = page.shadow_info
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.use_section_planes=
  # @file                rpage.cpp
  #
  # The use_section_planes= method sets the page to store the section
  # planes property.
  #
  #
  # Args:
  # - setting: true if you want your page to save this property, false if
  # you do not want your page to save this property.
  #
  # Returns:
  # - status: true if you are saving the property, false if
  # you are not saving the property.
  #

  # Test the example code that we have in the API documentation.
  def test_set_use_section_planes_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     pages = model.pages
     page = pages.add "My Page"
     status = page.use_section_planes=false
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.use_axes?
  # @file                rpage.cpp
  #
  # The use_axes? method determines whether you are storing the axes
  # property with the page.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if you are storing the this property with
  # the page, false if you are not storing this property
  # with the page.
  #

  # Test the example code that we have in the API documentation.
  def test_use_axes_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     pages = model.pages
     page = pages.add "My Page"
     status = page.use_axes?
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.use_camera?
  # @file                rpage.cpp
  #
  # The use_camera? method determines whether you are storing the camera
  # property with the page.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if you are storing the this property with
  # the page, false if you are not storing this property
  # with the page.
  #

  # Test the example code that we have in the API documentation.
  def test_use_camera_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     pages = model.pages
     page = pages.add "My Page"
     status = page.use_camera?
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.use_style=
  # @file                rpage.cpp
  #
  # The use_style= method sets the style to be used by the page.
  #
  #
  # Args:
  # - style: The Style object to use.
  #
  # Returns:
  # - : nil
  #

  # Test the example code that we have in the API documentation.
  def test_set_use_style_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      page = pages.add "My Page"
      style = model.styles[0]
      page.use_style = style
    end
  end



  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.label
  # @file                rpage.cpp
  #
  # The label method retrieves the label for a page from the page tab.
  #
  #
  # Args:
  #
  # Returns:
  # - label: a string label for the page tab
  #

  # Test the example code that we have in the API documentation.
  def test_label_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      page = pages.add "My Page"
      label = page.label
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.camera
  # @file                rpage.cpp
  #
  # The camera method retrieves the camera for a particular page.
  #
  #
  # Args:
  #
  # Returns:
  # - camera: a Camera object if successful, nil if the page
  # does not save camera information
  #

  # Test the example code that we have in the API documentation.
  def test_camera_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      page = pages.add "My Page"
      camera = page.camera
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.use_rendering_options?
  # @file                rpage.cpp
  #
  # The use_rendering_options? method determines whether you are storing
  # the rendering options property with the page.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if you are storing the this property with
  # the page, false if you are not storing this property
  # with the page.
  #

  # Test the example code that we have in the API documentation.
  def test_use_rendering_options_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     pages = model.pages
     page = pages.add "My Page"
     status = page.use_rendering_options?
    end
  end



  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.description=
  # @file                rpage.cpp
  #
  # The description method sets the description for a page as found in the
  # Window > Scenes manager.
  #
  #
  # Args:
  # - description: A string description for the page.
  #
  # Returns:
  # - description: the new string description for the page
  #

  # Test the example code that we have in the API documentation.
  def test_set_description_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      page = pages.add "My Page"
      description = page.description = "This is my first page"
    end
  end


  # Test that the set description method works with strings.
  def test_set_description_works_with_string
    obj = Sketchup.active_model.pages.add 'Testup Page'
    messy_string = 'TestString!@#%^*&(*_[]}{:"":><.,?>/.\|'
    obj.description = messy_string
    result = obj.description
    expected = messy_string
    assert_equal(expected, result, 'Expected does not match result.')
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.rendering_options
  # @file                rpage.cpp
  #
  # The rendering_options method retrieves a RenderingOptions object for
  # the page.
  #
  #
  # Args:
  #
  # Returns:
  # - renderingoptions: a RenderingOptions object
  #

  # Test the example code that we have in the API documentation.
  def test_rendering_options_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      page = pages.add "My Page"
      renderingoptions = page.rendering_options
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.use_section_planes?
  # @file                rpage.cpp
  #
  # The use_section_planes? method determines whether you are storing the
  # section planes property with the page.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if you are storing the this property with
  # the page, false if you are not storing this property
  # with the page.
  #

  # Test the example code that we have in the API documentation.
  def test_use_section_planes_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     pages = model.pages
     page = pages.add "My Page"
     status = page.use_section_planes?
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.use_style?
  # @file                rpage.cpp
  #
  # The use_style? method determines whether storing a style with the
  # page.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if you are storing the this property with
  # the page, false if you are not storing this property
  # with the page.
  #

  # Test the example code that we have in the API documentation.
  def test_use_style_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      page = pages.add "My Page"
      use_style = page.use_style?
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.transition_time
  # @file                rpage.cpp
  #
  # Get the amount of time that it takes to transition to this page during
  # a slideshow or animation export. If this value is -1, it means to use
  # the default transitoin time.
  #
  #
  # Args:
  #
  # Returns:
  # - transitiontime: the amount of time it takes to
  # transition to this page during a slideshow or animation
  # export.
  #

  # Test the example code that we have in the API documentation.
  def test_transition_time_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     pages = model.pages
     page = pages.add "My Page"
     time = page.transition_time
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.use_hidden=
  # @file                rpage.cpp
  #
  # The use_hidden= method sets the page to store the hidden property.
  #
  #
  # Args:
  # - setting: true if you want your page to save this property, false if
  # you do not want your page to save this property.
  #
  # Returns:
  # - status: true if you are saving the property, false if
  # you are not saving the property.
  #

  # Test the example code that we have in the API documentation.
  def test_set_use_hidden_api_example
    assert_nothing_raised do
     model = Sketchup.active_model
     pages = model.pages
     page = pages.add "My Page"
     status = page.use_hidden=false
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.style
  # @file                rpage.cpp
  #
  # The style method retrieves the style associated with the page.
  #
  #
  # Args:
  #
  # Returns:
  # - style: the Style object if successful
  #

  # Test the example code that we have in the API documentation.
  def test_style_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      page = pages.add "My Page"
      style = page.style
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.use_shadow_info=
  # @file                rpage.cpp
  #
  # The use_shadow_info= method sets the page to store the shadow info
  # property.
  #
  #
  # Args:
  # - setting: true if you want your page to save this property, false if
  # you do not want your page to save this property.
  #
  # Returns:
  # - status: true if you are saving the property, false if
  # you are not saving the property.
  #

  # Test the example code that we have in the API documentation.
  def test_set_use_shadow_info_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      page = pages.add "My Page"
      status = page.use_shadow_info=false
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.description
  # @file                rpage.cpp
  #
  # The description method retrieves the description for a page as found
  # in the Window > Scenes manager.
  #
  #
  # Args:
  #
  # Returns:
  # - description: a textual description for the page.
  #

  # Test the example code that we have in the API documentation.
  def test_description_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      page = pages.add "My Page"
      description = page.description
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.update
  # @file                rpage.cpp
  #
  # The update method performs an update on the page properties based on
  # the current view that the user has. Which parts of the Page get
  # updated are controlled via an integer whose bits represent which parts
  # to update. You can determine the integer you need to pass by adding
  # these numbers together:
  #
  # 1 - Camera Location,
  # 2 - Drawing Style,
  # 4 - Shadow Settings,
  # 8 - Axes Location,
  # 16 - Hidden Geometry,
  # 32 - Visible Layers,
  # 64 - Active Section Planes.
  #
  # The bit code values are added together to provide the flags value.
  # For example, to update the Camera Location, Axes Location, and Active
  # Section Planes properties, the flag would be 73 (1 + 8 + 64).
  #
  #
  # Args:
  # - flags: Integer representing the sum of the bit flags.
  #
  # Returns:
  # - status: true if successful, false if unsuccessful
  #

  # Test the example code that we have in the API documentation.
  def test_update_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      page = pages.add "My Page"
      status = page.update

     # Updates Camera Location (+1), Shadow Settings(+4),
     # and Visible Layers (+32).
     status = page.update(37)
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.delay_time
  # @file                rpage.cpp
  #
  # The delay_time method retrieves the amount of time, in seconds, that a
  # page will be displayed (before transition to another page).
  #
  # The delay can be modified in the Model Info > Tourguide panel of the
  # SketchUp User Interface. If this method returns -1, the default delay
  # time of 3.5 seconds is used.
  #
  #
  # Args:
  #
  # Returns:
  # - time: the number of seconds of delay
  #

  # Test the example code that we have in the API documentation.
  def test_delay_time_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      page = pages.add "My Page"
      time = page.delay_time
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.use_hidden?
  # @file                rpage.cpp
  #
  # The use_hidden? method determines whether you are storing the hidden
  # property with the page.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if you are storing the this property with
  # the page, false if you are not storing this property
  # with the page.
  #

  # Test the example code that we have in the API documentation.
  def test_use_hidden_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      page = pages.add "My Page"
      status = page.use_hidden?
    end
  end



  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.transition_time=
  # @file                rpage.cpp
  #
  # The transition_time= method is used to set the transition time.
  #
  #
  # Args:
  # - trans_time: The transition time in seconds.
  #
  # Returns:
  # - transitiontime: the new transition time
  #

  # Test the example code that we have in the API documentation.
  def test_set_transition_time_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      page = pages.add "My Page"
      time = page.transition_time=20
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.use_shadow_info?
  # @file                rpage.cpp
  #
  # The use_shadow_info? method determines whether you are storing the
  # shadow info property with the page.
  #
  #
  # Args:
  #
  # Returns:
  # - status: true if you are storing the this property with
  # the page, false if you are not storing this property
  # with the page.
  #

  # Test the example code that we have in the API documentation.
  def test_use_shadow_info_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      page = pages.add "My Page"
      status = page.use_shadow_info?
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.delay_time=
  # @file                rpage.cpp
  #
  # The delay_time= method sets the amount of time, in seconds, that a
  # page will be displayed (before transitioning to another page).
  #
  # The delay can be modified in the Model Info > Tourguide panel of the
  # SketchUp User Interface.
  #
  #
  # Args:
  # - seconds: The number of seconds to set as the delay time.
  #
  # Returns:
  # - time: the number of seconds of delay
  #

  # Test the example code that we have in the API documentation.
  def test_set_delay_time_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      page = pages.add "My Page"
      time = page.delay_time = 10
    end
  end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Page.name
  # @file                rpage.cpp
  #
  # The name method retrieves the name for a page from the page tab.
  #
  #
  # Args:
  #
  # Returns:
  # - label: a string name for the page tab
  #

  # Test the example code that we have in the API documentation.
  def test_name_api_example
    assert_nothing_raised do
      model = Sketchup.active_model
      pages = model.pages
      page = pages.add "My Page"
      name = page.name
    end
  end


end