# Copyright:: Copyright 2012 Trimble Navigation Ltd.
# License:: Apache License version 2.0
# Original Author:: Scott Lininger 
#
# Tests the SketchUp Ruby API Material object.
#
# This file was originally generated by ourdoc.rb, an internal tool we developed
# specifically for outputting support files (documentation, unit tests, etc.)
# from the standard, doxygen-style c++ comments that are embedded into the
# Ruby implementation files. You can find ourdoc.rb alongside these
# implementation files at:
#
# googleclient/sketchup/source/sketchup/ruby
#

require 'test/unit'

# TC_Material contains unit tests for the Material class.
#
# API Object::       Material
# C++ File::         rmaterial.cpp
# Parent Class::     Entity
# Version::          SketchUp 6.0
#
# The Material class is used to access to the materials used in a model. It is
# most often applied to Faces.
#
# You can pass any object that can be used as a material to a method that
# requires a material. Objects include actual materials, color, and classes
# that can be converted to a color.
#
# The following are valid (assuming the existence of a Material mat1.)
class TC_Material < Test::Unit::TestCase


  # Setup for test cases, if required.
  #
  def setup
    #Assets for this test case
    test_model = 'materials-cube.skp'
    local_path = __FILE__.slice(0, __FILE__.rindex('.'))
    #puts "path : #{local_path}"
    test_model_path = local_path + '//' + test_model
    #puts "test model path : #{@test_model_path}"
    Sketchup.open_file test_model_path
    def UI::messagebox(params)
      puts 'TESTUP OVERRIDE: UI::messagebox > ' + params.to_s
    end
  end

  def teardown   
   Sketchup.active_model.materials.purge_unused
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Material.use_alpha?
  # @file                rmaterial.cpp
  #
  # The use_alpha? method tells if the material uses transparency.
  #
  #
  # Args:
  #
  # Returns:
  # - type: the material type for the Material object. See
  # summary for details.
  #

  # Test the example code that we have in the API documentation.
  def test_use_alpha_api_example
    material = Sketchup.active_model.materials[0]
    assert_nothing_raised do
      is_alpha = material.use_alpha?
    end
  end

  # Test that in the model I have opened there is at least a 
  # material with an alpha value
  def test_use_alpha_on_model_materials
    is_alpha = false
    materials = Sketchup.active_model.materials
    materials.each do |m|
      if m.use_alpha?
        is_alpha = true
      end
    end
    assert_equal(true, is_alpha,
                 'Failed in test_use_alpha_on_model_materials' )
  end

  # Test edgecases for values passed to this method.
  #def test_use_alpha_edgecases
  # raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  # assert_equal('expected', 'result',
  # 'Failed in test_use_alpha_edgecases' )
  #  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_use_alpha_bad_params
    assert_raise NoMethodError do
      nil.use_alpha?
    end
  end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Material.<=>
  # @file                rmaterial.cpp
  #
  # The <=> method is used to compare two materials based on name.
  #
  #
  # Args:
  # - material1: A Material object.
  # - material2: A Material object.
  #
  # Returns:
  # - status: 0 if they are equal, 1 if material 1 >
  # material 2, -1 if material 1 < material 2
  #

  # Test the example code that we have in the API documentation.
  def test_sortcallback_api_example
   Sketchup.active_model.start_operation "test_sortcallback_api_example"
   assert_nothing_raised do
     model = Sketchup.active_model
     materials = model.materials

     # Adds a material to the "in-use" material pallet.
     m = materials.add "Joe"
     m2 = materials.add "Fred"

     # Returns nil if not successful, path if successful.
     # Should return a texture object
     m.texture = "c:\\Materials\\Carpet.jpg"
     m2.texture = "c:\\Materials\\BlueTile.jpg"
     status = m <=> m2

     # Yields a positive number
     if (status)
       UI.messagebox status
     else
       UI.messagebox "Failure"
     end

     # Yields a negative number
     status = m2 <=> m
     if (status)
       UI.messagebox status
     else
       UI.messagebox "Failure"
     end
    end
  Sketchup.active_model.commit_operation
  Sketchup.undo
  end
  
  # Test edgecases for values passed to this method.
  def test_sortcallback_edgecases
   Sketchup.active_model.start_operation "test_sortcallback_edgecases"

    model = Sketchup.active_model
    materials = model.materials
    materials.each do |m|
      assert_equal(0, m <=> m,
                 'Failed in test_sortcallback_edgecases' )
    end
    
    # Adds a material to the "in-use" material pallet.
     m1 = materials.add "Joe"
     m2 = materials.add "Fred"

     # Returns nil if not successful, path if successful.
     # Should return a texture object
     m1.texture = "c:\\Materials\\Joe.jpg"
     m2.texture = "c:\\Materials\\Fred.jpg"
     
     status = m1 <=> m2 
     assert((status > 0),
            'Failed in test_sortcallback_edgecases')
    
     status = m2 <=> m1
     assert((status < 0),
            'Failed in test_sortcallback_edgecases')

  Sketchup.active_model.commit_operation
  Sketchup.undo
  end
  

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_sortcallback_bad_params
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Material.==
  # @file                rmaterial.cpp
  #
  # The == method is used to test if two materials are the same.
  #
  #
  # Args:
  # - material1: A Material object.
  # - material: 2 A Material object.
  #
  # Returns:
  # - status: true if the Materials are the same, false if
  # they are different
  #

  # Test the example code that we have in the API documentation.
  def test_equals_api_example
    Sketchup.active_model.start_operation "test_equals_api_example"
    assert_nothing_raised do
      model = Sketchup.active_model
      materials = model.materials

      # Adds a material to the "in-use" material pallet.
      m = materials.add "Joe"
      m2 = materials.add "Fred"

      # Returns nil if not successful, path if successful.
      # Should return a texture object.
      m.texture = "c:\\Materials\\Carpet.jpg"
      m2.texture = "c:\\Materials\\BlueTile.jpg"
      
      status = (m == m2)

      # Yields a False
      if (status)
        UI.messagebox status
      else
        UI.messagebox "The Materials are not Equal"
      end
    end
    Sketchup.active_model.commit_operation
    Sketchup.undo
  end
  

  # Test edgecases for values passed to this method.
  def test_equals_edgecases
    Sketchup.active_model.start_operation "test_equals_edgecases"
    model = Sketchup.active_model
    materials = model.materials
    materials.each do |m|
      assert_equal(true, m == m,
                 'Failed in test_equals_edgecases' )
    end
    Sketchup.active_model.commit_operation
    Sketchup.undo
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_equals_bad_params
  #  assert_raise RuntimeError do
  #  Sketchup.active_model.start_operation "test_equals_bad_params"
  #  Sketchup.active_model.commit_operation  
  #  end
  #end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Material.name
  # @file                rmaterial.cpp
  #
  # The name method retrieves the name of the material.
  #
  #
  # Args:
  #
  # Returns:
  # - name: the name of the Material object
  #

  # Test the example code that we have in the API documentation.
  def test_name_api_example
    Sketchup.active_model.start_operation "test_name_api_example"
    assert_nothing_raised do
     model = Sketchup.active_model
     materials = model.materials

     # Adds a material to the "in-use" material pallet.
     m = materials.add "Joe"
     m2 = materials.add "Fred"

     # Returns nil if not successful, path if successful.
     # Should return a texture object.
     m.texture = "c:\\Materials\\Carpet.jpg"
     m2.texture = "c:\\Materials\\BlueTile.jpg"
     
     name = m.name
     if (name)
       UI.messagebox name
     else
       UI.messagebox "Failure"
     end
    end
    Sketchup.active_model.commit_operation
    Sketchup.undo
  end

  # Test edgecases for values passed to this method.
  def test_name_edgecases
    Sketchup.active_model.start_operation "test_name_edgecases"
    
    model = Sketchup.active_model
    materials = model.materials

    # Adds a material to the "in-use" material pallet.
    m = materials.add "Joe"
    assert_equal("Joe", m.name, 'Failed in test_name_edgecases' )
    
    m1 = materials.add "Fred"
    assert_equal("Fred", m1.name, 'Failed in test_name_edgecases' )
    
    m2 = materials.add ""
    assert_equal("", m2.name, 'Failed in test_name_edgecases' )
    
    long_name = "verylongnameforamaterialverylongnamefora" +
                "materialverylongnameforamaterialverylong" + 
                "nameforamaterialverylongnameforamaterial" + 
                "verylongnameforamaterial"
    m3 = materials.add long_name
    assert_equal(long_name, m3.name, 'Failed in test_name_edgecases' )
    
    Sketchup.active_model.commit_operation
    Sketchup.undo
   end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_name_bad_params
    Sketchup.active_model.start_operation "test_name_bad_params"
    assert_raise ArgumentError do
      model = Sketchup.active_model
      materials = model.materials

      # Adds a material to the "in-use" material pallet.
      m = materials.add nil
    end
    Sketchup.active_model.commit_operation
    Sketchup.undo
    end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Material.color=
  # @file                rmaterial.cpp
  #
  # The color= method is used to set the color of the material.
  #
  # If the Material has a Texture, then this turns it into a colorized
  # Texture.
  #
  # To reset the color of a Material with a Texture, set the color to
  # nil.
  #
  #
  # Args:
  # - color: A Color object.
  #
  # Returns:
  # - color: the newly set Color object's name
  #

  # Test the example code that we have in the API documentation.
  def test_set_color_api_example
    Sketchup.active_model.start_operation "test_set_color_api_example"

    assert_nothing_raised do
     model = Sketchup.active_model
     materials = model.materials

     # Adds a material to the "in-use" material pallet.
     m = materials.add "Joe"
     m2 = materials.add "Fred"

     # Returns nil if not successful, path if successful.
     # Should return a texture object.
     m.texture = "c:\\Materials\\Carpet.jpg"
     m2.texture = "c:\\Materials\\BlueTile.jpg"
     color = m.color ="Blue"
     if (color)
       UI.messagebox color
     else
       UI.messagebox "Failure"
     end
    end
    Sketchup.active_model.commit_operation
    Sketchup.undo
  end

  # Test edgecases for values passed to this method.
  def test_set_color_edgecases
    Sketchup.active_model.start_operation "test_set_color_edgecases"
    model = Sketchup.active_model
    materials = model.materials

    # Adds a material to the "in-use" material pallet.
    m = materials.add "Joe"
    c = Sketchup::Color.new "Azure"
    m.color = "Azure"
    assert_equal(c.to_s, m.color.to_s,
                 'Failed in test_set_color_edgecases' )
    
    m1 = materials.add "Sandra"
    m1.color ="Red"
    c1 = Sketchup::Color.new "Red"
    assert_equal(c1.to_s, m1.color.to_s,
                 'Failed in test_set_color_edgecases' )
    
    Sketchup.active_model.commit_operation
    Sketchup.undo
  end
  

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_set_color_bad_params
    Sketchup.active_model.start_operation "test_set_color_badparams"
    assert_raise RangeError do
      model = Sketchup.active_model
      materials = model.materials
      m = materials.add "Simone"
      m.color = [7777777777,0,0,0] 
    end   
     Sketchup.active_model.commit_operation
     Sketchup.undo
  end
    
  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Material.materialType
  # @file                rmaterial.cpp
  #
  # The materialType method retrieves the type of the material. Types
  # include:
  #
  # 0 = solid,
  # 1 = textured,
  # 2 = colorized textured.
  #
  #
  # Args:
  #
  # Returns:
  # - type: the material type for the Material object. See
  # summary for details.
  #

  # Test the example code that we have in the API documentation.
  def test_materialtype_api_example
    Sketchup.active_model.start_operation "test_materialtype_api_example"
    assert_nothing_raised do
      model = Sketchup.active_model
      materials = model.materials
      material = materials[0]
      type = material.materialType
    end
    Sketchup.active_model.commit_operation
    Sketchup.undo
  end

  # Test edgecases for values passed to this method.
  def test_materialtype_edgecases
    Sketchup.active_model.start_operation "test_materialtype_api_example"
    model = Sketchup.active_model
    materials = model.materials
    
    materials.each do |m|   
    UI.messagebox "material type is: " + m.materialType.to_s
     assert_equal(true, (m.materialType == 0 or m.materialType == 1 or
                         m.materialType == 2 or m.materialType == 3 ),
                  'Failed in test_sortcallback_edgecases' )
    end  
    Sketchup.active_model.commit_operation
    Sketchup.undo
  end
  
  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_materialtype_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end


  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Material.alpha
  # @file                rmaterial.cpp
  #
  # The alpha= material is used to get the opacity of the material.
  #
  # The value will be between 0 and 1. A value of 0 means that the
  # material is completely transparent. A value of 1 means that the
  # Material is completely opaque.
  #
  #
  # Args:
  #
  # Returns:
  # - alpha: a number between 0 and 1
  #

  # Test the example code that we have in the API documentation.
  def test_alpha_api_example
    Sketchup.active_model.start_operation "test_alpha_api_example"     
     assert_nothing_raised do
     alpha_value = Sketchup.active_model.materials[0].alpha
    end
   Sketchup.active_model.commit_operation
   Sketchup.undo
   end

  # Test edgecases for values passed to this method.
  def test_alpha_edgecases
    Sketchup.active_model.start_operation "test_alpha_api_example"
     alpha_value = Sketchup.active_model.materials[0].alpha
    assert_equal(true, (alpha_value >= 0 and alpha_value <= 1),
                 'Failed in test_alpha_edgecases')
    Sketchup.active_model.commit_operation
    Sketchup.undo
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_alpha_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end
  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Material.display_name
  # @file                rmaterial.cpp
  #
  # The display_name method retrieves the name that is displayed within
  # SketchUp for the material.
  #
  # This should be used in most cases rather than using the name method.
  #
  #
  # Args:
  #
  # Returns:
  # - name: the display name for the material
  #

  # Test the example code that we have in the API documentation.
  def test_display_name_api_example
    Sketchup.active_model.start_operation "test_display_name_api_example"
    assert_nothing_raised do
     model = Sketchup.active_model
     materials = model.materials
     # Adds a material to the "in-use" material pallet.
     m = materials.add "Joe"
     m2 = materials.add "Fred"

     # Returns nil if not successful, path if successful.
     # Should return a texture object.
     m.texture = "c:\\Materials\\Carpet.jpg"
     m2.texture = "c:\\Materials\\BlueTile.jpg"
     name = m.display_name

     if (name)
       UI.messagebox name
     else
       UI.messagebox "Failure"
     end
    end
    Sketchup.active_model.commit_operation
    Sketchup.undo
  end

  # Test edgecases for values passed to this method.
  def test_display_name_edgecases
    Sketchup.active_model.start_operation "test_display_name_edgecases"
     model = Sketchup.active_model
     materials = model.materials
     m = materials.add "Joe"
     result = m.display_name
     expected = "Joe"
    assert_equal(expected, result,
                 'Failed in test_display_name_edgecases' )
    Sketchup.active_model.commit_operation
    Sketchup.undo
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_display_name_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Material.texture=
  # @file                rmaterial.cpp
  #
  # The texture= method sets the texture for the material.
  #
  # Setting the Texture to nil will turn it into a solid color
  #
  #
  # Args:
  # - texture: The Texture object to apply to the material.
  #
  # Returns:
  # - texture: the newly set Texture object
  #

  # Test the example code that we have in the API documentation.
  def test_set_texture_api_example
    Sketchup.active_model.start_operation "test_set_texture_api_example"
    assert_nothing_raised do
      model = Sketchup.active_model
      materials = model.materials

      # Adds a material to the "in-use" material pallet.
      m = materials.add "Joe"
      m2 = materials.add "Fred"

      # Returns nil if not successful, path if successful.
      # Should return a texture object.
      m.texture = "c:\\Materials\\Carpet.jpg"
      m2.texture = "c:\\Materials\\BlueTile.jpg"
      texture = m.texture = "c:\\Materials\\BlueTile.jpg"
      if (texture)
        UI.messagebox texture
      else
        UI.messagebox "Failure"
      end
    end
    Sketchup.active_model.commit_operation
    Sketchup.undo
  end

  # Test edgecases for values passed to this method.
  #TODO(snicolo): what is the right way to test this one?
  #TODO(snicolo): Texture Path needs to be relative, otherwise the Mac PC issue is evident
  #def test_set_texture_edgecases
  #  Sketchup.active_model.start_operation " test_set_texture_edgecases"
  #  model = Sketchup.active_model
  #  materials = model.materials

    # Adds a material to the "in-use" material pallet.
  #  m = materials.add "Joe"
  #  m1 = materials.add "Expected"
  #  m.texture = "/Users/snicolo/Desktop/untitled.jpg"
  #  expected_texture = "/Users/snicolo/Desktop/untitled.jpg"
  #  puts "TEXTURE: " + texture.to_s
  #  puts "M_TEXTURE: " + m.texture.to_s
      
  #  assert_equal(texture, m.texture,
  #               'Failed in test_set_texture_edgecases' )
  #  Sketchup.active_model.commit_operation
  #end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_set_texture_bad_params
    Sketchup.active_model.start_operation "test_set_texture_bad_params"
    model = Sketchup.active_model
    materials = model.materials
    m = materials.add "Joe"
    assert_raise ArgumentError do
      # bad arguments here that should cause errors
      m.texture = 748327489723423984732748723894793242
    end
    Sketchup.active_model.commit_operation
    Sketchup.undo
  end
  

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Material.texture
  # @file                rmaterial.cpp
  #
  # The texture method retrieves the texture of the material.
  #
  #
  # Args:
  #
  # Returns:
  # - texture: the Texture object within the Material.
  # Returns nil if the Material does not have a Texture.
  #

  # Test the example code that we have in the API documentation.
  def test_texture_api_example
    Sketchup.active_model.start_operation "test_texture_api_example"
    assert_nothing_raised do
     model = Sketchup.active_model
     materials = model.materials

     # Adds a material to the "in-use" material pallet.
     m = materials.add "Joe"
     m2 = materials.add "Fred"

     # Returns nil if not successful, path if successful.
     # Should return a texture object.
     m.texture = "c:\\Materials\\Carpet.jpg"
     m2.texture = "c:\\Materials\\BlueTile.jpg"
     texture = m.texture
     if (texture)
       UI.messagebox texture
     else
       UI.messagebox "Failure"
     end
    end
    Sketchup.active_model.commit_operation
    Sketchup.undo
  end

  # Test edgecases for values passed to this method.
  def test_texture_edgecases
    Sketchup.active_model.start_operation "test_texture_edgecases"
    model = Sketchup.active_model
    material = model.materials[0]
    texture = material.texture
    assert_not_equal(nil,texture,
                 'Failed in test_texture_edgecases' )
    Sketchup.active_model.commit_operation
    Sketchup.undo
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_texture_bad_params
  #  raise('AUTOGENERATED STUB. Do manual review, then delete this warning.')
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Material.color
  # @file                rmaterial.cpp
  #
  # The color method is used to retrieve the color of the material.
  #
  # If it uses a Texture, this will return the average color.
  #
  #
  # Args:
  #
  # Returns:
  # - color: a Color object
  #

  # Test the example code that we have in the API documentation.
  def test_color_api_example
    Sketchup.active_model.start_operation "test_color_api_example"
    assert_nothing_raised do
     model = Sketchup.active_model
     materials = model.materials

     # Adds a material to the "in-use" material pallet.
     m = materials.add "Joe"
     m2 = materials.add "Fred"

     # Returns nil if not successful, path if successful.
     # Should return a texture object.
     m.texture = "c:\\Materials\\Carpet.jpg"
     m2.texture = "c:\\Materials\\BlueTile.jpg"
     color = m.color
     if (color)
       UI.messagebox color
     else
       UI.messagebox "Failure"
     end
    end
    Sketchup.active_model.commit_operation
    Sketchup.undo
  end

  # Test edgecases for values passed to this method.
  def test_color_edgecases
    Sketchup.active_model.start_operation "test_color_edgecases"
    
    model = Sketchup.active_model
    material = model.materials[0]
    color = material.color
    assert_not_equal(nil, color,
                 'Failed in test_color_edgecases' )
    Sketchup.active_model.commit_operation
    Sketchup.undo
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  #def test_color_bad_params
  # Sketchup.active_model.start_operation "test_color_bad_params"
  #  assert_raise RuntimeError do
  #    # bad arguments here that should cause errors
  #  end
  #  Sketchup.active_model.commit_operation
  #end

  # ----------------------------------------------------------------------------
  # @par Ruby Method:    Material.alpha=
  # @file                rmaterial.cpp
  #
  # The alpha= material is used to set the opacity of the material.
  #
  # The value must be between 0 and 1. A value of 0 means that the
  # material is completely transparent. A value of 1 means that the
  # Material is completely opaque.
  #
  #
  # Args:
  # - alpha: An opacity value.
  #
  # Returns:
  # - status: the newly set opacity value
  #

  # Test the example code that we have in the API documentation.
  def test_set_alpha_api_example
    Sketchup.active_model.start_operation "test_set_alpha_api_example"
    assert_nothing_raised do
     model = Sketchup.active_model
     materials = model.materials

     # Adds a material to the "in-use" material pallet.
     m = materials.add "Joe"
     m2 = materials.add "Fred"

     # Returns nil if not successful, path if successful.
     # Should return a texture object.
     m.texture = "c:\\Materials\\Carpet.jpg"
     m2.texture = "c:\\Materials\\BlueTile.jpg"
     alpha = m.alpha = 0
     if (alpha)
       UI.messagebox alpha
     else
       UI.messagebox "Failure"
     end
    end
    Sketchup.active_model.commit_operation
    Sketchup.undo
  end

  # Test edgecases for values passed to this method.
  def test_set_alpha_edgecases
    Sketchup.active_model.start_operation "test_set_alpha_edgecases"
     model = Sketchup.active_model
     material = model.materials[0]
     material.alpha = 0.75
    assert_equal(0.75, material.alpha,
                 'Failed in test_set_alpha_edgecases' )
    Sketchup.active_model.commit_operation
    Sketchup.undo
  end

  # Test what happens when bad arguments are passed (nil, too few, etc.)
  def test_set_alpha_bad_params
    Sketchup.active_model.start_operation "test_set_alpha_bad_params"
    model = Sketchup.active_model
    material = model.materials[0]
    assert_raise TypeError do
      # bad arguments here that should cause errors
      material.alpha = "stringWhereAFloatIsExpected"
    end
    Sketchup.active_model.commit_operation
    Sketchup.undo
  end

  # Test name=
  def test_set_material_name
    model = Sketchup.active_model
    m = model.materials.add "Joe"
    assert_equal("Joe", m.name,
             'Failed in test_set_material_name' )
    m.name= "Jeff"
    assert_equal("Jeff", m.name,
             'Failed in test_set_material_name' )

  end

  def test_export_material_thumbnails
    model = Sketchup.active_model
    materials = model.materials
    materials.each do |material|
      local_path = __FILE__.slice(0, __FILE__.rindex('.'))
      #puts "path : #{local_path}"
      thumbnail_filename = local_path + '/' + material.display_name + '.png'
      puts thumbnail_filename
      assert_equal(true, material.write_thumbnail(thumbnail_filename, 64),
                   'Failed in test_export_material_thumbnails' )
    end
  end

end #end of tests


